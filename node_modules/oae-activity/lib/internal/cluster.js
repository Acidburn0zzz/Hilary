/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var ShortId = require('shortid');
var util = require('util');

var Locking = require('oae-util/lib/locking');
var log = require('oae-logger').logger('oae-activity-cluster');

// The redis client to use for managing locks
var redisClient = null;

var init = module.exports.init = function(_redisClient) {
    redisClient = _redisClient;
};

/**
 * Try and acquire a temporary lock for the activity processing bucket with the given bucket number.
 *
 * @param   {Number}    bucketNumber            The number of the bucket to try and acquire.
 * @param   {Number}    expiresIn               Maximum number of seconds for which to hold the lock on the bucket.
 * @param   {Function}  callback                Invoked when the lock as been acquired (or failed to be acquired).
 * @param   {Object}    callback.err            An error that occurred, if any.
 * @param   {String}    callback.token          An identifier for the lock that was granted. If unspecified, the bucket was already locked by someone else.
 */
var acquireBucket = module.exports.acquireBucket = function(bucketNumber, expiresIn, callback) {
    Locking.acquire(_getLockKey(bucketNumber), expiresIn, callback);
};

/**
 * Release the lock on the specified bucket.
 *
 * @param  {Number}     bucketNumber        The number of the bucket on which to release the lock.
 * @param  {String}     token               The identifier of the lock that was given when the lock was acquired.
 * @param  {Function}   callback            Invoked when the lock has been released.
 * @param  {Object}     callback.err        An error that occurred, if any.
 * @param  {Boolean}    callback.hadLock    Specifies whether or not we actually released a lock
 */
var releaseBucket = module.exports.releaseBucket = function(bucketNumber, token, callback) {
    Locking.release(_getLockKey(bucketNumber), token, callback);
};

/**
 * Get the lock key for the given bucket number. The bucket lock key will look like: oae-activity:bucket:lock-0
 * for the 0th bucket, for example.
 *
 * @param   {Number}    bucketNumber    The bucket number for which to create the lock key.
 * @param   {String}                    The key that can be used to lock the bucket with the given number.
 * @api private
 */
var _getLockKey = function(bucketNumber) {
    return util.format('oae-activity:bucket:lock-%s', bucketNumber);
};
