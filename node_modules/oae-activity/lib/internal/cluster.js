/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var util = require('util');
var ShortId = require('shortid');

var log = require('oae-logger').logger('activity-cluster');
var Redis = require('oae-util/lib/redis');

var acquireBucket = module.exports.acquireBucket = function(bucketNumber, expiresIn, callback) {
    log().trace('Trying to acquire bucket number %s.', bucketNumber);

    var client = Redis.getClient();
    var lockKey = _getLockKey(bucketNumber);
    var tokenKey = _getTokenKey(bucketNumber);
    client.get(lockKey, function(err, expires) {
        if (err) {
            return callback(err);
        } else if (!expires) {
            // There is no lock on this bucket, try and acquire the lock
            return _acquireLock(lockKey, tokenKey, expiresIn, callback);
        }

        if (expires <= Date.now()) {
            // There is a lock but it is expired, try and steal the lock
            _stealLock(lockKey, tokenKey, expiresIn, callback);
        } else {
            // This has an active lock, we have failed to acquire the bucket
            return callback();
        }
    });
};

var releaseBucket = module.exports.releaseBucket = function(bucketNumber, token, callback) {
    var client = Redis.getClient();
    var lockKey = _getLockKey(bucketNumber);
    var tokenKey = _getTokenKey(bucketNumber);
    client.get(lockKey, function(err, expires) {
        if (err) {
            return callback(err);
        } else if (!expires) {
            log().trace('Attempted to release unlocked bucket %s.', bucketNumber);
            // There is no lock for this bucket, nothing to release
            return callback();
        }

        client.get(tokenKey, function(err, currToken) {
            if (err) {
                return callback(err);
            } else if (token !== currToken || expires <= Date.now()) {
                log().trace('Attempted to release an expired lock on bucket %s.', bucketNumber);
                // It's technically not our lock anymore, don't delete it
                return callback();
            }
            
            log().trace('Released lock on bucket %s.', bucketNumber);
            return client.del(lockKey, callback);
        });
    });
};

var _acquireLock = function(lockKey, tokenKey, expiresIn, callback) {
    var client = Redis.getClient();
    var val = _createLockVal(expiresIn);
    // When getting a fresh lock, we use setnx, which is atomic and will tell us if we successfully set the value
    client.setnx(lockKey, val, function(err, wasSet) {
        if (err) {
            return callback(err);
        } else if (wasSet !== 1) {
            log().trace('Failed to acquire lock with key %s.', lockKey);
            // We did not get the lock, we have failed to acquire the bucket
            return callback();
        }

        log().trace('Acquired lock with key "%s" and value "%s".', lockKey, val);
        // We got the lock, acquisition of the bucket is successful. Create and return the token to the caller
        _setToken(tokenKey, callback);
    });
};

var _stealLock = function(lockKey, tokenKey, expiresIn, callback) {
    var client = Redis.getClient();
    var val = _createLockVal(expiresIn);
    // When stealing an existing lock, we know the lock value is an expired timestamp. Do an atomic GETSET, which will return the value
    // previous to us setting it. If the value returned is still an expired timestamp, we know we "won the race" to acquire the lock.
    client.getset(lockKey, val, function(err, prevExpires) {
        if (err) {
            return callback(err);
        }

        if (prevExpires <= Date.now()) {
            log().trace('Successfully stole lock with key "%s" and value "%s".', lockKey, val);
            // If the preview value was expired, it means we successfully acquired the lock VIA getset. Set the token and return it to the caller
            return _setToken(tokenKey, callback);
        } else {
            log().trace('Failed to steal a lock with key %s, as someone acquired it just before.', lockKey);
            // The expiry before we reset it was not expired, which means someone beat us to the steal. We failed to acquire the bucket
            return callback();
        }
    });
};

var _setToken = function(tokenKey, callback) {
    var client = Redis.getClient();
    var token = ShortId.generate();
    client.set(tokenKey, token, function(err) {
        if (err) {
            return callback(err);
        }

        log().trace({'key': tokenKey, 'token': token}, 'Created new lock token.');
        return callback(null, token);
    });
};

var _createLockVal = function(expiresIn) {
    return Date.now() + expiresIn + 1;
};

var _getLockKey = function(bucketNumber) {
    return util.format('oae-activity:bucket:lock-%s', bucketNumber);
};

var _getTokenKey = function(bucketNumber) {
    return util.format('oae-activity:bucket:token-%s', bucketNumber);
};
