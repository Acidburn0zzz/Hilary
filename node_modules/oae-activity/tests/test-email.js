/*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var AuthzUtil = require('oae-authz/lib/util');
var EmailTestsUtil = require('oae-email/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var Sanitization = require('oae-util/lib/sanitization');
var TestsUtil = require('oae-tests');

var ActivityAPI = require('oae-activity');
var ActivityTestsUtil = require('oae-activity/lib/test/util');
var ActivityDAO = require('oae-activity/lib/internal/dao');

describe('Activity - Email', function() {

    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the REST contexts
     */
    before(function(callback) {
        // Fill up tenant admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Flush the pending mails
        EmailTestsUtil.flushEmails(callback);
    });

    /**
     * Get all the attachment content ids from a string of HTML that are used as image sources
     *
     * @param  {String}     html    The HTML string to search through
     * @return {String[]}           The array of content ids that are used as image sources
     * @api private
     */
    var getAttachments = function(html) {
        var re = /img src="cid:([a-z0-9]+\.[a-z]+)"/g;
        var match = re.exec(html);
        var attachments = [];
        while (match) {
            attachments.push(match[1]);
            match = re.exec(html);
        }
        return attachments;
    };

    /**
     * @return {Stream} A stream to jpg image
     */
    var getPictureStream = function() {
        var file = __dirname + '/data/profilepic.jpg';
        return fs.createReadStream(file);
    };

    /**
     * Set the activity mail configuration so the next collection cycle
     * may or may not include the daily and/or weekly emails.
     *
     * @param  {Boolean}    expectDaily     Whether or not daily mails should be collected in the next cycle
     * @param  {Boolean}    expectWeekly    Whether or not weekly mails should be collected in the next cycle
     * @param  {Function}   callback        Standard callback function
     * @throws {Error}                      An assertion error is thrown if the configuration could not be set
     */
    var refreshConfiguration = function(expectDaily, expectWeekly, callback) {
        var now = new Date();

        var dailyHour = null;
        if (expectDaily) {
            dailyHour = now.getHours() + 1;
        } else {
            dailyHour = now.getHours() + 5;
        }
        dailyHour = dailyHour % 24;

        var weeklyHour = null;
        var weeklyDay = null;
        if (expectWeekly) {
            weeklyHour = now.getHours() + 1;
            weeklyDay = now.getDay();

            // If we're running the tests at 23:30,
            // we need to ensure that we set the config to 0:30 the next day
            if (weeklyHour >= 24) {
                weeklyDay = (weeklyDay + 1) % 7;
            }
        } else {
            weeklyHour = 0;
            weeklyDay = now.getDay() + 3;
        }

        var config = {
            'mail': {
                'pollingFrequency': 60 * 60,    // Make it exactly an hour
                'daily': {'hour': dailyHour},
                'weekly': {'hour': weeklyHour, 'day': weeklyDay}
            }
        };
        ActivityAPI.refreshConfiguration(config, function(err) {
            assert.ok(!err);
            return callback(err);
        });
    };

    /**
     * Test that verifies that emails aggregate
     */
    it('verify email aggregation', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, simong, nico, mrvisser) {
            assert.ok(!err);

            RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [nico.user.id], function(err, firstLink) {
                assert.ok(!err);
                RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [nico.user.id], function(err, secondLink) {
                    assert.ok(!err);
                    RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [nico.user.id], function(err, thirdLink) {
                        assert.ok(!err);
                        RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [nico.user.id], function(err, fourthLink) {
                            assert.ok(!err);
                            RestAPI.Discussions.createDiscussion(simong.restContext, 'First discussion', 'descr', 'public', null, [nico.user.id], function(err, firstDiscussion) {
                                assert.ok(!err);

                                // Nico should've received an email with 3 activities in it
                                //  - 1 content-create: Branden created 2 links
                                //  - 1 content-create: Simon created 2 links
                                //  - 1 discussion-create: Simon created a discussion
                                EmailTestsUtil.collectAndFetchEmails(function(messages) {
                                    assert.equal(messages.length, 1);
                                    assert.equal(messages[0]['_message'].to, nico.user.email);

                                    // Assert there are 3 activities in there
                                    assert.equal(messages[0]['_message'].html.match(/class="activity"/g).length, 3);

                                    // Assert the links to the content items and discussion are present
                                    assert.ok(messages[0]['_message'].html.indexOf(firstLink.profilePath) > 0);
                                    assert.ok(messages[0]['_message'].html.indexOf(secondLink.profilePath) > 0);
                                    assert.ok(messages[0]['_message'].html.indexOf(thirdLink.profilePath) > 0);
                                    assert.ok(messages[0]['_message'].html.indexOf(fourthLink.profilePath) > 0);
                                    assert.ok(messages[0]['_message'].html.indexOf(firstDiscussion.profilePath) > 0);

                                    // Assert the links to the actors their profile are present
                                    assert.ok(messages[0]['_message'].html.indexOf(mrvisser.user.profilePath) > 0);
                                    assert.ok(messages[0]['_message'].html.indexOf(simong.user.profilePath) > 0);

                                    RestAPI.Discussions.createDiscussion(simong.restContext, 'Second discussion', 'descr', 'public', null, [nico.user.id, mrvisser.user.id], function(err, secondDiscussion) {
                                        assert.ok(!err);

                                        EmailTestsUtil.collectAndFetchEmails(function(messages) {
                                            assert.equal(messages.length, 2);
                                            _.each(messages, function(message) {
                                                assert.ok(_.contains([nico.user.email, mrvisser.user.email], message['_message'].to));

                                                // Assert there is 1 activity in there
                                                assert.equal(message['_message'].html.match(/class="activity"/g).length, 1);

                                                // Assert the link to the discussion is present
                                                assert.ok(message['_message'].html.indexOf(secondDiscussion.profilePath) > 0);

                                                // Assert the link to Simon's profile is present
                                                assert.ok(message['_message'].html.indexOf(simong.user.profilePath) > 0);
                                            });

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the email aggregator respects each user their email preference
     */
    it('verify aggregation respects email preference', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 5, function(err, users, neverMailUser, immediateMailUser, dailyMailUser, weeklyMailUser, simong) {
            assert.ok(!err);
            RestAPI.User.updateUser(neverMailUser.restContext, neverMailUser.user.id, {'emailPreference': 'never'}, function(err) {
                assert.ok(!err);
                RestAPI.User.updateUser(immediateMailUser.restContext, immediateMailUser.user.id, {'emailPreference': 'immediate'}, function(err) {
                    assert.ok(!err);
                    RestAPI.User.updateUser(dailyMailUser.restContext, dailyMailUser.user.id, {'emailPreference': 'daily'}, function(err) {
                        assert.ok(!err);
                        RestAPI.User.updateUser(weeklyMailUser.restContext, weeklyMailUser.user.id, {'emailPreference': 'weekly'}, function(err) {
                            assert.ok(!err);

                            // Configure the email collector, so that the email collection window doesn't include 
                            // the daily and weekly collection point
                            refreshConfiguration(false, false, function() {

                                // Trigger an activity
                                RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.be', [], [neverMailUser.user.id, immediateMailUser.user.id, dailyMailUser.user.id, weeklyMailUser.user.id], function(err, firstLink) {
                                    assert.ok(!err);

                                    // Collect the e-mails, only the immediate user should've received an e-mail
                                    EmailTestsUtil.collectAndFetchEmails(function(messages) {
                                        assert.equal(messages.length, 1);
                                        assert.equal(messages[0]['_message'].to, immediateMailUser.user.email);
                                        assert.equal(messages[0]['_message'].html.match(/class="activity"/g).length, 1);

                                        // Configure the email collector, so that the email collection window includes
                                        // the daily but not the weekly collection point
                                        refreshConfiguration(true, false, function() {

                                            // Trigger an activity
                                            RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.be', [], [neverMailUser.user.id, immediateMailUser.user.id, dailyMailUser.user.id, weeklyMailUser.user.id], function(err, secondLink) {
                                                assert.ok(!err);

                                                // Collect the e-mails, only the immediate and daily users should've received an e-mail
                                                EmailTestsUtil.collectAndFetchEmails(function(messages) {
                                                    assert.equal(messages.length, 2);
                                                    assert.ok(_.contains([immediateMailUser.user.email, dailyMailUser.user.email], messages[0]['_message'].to));
                                                    assert.ok(_.contains([immediateMailUser.user.email, dailyMailUser.user.email], messages[1]['_message'].to));
                                                    // Assert that the "weekly" mail user's email contains 1 activity
                                                    var dailyMail = _.find(messages, function(message) { return (message['_message'].to === dailyMailUser.user.email); });
                                                    assert.ok(dailyMail);
                                                    assert.equal(dailyMail['_message'].html.match(/class="activity"/g).length, 1);

                                                    // Configure the email collector, so that the email collection window includes
                                                    // the weekly but not the daily collection point
                                                    refreshConfiguration(false, true, function() {

                                                        // Trigger an activity
                                                        RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.be', [], [neverMailUser.user.id, immediateMailUser.user.id, dailyMailUser.user.id, weeklyMailUser.user.id], function(err, thirdLink) {
                                                            assert.ok(!err);

                                                            // Collect the e-mails, only the immediate and weekly users should've received an e-mail
                                                            EmailTestsUtil.collectAndFetchEmails(function(messages) {
                                                                assert.equal(messages.length, 2);
                                                                var mailAddresses = [immediateMailUser.user.email, weeklyMailUser.user.email];
                                                                assert.ok(_.contains(mailAddresses, messages[0]['_message'].to));
                                                                assert.ok(_.contains(mailAddresses, messages[1]['_message'].to));
                                                                // Assert that the "weekly" mail user's email contains 1 activity
                                                                var weeklyMail = _.find(messages, function(message) { return (message['_message'].to === weeklyMailUser.user.email); });
                                                                assert.ok(weeklyMail);
                                                                assert.equal(weeklyMail['_message'].html.match(/class="activity"/g).length, 1);

                                                                // Configure the email collector, so that the email collection window includes
                                                                // both the daily and the weekly collection point
                                                                refreshConfiguration(true, true, function() {

                                                                    // Trigger an activity
                                                                    RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.be', [], [neverMailUser.user.id, immediateMailUser.user.id, dailyMailUser.user.id, weeklyMailUser.user.id], function(err, thirdLink) {
                                                                        assert.ok(!err);

                                                                        // Collect the e-mails, all users (except the neverMailUser) should've received an e-mail
                                                                        EmailTestsUtil.collectAndFetchEmails(function(messages) {
                                                                            assert.equal(messages.length, 3);
                                                                            var mailAddresses = [immediateMailUser.user.email, dailyMailUser.user.email, weeklyMailUser.user.email];
                                                                            assert.ok(_.contains(mailAddresses, messages[0]['_message'].to));
                                                                            assert.ok(_.contains(mailAddresses, messages[1]['_message'].to));
                                                                            assert.ok(_.contains(mailAddresses, messages[2]['_message'].to));

                                                                            // Assert that the "weekly" mail user's email contains 1 activity (but is an aggregate of 3)
                                                                            var weeklyMail = _.find(messages, function(message) { return (message['_message'].to === weeklyMailUser.user.email); });
                                                                            assert.ok(weeklyMail);
                                                                            assert.equal(weeklyMail['_message'].html.match(/class="activity"/g).length, 1);
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the timestamp when emails are sent out is hinging on the user's timezone.
     * We test this by creating 24 users, each in a different timezone (1 hour difference between two zones),
     * triggering an activity for all 24 users, collecting the emails and asserting only one received an e-mail.
     */
    it('verify sending emails depends on users their timezone', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 25, function(err, users, simong) {
            assert.ok(!err);

            // Enable daily mails
            refreshConfiguration(true, false, function() {

                var userUpdated = _.after(24, function() {
                    // Trigger a mail for all 24 users
                    var userIds = _.map(users, function(user, userId) { return userId; });
                    RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], userIds, function(err, link) {
                        assert.ok(!err);
                        EmailTestsUtil.collectAndFetchEmails(function(messages) {
                            assert.equal(messages.length, 1);

                            return callback();
                        });
                    });
                });

                // Give each user a different timezone
                var timezone = -13;
                delete users[simong.user.id];
                _.each(users, function(user) {
                    timezone++;
                    var zone = 'Etc/GMT' + ((timezone < 0) ? timezone : ('+' + timezone));
                    RestAPI.User.updateUser(user.restContext, user.user.id, {'timezone': zone, 'emailPreference': 'daily'}, function(err) {
                        assert.ok(!err);
                        userUpdated();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the email subject is i18nable
     */
    it('verify email subject headers', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, simong, nico) {
            assert.ok(!err);

            // Trigger a mail for Nico
            RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [nico.user.id], function(err, link) {
                assert.ok(!err);
                EmailTestsUtil.collectAndFetchEmails(function(messages) {
                    assert.equal(messages.length, 1);

                    // Assert that we're using a localized message for the subject header
                    var mail = messages[0]['_message'];
                    assert.equal(mail.subject.indexOf('__MSG__'), -1);

                    // The message can change, but the actor's and object's displayname will usually be in there
                    assert.ok(mail.subject.indexOf(simong.user.displayName) !== -1);
                    assert.ok(mail.subject.indexOf(link.displayName) !== -1);

                    // Trigger a mail that contains two different activities
                    RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [nico.user.id], function(err, secondLink) {
                        assert.ok(!err);
                        RestAPI.Discussions.createDiscussion(simong.restContext, 'First discussion', 'descr', 'public', null, [nico.user.id], function(err, firstDiscussion) {
                            assert.ok(!err);

                            // Collect the e-mail, there should only be one
                            EmailTestsUtil.collectAndFetchEmails(function(messages) {
                                assert.equal(messages.length, 1);

                                // Assert that we're using a localized message for the subject header
                                var secondMail = messages[0]['_message'];
                                assert.equal(secondMail.subject.indexOf('__MSG__'), -1);

                                // Assert that this mail's subject is different from the initial mail as it spans two activities
                                assert.notEqual(mail.subject, secondMail.subject);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that profile pictures are embedded
     */
    it('verify profile picture embedding', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users, simong, nico) {
            assert.ok(!err);

            // Give Simon a picture
            var selectedArea = {'x': 0, 'y': 0, 'width': 200};
            RestAPI.User.uploadPicture(simong.restContext, simong.user.id, getPictureStream, selectedArea, function(err) {
                assert.ok(!err);

                // Trigger a mail for Nico
                RestAPI.Content.createLink(simong.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [nico.user.id], function(err, thirdLink) {
                    assert.ok(!err);
                    EmailTestsUtil.collectAndFetchEmails(function(messages) {
                        assert.equal(messages.length, 1);

                        var mail = messages[0]['_message'];
                        assert.equal(mail.to, nico.user.email);

                        // Assert there is only 1 activity in there
                        assert.equal(mail.html.match(/class="activity"/g).length, 1);

                        // Assert that there is a profile pic in there which has an attachment
                        var attachments = getAttachments(mail.html);
                        assert.equal(attachments.length, 1);
                        assert.equal(messages[0]['_attachments'].length, 1);
                        assert.equal(messages[0]['_attachments'][0].cid, attachments[0]);

                        return callback();
                    });
                });
            });
        });
    });
});
