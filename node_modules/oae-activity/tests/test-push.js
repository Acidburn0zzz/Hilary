/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var clone = require('clone');

var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

var ActivityTestUtil = require('oae-activity/lib/test/util');

describe('Activity push', function() {

    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        return callback();
    });

    describe('Protocol', function() {

        /**
         * Test that verifies that messages that are sent by a client need to have an ID
         */
        it('verify missing id results in an immediate disconnect', function(callback) {
            ActivityTestUtil.getClient(function(client) {
                var socket = client.getRawSocket();

                var receivedMessages = 0;

                // The socket should close
                client.on('close', function() {
                    // We need to have received a message first
                    assert.equal(receivedMessages, 1);
                    callback();
                });

                client.on('message', function(message) {
                    // Ensure we only get one message
                    assert.strictEqual(receivedMessages, 0);
                    assert.equal(message.error.code, 400);
                    receivedMessages++;
                });

                // Send a message that contains no ID
                socket.write('{}');
            });
        });

        /**
         * Test that verifies that non JSON messages get rejected
         */
        it('verify a malformed message results in an immediate disconnect', function(callback) {
            ActivityTestUtil.getClient(function(client) {
                var socket = client.getRawSocket();

                var receivedMessages = 0;

                // The socket should close because we're not authenticated
                client.on('close', function() {
                    // We need to have received a message first
                    assert.equal(receivedMessages, 1);
                    callback();
                });

                client.on('message', function(message) {
                    // Ensure we only get one message
                    assert.strictEqual(receivedMessages, 0);
                    assert.equal(message.error.code, 400);
                    receivedMessages++;
                });

                // Send a malformed message
                socket.write('NO JSON');
            });
        });
    });

    describe('Authentication', function() {

        /**
         * Test that verifies that the very first frame that gets sent has to be an authentication frame
         */
        it('verify no authentication frame results in a disconnect', function(callback) {
            ActivityTestUtil.getClient(function(client) {
                client.sendMessage('foo', {}, function(err, msg) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                });

                client.on('close', function() {
                    callback();
                });
            });
        });

        /**
         * Test that verifies that an invalid user id results in an error
         */
        it('verify an invalid user id results in a error', function(callback) {
            ActivityTestUtil.getClient(function(client) {

                var receivedResponse = false;

                // Sending an invalid authentication frame should fail
                client.sendMessage('authentication', {'userId': 'not-a-user-id', 'signature': {}}, function(err, data) {
                    assert.equal(err.code, 400);
                    receivedResponse = true;
                });

                client.on('close', function() {
                    if (receivedResponse) {
                        callback();
                    } else {
                        assert.fail('Expected to receive a message before closing the socket');
                    }
                });
            });
        });

        /**
         * Test that verifies that an invalid signature results in an error
         */
        it('verify a missing signature results in a error', function(callback) {
            ActivityTestUtil.getClient(function(client) {

                var receivedResponse = false;

                // Sending an invalid authentication frame should fail
                client.sendMessage('authentication', {'userId': 'u:camtest:foobar'}, function(err, data) {
                    assert.equal(err.code, 400);
                    receivedResponse = true;
                });

                client.on('close', function() {
                    if (receivedResponse) {
                        callback();
                    } else {
                        assert.fail('Expected to receive a message before closing the socket');
                    }
                });
            });
        });

        /**
         * Test that verifies that clients can authenticate themselves on the socket
         */
        it('verify authentication', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                var restContext = _.values(users)[0].restContext;

                RestAPI.User.getMe(restContext, function(err, meData) {
                    assert.ok(!err);

                    ActivityTestUtil.getClient(function(client) {
                        // The first message should always be the authentication message
                        // If not, the backend should close the socket.
                        client.authenticate(meData.id, meData.tenant.alias, meData.signature, function(err, data) {
                            assert.ok(!err);
                            client.close();
                            client.on('close', callback);
                        });
                    });
                });
            });
        });
    });

    describe('Subscribing', function() {

        /**
         * Test that verifies subscribing and authorization on activity streams
         */
        it('verify subscribing for an unknown stream is erraneous', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                var mrvisser = _.values(users)[0];

                RestAPI.User.getMe(mrvisser.restContext, function(err, mrvisserMeData) {
                    assert.ok(!err);

                    var data = {
                        'authentication': {
                            'userId': mrvisserMeData.id,
                            'tenantAlias': mrvisserMeData.tenant.alias,
                            'signature': mrvisserMeData.signature
                        },
                        'streams': []
                    };
                    ActivityTestUtil.getFullySetupClient(data, function(client) {

                        // Registering on an unknown feed should result in an error
                        client.subscribe(mrvisser.user.id, 'unknown', {'some': 'token'}, function(err, msg) {
                            assert.equal(err.code, 400);

                            client.close();
                            client.on('close', callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies subscribing and authorization on activity streams
         */
        it('verify subscribing and authorization on activity streams', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                var mrvisser = _.values(users)[0];
                var simon = _.values(users)[1];

                RestAPI.User.getMe(mrvisser.restContext, function(err, mrvisserMeData) {
                    assert.ok(!err);

                    var data = {
                        'authentication': {
                            'userId': mrvisserMeData.id,
                            'tenantAlias': mrvisserMeData.tenant.alias,
                            'signature': mrvisserMeData.signature
                        },
                        'streams': []
                    };
                    ActivityTestUtil.getFullySetupClient(data, function(client) {

                        // Mrvisser cannot subscribe on Simon's feed
                        client.subscribe(simon.user.id, 'activity', mrvisserMeData.signature, function(err, msg) {
                            assert.equal(err.code, 401);

                            // He can register for his own feed without a token since he's authenticated on the socket
                            client.subscribe(mrvisser.user.id, 'activity', null, function(err, msg) {
                                assert.ok(!err);

                                // He can register on a group feed
                                RestAPI.Group.createGroup(mrvisser.restContext, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, group) {
                                    assert.ok(!err);
                                    RestAPI.Group.getGroup(mrvisser.restContext, group.id, function(err, group) {
                                        assert.ok(!err);
                                        client.subscribe(group.id, 'activity', group.signature, function(err, msg) {
                                            assert.ok(!err);

                                            client.close();
                                            client.on('close', callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies subscribing and authorization on notification streams
         */
        it('verify subscribing and authorization on notification streams', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                var mrvisser = _.values(users)[0];
                var simon = _.values(users)[1];

                RestAPI.User.getMe(mrvisser.restContext, function(err, mrvisserMeData) {
                    assert.ok(!err);

                    var data = {
                        'authentication': {
                            'userId': mrvisserMeData.id,
                            'tenantAlias': mrvisserMeData.tenant.alias,
                            'signature': mrvisserMeData.signature
                        },
                        'streams': []
                    };
                    ActivityTestUtil.getFullySetupClient(data, function(client) {

                        // Mrvisser cannot subscribe on Simon's feed
                        client.subscribe(simon.user.id, 'notification', mrvisserMeData.signature, function(err, msg) {
                            assert.equal(err.code, 401);

                            // Groups don't have notification feeds
                            RestAPI.Group.createGroup(mrvisser.restContext, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, group) {
                                assert.ok(!err);
                                RestAPI.Group.getGroup(mrvisser.restContext, group.id, function(err, group) {
                                    assert.ok(!err);
                                    client.subscribe(group.id, 'notification', group.signature, function(err, msg) {
                                        assert.equal(err.code, 400);

                                        // He can register for his own feed without a token since he's authenticated on the socket
                                        client.subscribe(mrvisser.user.id, 'notification', null, function(err, msg) {
                                            assert.ok(!err);

                                            client.close();
                                            client.on('close', callback);
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that you only get activities that occur on the subscribed resources
         */
        it('verify segregation', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                var mrvisser = _.values(users)[0];

                RestAPI.User.getMe(mrvisser.restContext, function(err, mrvisserMeData) {
                    assert.ok(!err);

                    RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://www.yahoo.ca', [], [], function(err, yahooLink) {
                        assert.ok(!err);
                        RestAPI.Content.getContent(mrvisser.restContext, yahooLink.id, function(err, yahooLink) {
                            assert.ok(!err);
                            RestAPI.Content.createLink(mrvisser.restContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, googleLink) {
                                assert.ok(!err);
                                RestAPI.Content.getContent(mrvisser.restContext, googleLink.id, function(err, googleLink) {
                                    assert.ok(!err);

                                    // Route and deliver activities
                                    ActivityTestUtil.collectAndGetActivityStream(mrvisser.restContext, null, null, function(err) {
                                        assert.ok(!err);

                                        // Subscribe on the Yahoo link
                                        var data = {
                                            'authentication': {
                                                'userId': mrvisserMeData.id,
                                                'tenantAlias': mrvisserMeData.tenant.alias,
                                                'signature': mrvisserMeData.signature
                                            },
                                            'streams': [{'resourceId': yahooLink.id, 'streamType': 'activity', 'token': yahooLink.signature}]
                                        };
                                        ActivityTestUtil.getFullySetupClient(data, function(client) {
                                            client.on('message', function(message) {
                                                if (message) {
                                                    assert.fail('No activities should be pushed to this stream as nothing happened on the "yahoo" link');
                                                }
                                            });

                                            // Trigger an update on the google item, we should not get an activity on the websocket for that content item
                                            RestAPI.Content.updateContent(mrvisser.restContext, googleLink.id, {'displayName': 'Google woo'}, function(err) {
                                                assert.ok(!err);

                                                // Route and deliver activities
                                                ActivityTestUtil.collectAndGetActivityStream(mrvisser.restContext, null, null, function(err) {
                                                    assert.ok(!err);

                                                    client.close();
                                                    client.on('close', callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that multiple clients can listen on the same feed
         */
        it('verify multiple clients on same feed', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                var mrvisser = _.values(users)[0];

                RestAPI.User.getMe(mrvisser.restContext, function(err, mrvisserMeData) {
                    assert.ok(!err);

                    // Get 2 clients
                    var data = {
                        'authentication': {
                            'userId': mrvisserMeData.id,
                            'tenantAlias': mrvisserMeData.tenant.alias,
                            'signature': mrvisserMeData.signature
                        },
                        'streams': [
                            {
                                'resourceId': mrvisserMeData.id,
                                'streamType': 'activity',
                                'token': mrvisserMeData.signature
                            },
                            {
                                'resourceId': mrvisserMeData.id,
                                'streamType': 'notification',
                                'token': mrvisserMeData.signature
                            }
                        ]
                    };
                    ActivityTestUtil.collectAndGetActivityStream(mrvisser.restContext, null, null, function(err) {
                        assert.ok(!err);

                        // Setup the clients. We need to clone the data as the utility manipulates it in-place
                        ActivityTestUtil.getFullySetupClient(clone(data), function(clientA) {
                            ActivityTestUtil.getFullySetupClient(clone(data), function(clientB) {

                                var clientAReceived = false;
                                var clientBReceived = false;
                                var bothReceived = function() {

                                    // If we close client B, only A should receive a message
                                    clientB.close();
                                    clientB.on('close', function() {
                                        var receivedMessage = false;
                                        var collectedActivies = false;

                                        clientA.once('message', function(message) {
                                            assert.ok(!message.error);

                                            receivedMessage = true;
                                            if (receivedMessage && collectedActivies) {
                                                clientA.close();
                                                clientA.on('close', callback);
                                            }
                                        });

                                        clientB.on('message', function() {
                                            assert.fail('The socket on client B has been closed, this socket should not receive any more messages');
                                        });

                                        // Do something that ends up in the `activity`  activitystream
                                        RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://www.yahoo.ca', [], [], function(err, yahooLink) {
                                            assert.ok(!err);

                                            // Route and deliver activities
                                            ActivityTestUtil.collectAndGetActivityStream(mrvisser.restContext, null, null, function(err) {
                                                assert.ok(!err);

                                                collectedActivies = true;
                                                if (receivedMessage && collectedActivies) {
                                                    clientA.close();
                                                    clientA.on('close', callback);
                                                }
                                            });
                                        });

                                    });
                                };

                                clientA.once('message', function(message) {
                                    assert.ok(!message.error);
                                    clientAReceived = true;
                                    if (clientAReceived && clientBReceived) {
                                        bothReceived();
                                    }

                                });
                                clientB.once('message', function(message) {
                                    assert.ok(!message.error);
                                    clientBReceived = true;
                                    if (clientAReceived && clientBReceived) {
                                        bothReceived();
                                    }
                                });

                                // Do something that ends up in the `activity`  activitystream
                                RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://www.yahoo.ca', [], [], function(err, yahooLink) {
                                    assert.ok(!err);

                                    // Route and deliver activities
                                    ActivityTestUtil.collectAndGetActivityStream(mrvisser.restContext, null, null, function(err) {
                                        assert.ok(!err);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
