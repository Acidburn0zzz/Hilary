/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');
var FacebookStrategy = require('passport-facebook').Strategy;
var TwitterStrategy = require('passport-twitter').Strategy;

var OAE = require('oae-util/lib/oae');

var AuthenticationAPI = require('./api');
var AuthenticationUtil = require('./util');


//////////////////
// Global admin //
//////////////////

//var localStrategy = new AuthenticationAPI.LocalStrategyWrapper(OAE.serverTenant);
//passport.use(localStrategy);

//OAE.globalAdminServer.post('/api/auth/login', passport.authenticate(localStrategy.name), function(req, res) {
    // This callback only gets called when we log in succesfully.
//    return res.send(200, req.user);
//});

//OAE.globalAdminServer.post('/api/auth/logout', function(req, res) {
//    req.logOut();
//    res.send(200, {'loggedout': 'true'});
//});

/////////////
// Tenants //
/////////////

// Attach the Authentication middleware to the tenant server
AuthenticationUtil.setupAuthMiddleware(OAE.tenantServer);

// All of the strategies run at some URL under /api/auth/*
// When a login fails, the user is redirected to / where he
// will than be shown a login page with all the installed strategies.


////////////////////
//  DIRECT LOGIN  //
////////////////////

//var localStrategy = new AuthenticationAPI.LocalStrategyWrapper(tenant);
//passport.use(localStrategy.name, localStrategy);

//OAE.tenantServer.post('/api/auth/login', passport.authenticate(localStrategy.name), function(req, res) {
    // This callback only gets called when we log in succesfully.
//    return res.send(200, req.user);
//});

//OAE.tenantServer.post('/api/auth/logout', function(req, res) {
//    req.logOut();
//    res.send(200, {'loggedout': 'true'});
//});




//////////////
//  GOOGLE  //
//////////////

//var googleCallbackWrapper = new AuthenticationAPI.GoogleCallbackWrapper(tenant);
//var googleStrategy = new AuthenticationAPI.GoogleStrategyWrapper(tenant, googleCallbackWrapper.callback);
//passport.use(googleStrategy);

// Redirect the user to Google for authentication.  When complete, Google
// will redirect the user back to the application at
// /api/auth/google/return
//OAE.tenantServer.get('/api/auth/google', passport.authenticate(googleStrategy.name));

// Google will redirect the user to this URL after authentication.  Finish
// the process by verifying the assertion.  If valid, the user will be
// logged in.  Otherwise, authentication has failed.
//OAE.tenantServer.get('/api/auth/google/callback',
//    passport.authenticate(googleStrategy.name, { 'successRedirect': '/',
//                                                 'failureRedirect': '/'  })
//);



///////////////
//  TWITTER  //
///////////////

//var twitterCallbackWrapper = new AuthenticationAPI.TwitterCallbackWrapper(tenant);
//var twitterStrategy = new TwitterStrategy({
//        'consumerKey': '8eET3GSaCVE5GVd5kZsw',
//        'consumerSecret': 'OIqx7h36fMWqc0Cb3tUI1jzp7bzCbE2F3zJ0Gladc',
//        'callbackURL': 'http://' + tenant.host + '/api/auth/twitter/callback'
//    }, twitterCallbackWrapper.callback
//);
//twitterStrategy.name = 'twitter-' + tenant.alias;

//passport.use(twitterStrategy);

// Redirect the user to Twitter for authentication.  When complete, Twitter
// will redirect the user back to the application at
// /api/auth/twitter/callback
//OAE.tenantServer.get('/api/auth/twitter', passport.authenticate(twitterStrategy.name));

// Twitter will redirect the user to this URL after approval.  Finish the
// authentication process by attempting to obtain an access token.  If
// access was granted, the user will be logged in.  Otherwise,
// authentication has failed.
//OAE.tenantServer.get('/api/auth/twitter/callback',
//    passport.authenticate(twitterStrategy.name, { 'successRedirect': '/',
//                                                  'failureRedirect': '/' })
//);



////////////////
//  FACEBOOK  //
////////////////

//var facebookCallbackWrapper = new AuthenticationAPI.FacebookCallbackWrapper(tenant);
//var facebookStrategy = new FacebookStrategy({
//        'clientID': '194758077323671',
//        'clientSecret': '663d14e7f9ad0baeb4e43390825a659f',
//        'callbackURL': 'http://' + tenant.host + '/api/auth/facebook/callback'
//    },
//    facebookCallbackWrapper.callback
//);

//facebookStrategy.name = 'facebook-' + tenant.alias;

//passport.use(facebookStrategy);

// Redirect the user to Facebook for authentication.  When complete,
// Facebook will redirect the user back to the application at
// /api/auth/facebook/callback
//OAE.tenantServer.get('/api/auth/facebook', passport.authenticate(facebookStrategy.name));

// Facebook will redirect the user to this URL after approval.  Finish the
// authentication process by attempting to obtain an access token.  If
// access was granted, the user will be logged in.  Otherwise,
// authentication has failed.
//OAE.tenantServer.get('/api/auth/facebook/callback',
//    passport.authenticate(facebookStrategy.name, { 'successRedirect': '/',
//                                                   'failureRedirect': '/' })
//);

