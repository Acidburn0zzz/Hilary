/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');

var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var OAE = require('oae-util/lib/oae');
var TenantsUtil = require('oae-tenants/lib/util');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

var CasStrategy = require('./strategy');

module.exports = function() {
	var strategy = {};

    /**
     * Whether or not this strategy should be abled for a tenant.
     *
     * @param  {String}     tenantAlias     The alias of the tenant for which we should check if the strategy needs to be enabled.
     * @return {Boolean}                    `true` if the strategy should be enabled, `false` otherwise.
     */
    strategy.shouldBeEnabled = function(tenantAlias) {
        return AuthenticationConfig.getValue(tenantAlias, AuthenticationConstants.providers.CAS, 'enabled');
    };

    /**
     * Get the Passport Strategy.
     *
     * @param  {Tenant}     tenant  The tenant for which to return the Passport strategy.
     * @return {Strategy}           A passport strategy.
     */
    strategy.getPassportStrategy = function(tenant) {
        // We fetch the config values *in* the getPassportStrategy so it can be re-configured at run-time.
        var casHost = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'host');
        var basePath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'basepath');
        var loginPath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'loginpath');
        var logoutPath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'logoutpath');
        var validatePath = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.CAS, 'validatepath');

        var serverBase = TenantsUtil.getBaseUrl(tenant);

        var passportStrategy = new CasStrategy({
            'serverBase': serverBase,
            'allow': '',
            'service': serverBase + '/api/auth/cas/callback',
            'casHost': casHost,
            'casBasePath': basePath,
            'loginPath': loginPath,
            'logoutPath': logoutPath,
            'validatePath': validatePath,
            'appLogoutPath': '/api/auth/logout'
        }, function(id, done) {

            log().trace({
                'tenant': tenant,
                'id': id
            }, 'Received CAS authentication callback.');

            var username = id;
            var displayName = id;
            var opts = {};

            var context = new Context(tenant, null);
            AuthenticationAPI.getOrCreateUser(context, AuthenticationConstants.providers.CAS, username, displayName, opts, done);
        });
        return passportStrategy;
    };

    // Register our strategy.
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.CAS, strategy);
};
