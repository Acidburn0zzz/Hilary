/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('oae-util/lib/cassandra');
var ConfigAPI = require('oae-config');
var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var Redis = require('oae-util/lib/redis');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConfig = ConfigAPI.config('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');

var ShibbolethAPI = require('./api');
var ShibbolethStrategy = require('./strategy');

module.exports = function(config) {

    // Refresh the shibboleth configuration
    ShibbolethAPI.refreshConfiguration(config);


    // Build up the OAE strategy
    var strategy = {};

    /**
     * @see oae-authentication/lib/strategy#shouldBeEnabled
     */
    strategy.shouldBeEnabled = ShibbolethAPI.isEnabled;

    /**
     * @see oae-authentication/lib/strategy#getPassportStrategy
     */
    strategy.getPassportStrategy = function(tenant) {
        // We fetch the config values *in* the getPassportStrategy so it can be re-configured at run-time

        // The entity ID of the Shibboleth IdP we're using (if any)
        var idpEntityID = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'idpEntityID');

        // Attribute mappings
        var mapDisplayName = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'mapDisplayName');
        var mapEmail = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'mapEmail');
        var mapLocale = AuthenticationConfig.getValue(tenant.alias, AuthenticationConstants.providers.SHIBBOLETH, 'mapLocale');

        var passportStrategy = new ShibbolethStrategy({
            'idpEntityID': idpEntityID
        }, function(headers, callback) {

            log().trace({
                'tenant': tenant,
                'headers': headers
            }, 'Received Shibboleth authentication callback');

            // The `remote_user` header is configured in shib to identify this user. We simply re-use it.
            var externalId = headers['remote_user'];
            if (!externalId) {
                log().error({'headers': headers, 'tenant': tenant}, 'The `remote_user` attribute was empty. This indicates a misconfiguration of the Shibboleth SP software');
                return callback({'code': 500, 'msg': 'Shibboleth has been misconfigured'});
            }

            /*
             * There are a lot of SAML attributes that may indicate a user's display name. The administrator
             * should provide a suitable mapping to construct the displayname. If no suitable value was returned
             * from the mapping, we fall back to the `remote_user` attribute, as this is always provided
             */
            var displayName = AuthenticationUtil.renderTemplate(mapDisplayName, headers) || headers['remote_user'];

            // Set the optional profile parameters
            var opts = {};
            AuthenticationUtil.setProfileParameter(opts, 'email', mapEmail, headers);
            AuthenticationUtil.setProfileParameter(opts, 'locale', mapLocale, headers);

            var context = new Context(tenant, null);
            AuthenticationAPI.getOrCreateUser(context, AuthenticationConstants.providers.SHIBBOLETH, externalId, null, displayName, opts, function(err, user, created, loginId) {
                if (err) {
                    return callback(err);

                // If the user account already exists, the information will have been persisted already, there is no need to do it again
                } else if (!created) {
                    return callback(null, user);
                }


                // Remove unneeded headers as we need to serialize it
                delete headers['x-real-ip'];
                delete headers['x-forwarded-for'];
                delete headers['host'];
                delete headers['x-nginx-proxy'];
                delete headers['cache-control'];
                delete headers['x-cache-control'];
                delete headers['accept'];
                delete headers['user-agent'];
                delete headers['referer'];
                delete headers['accept-encoding'];
                delete headers['accept-language'];
                delete headers['cookie'];
                delete headers['x-forwarded-host'];
                delete headers['x-forwarded-server'];

                // We store extra information as it might be useful later on
                var metadata = {
                    /*
                     * The Shib persistent ID is a triple of:
                     *    * The IdP's entity ID
                     *    * The SP's entity ID
                     *    * A randomly generated ID identifying the user
                     *  e.g.: https://idp.testshib.org/idp/shibboleth!https://shib-sp.oae-performance.oaeproject.org/shibboleth!wjsKmFPZ7Kjml9HqD0Dbio5vzVo=
                     *
                     * This ID can be used with the IdP to retrieve profile attributes of the user or to check if that user
                     * is still part of the organization. We store it, so we can use it later on.
                     * More information can be found at https://wiki.shibboleth.net/confluence/display/SHIB2/IdPPersistentNameIdentifier
                     */
                    'persistentId': headers['persistent-id'],

                    // The entity ID of the IdP that we should authenticate with
                    'identityProvider': headers['shib-identity-provider'],

                    // Possible affiliation information might be useful
                    'affiliation': headers['affiliation'],
                    'unscopedAffiliation': headers['unscoped-affiliation'],

                    // Persist all the attributes as a stringified JSON object
                    'allAttributes': JSON.stringify(headers)
                };
                var q = Cassandra.constructUpsertCQL('ShibbolethMetadata', 'loginId', loginId, metadata);
                if (!q) {
                    log().error({
                        'loginId': loginId,
                        'metadata': metadata,
                        'headers': headers,
                        'user': user
                    }, 'Unable to construct a Shibboleth metadata query');
                    return callback({'code': 500, 'msg': 'Unable to store Shibboleth metadata'});
                }
                Cassandra.runQuery(q.query, q.parameters, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    return callback(null, user);
                });
            });
        });
        return passportStrategy;
    };

    // Register our strategy
    AuthenticationAPI.registerStrategy(AuthenticationConstants.providers.SHIBBOLETH, strategy);
};
