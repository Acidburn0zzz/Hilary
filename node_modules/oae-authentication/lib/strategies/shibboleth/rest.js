/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');
var util = require('util');

var log = require('oae-logger').logger('shibboleth');
var OAE = require('oae-util/lib/oae');

var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthenticationUtil = require('oae-authentication/lib/util');
var ShibbolethAPI = require('./api');

/**
 * @REST tenantAuthShibboleth
 *
 * Log in using Shibboleth authentication
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /auth/shibboleth
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/auth/shibboleth', function(req, res, next) {
    if (!ShibbolethAPI.isEnabled(req.tenant.alias)) {
        return res.redirect('/?authentication=disabled');
    }

    // Get the URL to which the user should be redirected and store it in a cookie,
    // so we can retrieve it once the user returns from the identity provider
    var redirectUrl = AuthenticationUtil.validateRedirectUrl(req.param('redirectUrl'));
    res.cookie('redirectUrl', redirectUrl);

    // Redirect the user to our SP host
    var serviceProviderUrl = ShibbolethAPI.getServiceProviderUrl(req.ctx);
    res.redirect(serviceProviderUrl);
});

/**
 * @REST spAuthShibboleth
 *
 * Forwards to the user to the configured identity provider
 *
 * @Api         private
 * @Server      tenant
 * @Method      POST
 * @Path        /auth/shibboleth/sp
 * @QueryParam  {string}                [tenantAlias]         The alias of the tenant on which the user wants to authenticate sign on
 * @QueryParam  {string}                [signature]           The signature for the tenant alias
 * @QueryParam  {number}                [expires]             The time in ms since epoch when the signature expires
 * @Return      {void}
 */
OAE.tenantRouter.on('get', '/api/auth/shibboleth/sp', function(req, res, next) {
    var tenantAlias = req.query.tenantAlias;
    var signature = req.query.signature;
    var expires = req.query.expires;

    // Validate the parameters
    ShibbolethAPI.validateInitiateParameters(tenantAlias, signature, expires, function(err, tenant) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Store a cookie so we know where the user came from
        res.cookie('shibboleth', tenantAlias);

        // Get the ID under which we registered this strategy for this tenant
        var strategyId = AuthenticationUtil.getStrategyId(tenant, AuthenticationConstants.providers.SHIBBOLETH);

        // Perform the initial authentication step
        AuthenticationUtil.handleExternalSetup(strategyId, null, req, res, next);
    });
});

/*!
 * The user comes back from the IdP and lands on our service provider endpoint.
 * If authentication was succesful, he will be redirected to his tenant at
 * /api/auth/shibboleth/callback. This endpoint is NOT accessible from the outside world
 */

/**
 * @REST spShibbolethCallback
 *
 * When returning from the shib IdP, creates the user in the system and redirects back to the tenant
 *
 * @Api         private
 * @Server      tenant
 * @Method      GET
 * @Path        /auth/shibboleth/sp/callback
 * @QueryParam  {string}                [userId]            The id of the user that needs to be signed in
 * @QueryParam  {string}                [signature]         The signature for the user id
 * @QueryParam  {number}                [expires]           The time in ms since epoch when the signature expires
 * @Return      {void}
 */
OAE.tenantRouter.on('get', '/api/auth/shibboleth/sp/callback', function(req, res, next) {
    // Get the alias of the tenant where this user is coming from
    var tenantAlias = req.cookies.shibboleth;

    // This cookie serves no further purpose, remove it
    res.clearCookie('shibboleth');

    // Get the full tenant object so we can construct a full URL later on
    ShibbolethAPI.getShibbolethEnabledTenant(tenantAlias, function(err, tenant) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // The base url for the tenant
        var tenantUrl = util.format('https://%s', tenant.host);
    
        // Get the Shibboleth strategy
        var strategyId = AuthenticationUtil.getStrategyId(tenant, AuthenticationConstants.providers.SHIBBOLETH);

        // Validate and authenticate the request
        passport.authenticate(strategyId, {}, function(err, user, challenges, status) {
            if (err) {
                log().error({'err': err, 'tenantAlias': tenantAlias}, 'Error during Shibboleth authentication');
                return res.redirect(tenantUrl + '/?authentication=failed&reason=error');
            } else if (!user) {
                // The user's credentials didn't check out. This would rarely occur in a
                // normal situation as external auth providers don't usually redirect with
                // bad parameters in the request, so somebody is probably tampering with it.
                // We bail out immediately
                log().warn({'challenges': challenges, 'status': status}, 'Possible tampering of external callback request detected');
                return res.redirect(tenantUrl + '/?authentication=failed&reason=tampering');
            }

            // The user's authentication credentials are correct and the user was created in
            // the database. Send the user back to their own tenant and pass along their user id
            var redirectUrl = ShibbolethAPI.getAuthenticatedUserRedirectUrl(tenant, user);
            res.redirect(redirectUrl);
        })(req, res);
    });
});

/**
 * @REST tenantAuthShibbolethCallback
 *
 * After succesfull login, our service provider redirects the user to this endpoint
 * which sits on the tenant that the user is authenticating in
 *
 * @Api         private
 * @Server      tenant
 * @Method      GET
 * @Path        /auth/shibboleth/callback
 * @QueryParam  {string}                [userId]            The id of the user that needs to be signed in
 * @QueryParam  {string}                [signature]         The signature for the user id
 * @QueryParam  {number}                [expires]           The time in ms since epoch when the signature expires
 * @Return      {void}
 */
OAE.tenantRouter.on('get', '/api/auth/shibboleth/callback', function(req, res, next) {
    if (!ShibbolethAPI.isEnabled(req.tenant.alias)) {
        return res.redirect('/?authentication=disabled');
    }

    // Get the user from the database
    var userId = req.query.userId;
    var signature = req.query.signature;
    var expires = req.query.expires;
    ShibbolethAPI.getUser(req.tenant, userId, signature, expires, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // The user's authentication credentials are correct
        // Log a message, as he logged in with an external strategy
        var strategyId = AuthenticationUtil.getStrategyId(req.tenant, AuthenticationConstants.providers.SHIBBOLETH);
        var authInfo = {
            'user': user,
            'strategyId': strategyId
        };
        AuthenticationUtil.logAuthenticationSuccess(req, authInfo, strategyId);

        // Create a session for this user
        req.logIn(authInfo, function(err) {
            if (err) {
                return res.send(500, 'Failed to log you in');
            }

            // Get the URL to which the user should be redirected
            var redirectUrl = AuthenticationUtil.validateRedirectUrl(req.cookies.redirectUrl);

            // This cookie serves no further purpose, remove it
            res.clearCookie('redirectUrl');

            // The user now has a session within Express. We can now safely
            // redirect the user into the system
            return res.redirect(redirectUrl);
        });
    });
});
