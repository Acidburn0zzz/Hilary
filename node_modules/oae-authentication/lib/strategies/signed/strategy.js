/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var passport = require('passport');
var util = require('util');

var Context = require('oae-context').Context;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var Signature = require('oae-util/lib/signature');
var Validator = require('oae-util/lib/validator').Validator;
var AuthenticationUtil = require('oae-authentication/lib/util');

var Strategy = function() {
    passport.Strategy.call(this);
    this.name = 'signed';
};

/**
 * Inherit from `passport.Strategy`
 */
util.inherits(Strategy, passport.Strategy);


/**
 * Authenticate request based on the contents of request parameters
 *
 * @param  {Request}    req     The Express Request object that is trying to authenticate
 * @api protected
 */
Strategy.prototype.authenticate = function(req) {
    var self = this;

    // Verify and extract the signed body from the request
    AuthenticationUtil.verifySignedAuthenticationBody(req.ctx, req.body, function(err, userId, becomeUserId) {
        if (err) {
            return self.fail(err.msg, err.code);
        }

        // This is a valid request, get the user and pass it on
        PrincipalsDAO.getPrincipal(userId, function(err, user) {
            if (err && err.code !== 404) {
                // Ensure there wasn't un unexpected error fetching the user
                return self.error(new Error(err.msg));
            } else if (err && err.code === 404) {
                // Ensure the authenticating user exists
                return self.fail(err.msg, 404);
            } else if (!becomeUserId) {
                // If the user is not trying to impersonate someone else, we can
                // simply authenticate normally as this user
                AuthenticationUtil.logAuthenticationSuccess(req, user, self.name);
                return self.success({'user': user});
            }

            // If we get here we are trying to become someone, fetch that person
            // and perform the appropriate permission checks
            PrincipalsDAO.getPrincipal(becomeUserId, function(err, becomeUser) {
                if (err && err.code !== 404) {
                    // Ensure there wasn't un unexpected error fetching the target user
                    return self.error(new Error(err.msg));
                } else if (err && err.code === 404) {
                    // Ensure the impersonated user exists
                    return self.fail(err.msg, 404);
                } else if (!user.isAdmin(becomeUser.tenant.alias)) {
                    // Ensure the authenticated user (impersonator) has the required access to become this user
                    return self.fail('You are not authorized to become the target user', 401);
                }

                // TODO: Log the fact that we've sudoed as well
                AuthenticationUtil.logAuthenticationSuccess(req, user, self.name);
                return self.success({'user': becomeUser, 'imposter': user});
            });
        });
    });
};

/**
 * Expose `Strategy`
 */
module.exports = Strategy;
