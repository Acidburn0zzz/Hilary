/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var passport = require('passport');
var util = require('util');

var Context = require('oae-context').Context;
var log = require('oae-logger').logger('oae-authentication');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var Signature = require('oae-util/lib/signature');
var TenantsAPI = require('oae-tenants');
var TenantsUtil = require('oae-tenants/lib/util');
var Validator = require('oae-authz/lib/validator').Validator;

var TIME_1_MINUTE_IN_SECONDS = 60;

/**
 * Setup the necessary authentication middleware
 *
 * @param  {express} server     An express server
 */
var setupAuthMiddleware  = module.exports.setupAuthMiddleware = function(server) {
    // Configure passport.
    server.use(passport.initialize());
    server.use(passport.session());
};

/**
 * Checks whether a provided plain-text password matches a stored hashed password
 *
 * @param  {String}     plainTextPassword   The plain-text password provided by the user
 * @param  {String}     hashedPassword      The hashed password stored for the user
 * @return {Boolean}                        True if the provided password matches the stored hashed password, false if they are different
 */
var hashAndComparePassword = module.exports.hashAndComparePassword = function(plainTextPassword, hashedPassword) {
    // Get the salt of the hashed password
    var salt = hashedPassword.split('$')[0];
    // Check if the provided password with the extracted salt is the same as the stored password
    return hashPassword(plainTextPassword, salt) === hashedPassword;
};

/**
 * Hashes a string using SHA512
 *
 * @param  {String}     password        The passwords that needs to be hashed
 * @param  {String}     salt            A random salt that will be prepended to the password for hashing (optional)
 * @return {String}                     The hashed password
 */
var hashPassword = module.exports.hashPassword = function(password, salt) {
    // Prepend a random number to prevent rainbow table attacks
    salt = salt || crypto.randomBytes(16).toString('hex');
    password = salt + password;
    return salt + '$' + crypto.createHash('sha512').update(password).digest('hex');
};

/**
 * Get the ID of the authentication strategy for the given tenant
 *
 * @param  {Tenant}     tenant          The tenant for which to create the strategy id
 * @param  {String}     strategyName    The name of the strategy
 * @return {String}                     The unique ID of the strategy for the tenant
 */
var getStrategyId = module.exports.getStrategyId = function(tenant, strategyName) {
    return util.format('%s-%s', tenant.alias, strategyName);
};

/**
 * Outputs a log message for a successful authentication
 *
 * @param  {Request}   req           The request the user used to login
 * @param  {User}      user          The user that was logged in
 * @param  {String}    strategy      The name of the strategy used for authn
 */
var logAuthenticationSuccess = module.exports.logAuthenticationSuccess = function(req, user, strategy) {
    var tenantAlias = req.tenant.alias;
    log().info({
        'login': user.id,
        'headers': req.headers,
        'tenantAdmin': user.isTenantAdmin(tenantAlias),
        'globalAdmin': user.isGlobalAdmin(),
        'tenantAlias': tenantAlias,
        'strategy': strategy
    }, 'Login for ' + user.id + ' to tenant ' + tenantAlias + ' from ' + req.headers['x-forwarded-for']);
};

/**
 * A catch-all error handler for errors that bubbled out of passport strategies.
 *
 * @param  {Request}    req     The ExpressJS request object
 * @param  {Response}   res     The ExpressJS response object
 * @param  {Function}   next    The middleware which should be executed next
 * @return {Function}           A function that can be used as part of the middleware chain
 */
var handlePassportError = module.exports.handlePassportError = function(req, res, next) {
    return function(err) {
        if (err) {
            if (err.message && err.message.indexOf('Unknown authentication strategy') === 0) {
                log().warn({'host': req.host}, 'Authentication attempt with disabled strategy');
                return res.redirect('/?authentication=disabled');
            } else {
                log().error({'err': err, 'host': req.host}, 'An error occurred during login');
                return res.redirect('/?authentication=error');
            }
        }

        // If no error ocurred we can move to the next middleware
        return next();
    };
};

/**
 * Authenticate the user with the passed in strategyId.
 * This will also take care of setting up the correct redirect behaviour once the user returns
 * to the application by setting a cookie called `redirectUrl` with the URL the client should be redirect to.
 *
 * @param  {String}     strategyId          The ID that should be used to authenticate the user with. This is the string as returned by `getStrategyId`
 * @param  {Object}     [passportOptions]   Any options that should be passed onto the strategy
 * @param  {Request}    req                 The ExpressJS request object
 * @param  {Response}   res                 The ExpressJS response object
 * @param  {Function}   next                The next middleware that should be executed
 */
var handleExternalSetup = module.exports.handleExternalSetup = function(strategyId, passportOptions, req, res, next) {
    // Get the generic error handler
    var errorHandler = handlePassportError(req, res, next);

    // Get the URL to which the user should be redirected and store it in a cookie,
    // so we can retrieve it once the user returns from the external authentication source
    var redirectUrl = validateRedirectUrl(req.param('redirectUrl'));
    res.cookie('redirectUrl', redirectUrl);

    // Initiate the authentication process
    passport.authenticate(strategyId, passportOptions)(req, res, errorHandler);
};

/**
 * Validate a URL that should be used to redirect the user within OAE after authentication.
 * If no URL is provided or the URL is invalid, `/me` will be returned.
 * Only a path within OAE is considered to be a valid redirect URL.
 *
 * @param  {String}     [redirectUrl]   The URL that should be tested
 * @return {String}                     A valid URL
 */
var validateRedirectUrl = module.exports.validateRedirectUrl = function(redirectUrl) {
    redirectUrl = redirectUrl || '/me';

    // Ensure that we're dealing with an OAE url so that we're not sending the user to a remote site
    if (redirectUrl.charAt(0) !== '/') {
        redirectUrl = '/me';
        log().warn({'redirectUrl': redirectUrl}, 'Possible Open Redirect attack detected');
    }

    return redirectUrl;
};

/**
 * Handles a callback request for an external authentication strategy.
 * This will take care of authenticating the user into the system, logging
 * a proper statement and redirecting the user to the correct page.
 *
 * @param  {String}     strategyId      The ID of the strategy that should be used to authenticate the user. This is the string as returned by `getStrategyId`
 * @param  {Request}    req             The ExpressJS request object
 * @param  {Response}   res             The ExpressJS response object
 * @param  {Function}   next            The next middleware that should be executed
 */
var handleExternalCallback = module.exports.handleExternalCallback = function(strategyId, req, res, next) {
    // Get the generic error handler
    var errorHandler = handlePassportError(req, res, next);

    // Get the URL to which the user should be redirected
    var redirectUrl = validateRedirectUrl(req.cookies.redirectUrl);

    // This cookie serves no further purpose, remove it
    res.clearCookie('redirectUrl');

    // Authenticate this request with Passport. Because we specify a callback function
    // we will need to manually log the user in the system
    passport.authenticate(strategyId, {}, function(err, user, challenges, status) {
        if (err) {
            return errorHandler(err);
        } else if (!user) {
            // The user's credentials didn't check out. This would rarely occur in a
            // normal situation as external auth providers don't usually redirect with
            // bad parameters in the request, so somebody is probably tampering with it.
            // We bail out immediately
            log().warn({'challenges': challenges, 'status': status}, 'Possible tampering of external callback request detected');
            return res.redirect('/?authentication=failed&reason=tampering');
        }

        // The user's authentication credentials are correct
        // Log a message, as he logged in with an external tenant
        logAuthenticationSuccess(req, user, strategyId);

        // Create a session for this user
        req.logIn({'user': user}, function(err) {
            if (err) {
                return errorHandler(err);
            }

            // The user now has a session within Express
            // We can now safely redirect the user into the system
            res.redirect(redirectUrl);
        });
    })(req, res, errorHandler);
};

/**
 * Constructs the callback URL for a given strategy by doing a look-up whether or not the tenant is using https.
 * ex: Suppose the passed in tenant uses https and the passed in strategy is 'google', the returned url will be:
 *     https://<tenant host>/api/auth/google/callback
 *
 * @param  {Tenant} tenant      The tenant object
 * @param  {String} strategy    The strategy for this callback url
 * @return {String}             An authentication callback url
 */
var constructCallbackUrl = module.exports.constructCallbackUrl = function(tenant, strategy) {
    var baseUrl = TenantsUtil.getBaseUrl(tenant);
    return baseUrl + '/api/auth/' + strategy + '/callback';
};

/**
 * Create request information that a global administrator can use to authenticate as themself to a particular tenant.
 *
 * @param  {Context}    ctx                         The context of the request that is requesting the signed authentication URL
 * @param  {String}     tenantAlias                 The target tenant alias to which the global admin is trying to authenticate
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Object}     callback.requestInfo        The request info the global admin user can use to POST to a tenant and gain access as themself
 * @param  {String}     callback.requestInfo.url    The full URL to POST to (protocol, host and path) in order to invoke the signed auth request
 * @param  {Object}     callback.requestInfo.body   The signed body of the POST request to send in order to verify the authenticity of the authentication request
 */
var getSignedTenantAuthenticationRequest = module.exports.getSignedTenantAuthenticationRequest = function(ctx, tenantAlias, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only global administrators are allowed to authenticate to other tenants'}).isGlobalAdministratorUser(ctx);
    validator.check(tenantAlias, {'code': 400, 'msg': 'Missing target tenant alias'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    } else if (ctx.imposter()) {
        return callback({'code': 401, 'msg': 'You cannot create a signed authentication token to a tenant while impostering another user'});
    }

    var targetTenant = TenantsAPI.getTenant(tenantAlias);
    if (!targetTenant) {
        return callback({'code': 404, 'msg': util.format('There is no tenant with alias "%s"', tenantAlias)});
    }

    var data = {'tenantAlias': tenantAlias, 'userId': ctx.user().id};
    var signedData = Signature.createExpiringSignature(data, TIME_1_MINUTE_IN_SECONDS, TIME_1_MINUTE_IN_SECONDS);

    // Include the authenticating `userId` in the signed data. It isn't necessary to include the tenant alias in
    // the body, as we can assume that from the target context during the verification phase, so we omit it from
    // the signed data to avoid confusion
    signedData.userId = data.userId;

    return callback(null, {'url': _getSignedAuthenticationUrl(targetTenant), 'body': _.omit(signedData, 'tenantAlias')});
};

/**
 * Create request information that an administrator can use to authenticate themself as a different user.
 *
 * @param  {Context}    ctx                         The context of the request that is requesting to authenticate as a particular user
 * @param  {String}     becomeUserId                The id of the user the administrator is requesting to become
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Object}     callback.requestInfo        The request info that the administrator can use to POST to a tenant and gain access as the `becomeUserId`
 * @param  {String}     callback.requestInfo.url    The full URL to POST to (protocol, host and path) in order to invoke the signed auth request
 * @param  {Object}     callback.requestInfo.body   The signed body of the POST request to send in order to verify the authenticity of the authentication request
 */
var getSignedBecomeUserAuthenticationRequest = module.exports.getSignedBecomeUserAuthenticationRequest = function(ctx, becomeUserId, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Must be authenticated in order to become another user'}).isLoggedInUser(ctx);
    validator.check(becomeUserId, {'code': 400, 'msg': 'Must specific a valid user id of a user to become (becomeUserId)'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    } else if (!ctx.user().isAdmin(ctx.user().tenant.alias)) {
        // Only users who have an admin status can become someone. This check is redundant to
        // the check that verifies the current user is an admin of the target user's tenant,
        // however this can be done before we go to the database
        return callback({'code': 401, 'msg': 'Only administrators can become a user'});
    } else if (ctx.imposter()) {
        // If the session is already impostering someone, they cannot imposter someone else.
        // For example: Global admin imposters a tenant administrator, then further imposters
        // another user. In this scenario, you would lose the information that global admin
        // was impostering the tenant admin
        return callback({'code': 401, 'msg': 'You cannot become a user while impostering another user'});
    }

    // Ensure the user exists and that the current user can become that user
    PrincipalsDAO.getPrincipal(becomeUserId, function(err, becomeUser) {
        if (err) {
            return callback(err);
        } else if (!ctx.user().isAdmin(becomeUser.tenant.alias)) {
            // The current user must be an admin of the target user's tenant in order to become them
            return callback({'code': 401, 'msg': 'You are not authorized to become this user'});
        } else if (becomeUser.isAdmin(becomeUser.tenant.alias) && !ctx.user().isGlobalAdmin()) {
            // If the target user is a tenant admin, only the global admin can become them
            return callback({'code': 401, 'msg': 'Only global administrators can become other administrators'});
        }

        // Authorization and validation is all successful. Create the signature
        var targetTenant = TenantsAPI.getTenant(becomeUser.tenant.alias);
        var data = {'tenantAlias': targetTenant.alias, 'userId': ctx.user().id, 'becomeUserId': becomeUserId};
        var signedData = Signature.createExpiringSignature(data, TIME_1_MINUTE_IN_SECONDS, TIME_1_MINUTE_IN_SECONDS);

        // Include the authenticating `userId` and target `becomeUserId` in the signed data. It isn't necessary to
        // include the tenant alias in the body, as we can assume that from the target context during the verification
        // phase, so we omit it from the signed data to avoid confusion
        signedData.userId = data.userId;
        signedData.becomeUserId = data.becomeUserId;

        return callback(null, {'url': _getSignedAuthenticationUrl(targetTenant), 'body': signedData});
    });
};

/**
 * Verify the authenticity of a signed authentication request
 *
 * @param  {Context}    ctx                         The context of the request performing the signed authentication
 * @param  {Object}     body                        The POST data that was sent with the request
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {String}     callback.userId             The id of the user who is performing the authentication (also thought of as "the user who was granted the authentication signature")
 * @param  {String}     [callback.becomeUserId]     The id of the user who the authenticating user should become, if any
 */
var verifySignedAuthenticationBody = module.exports.verifySignedAuthenticationBody = function(ctx, body, callback) {
    var validator = new Validator();
    validator.check(body.userId, {'code': 400, 'msg': 'Invalid user id provided as the authenticating user'}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Verify all the signed data in the request body, except the `signature` and `expires` parameters which are
    // not part of the signed data object. Include the tenant alias to ensure that the signature is being used
    // at the expected target tenant
    var data = _.chain({})
        .extend(body, {'tenantAlias': ctx.tenant().alias})
        .omit('signature', 'expires')
        .value();

    // Verify the signature is authentic and not expired
    if (!Signature.verifyExpiringSignature(data, body.expires, body.signature)) {
        return callback({'code': 401, 'msg': 'Invalid signature credentials'});
    }

    // This is a valid request, extract the data from it so the consumer doesn't have to understand the
    // anatomy of the signature object
    return callback(null, data.userId, data.becomeUserId);
};

/**
 * Get the signed authentication URI (protocol, host, port, path) for a given tenant
 *
 * @param  {Tenant}     tenant  The tenant for which to get the signed authentication URI
 * @return {String}             The signed authentication URI (e.g., "https://my.oaetenant.com:8443/api/auth/signed")
 */
var _getSignedAuthenticationUrl = function(tenant) {
    return util.format('%s/api/auth/signed', TenantsUtil.getBaseUrl(tenant));
};
