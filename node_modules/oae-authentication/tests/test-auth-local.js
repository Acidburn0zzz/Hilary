/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');

// TODO
//var PrincipalsAPI = require('oae-principals');
//var TenantApi = require('oae-tenants');
//var Tenant = require('oae-tenants/lib/model').Tenant;
//var Context = require('oae-context').Context;
//var TestAPI = require('oae-tests');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('Authentication', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used for anonymous requests on the georgia tech tenant
    var anonymousGtRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will create a user that will fill up the tenant admin rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the anonymous gt rest context
        anonymousGtRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.gt.baseUrl);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.getAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        callback();
    });


    describe('#local authentication', function() {

        /**
         * Test that verifies that users can log into the system using a local authorization strategy
         */
        it('verify local authentication', function(callback) {
            // Create a test user
            var userId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, createdUser) {
                assert.ok(!err);
                assert.ok(createdUser);
                var userRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password');

                // Log in with the wrong password
                RestAPI.Authentication.login(anonymousCamRestContext, userId, 'wrong-password', function(err) {
                    assert.ok(err);

                    // Log in with the correct password
                    RestAPI.Authentication.login(anonymousCamRestContext, userId, 'password', function(err) {
                        assert.ok(!err);
                            
                        // Logout
                        RestAPI.Authentication.logout(userRestContext, function(err) {
                            assert.ok(!err);
                            callback();
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that loggin in with a non-existing user doesn't work
         */
        it('verify failed authentication', function(callback) {
            // Try to log in as an invalid user
            RestAPI.Authentication.login(anonymousCamRestContext, 'invalid-user', 'password', function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);
                
                // Try to log in as a non-existing user
                RestAPI.Authentication.login(anonymousCamRestContext, 'u:cam:non-existing-user', 'password', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    callback();
                });
            });
        });
    
        /**
         * Test that verifies that logging in is properly separated by tenant
         */
        it('verify tenant login separation', function(callback) {
            // Create a test user
            var userId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, createdUser) {
                assert.ok(!err);
                assert.ok(createdUser);
                var userRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password');

                // Verify that we cannot login on tenant B
                RestAPI.Authentication.login(anonymousGtRestContext, userId, 'password', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    
                    // Verify that we can login on tenant A
                    RestAPI.Authentication.login(anonymousCamRestContext, userId, 'password', function(err) {
                        assert.ok(!err);
                        callback();
                    });
                });
            });
        });

    });
    
    
    describe('#admin login', function() {
        
        /**
         * Test that verifies that a global administrator can successfully login on the global admin tenant
         */
        it('verify global administrator authentication', function(callback) {
            var globalAdminRestContext = TestsUtil.getAdminRestContext('http://localhost:2000');
            
            // Get the me feed, this should log in the global admin as well
            RestAPI.User.getMe(globalAdminRestContext, function(err, meObj) {
                assert.ok(!err);
                assert.ok(meObj);
                assert.equal(meObj.isGlobalAdmin, true);

                // Logout
                RestAPI.Authentication.logout(globalAdminRestContext, function(err) {
                    assert.ok(!err);
                    
                    // Verify that the global admin has been logged out
                    RestAPI.User.getMe(globalAdminRestContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.ok(meObj);
                        assert.equal(meObj.anon, true);

                        // Log the global admin back in so the cookie jar can be restored
                        RestAPI.Authentication.login(globalAdminRestContext, globalAdminRestContext.userId, globalAdminRestContext. userPassword, function(err) {
                            assert.ok(!err);
                            callback();
                        });
                    });
                });
            });
        });
        
    });

});
