/*
 * Copyright 2016 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var csv = require('csv');
var fs = require('fs');
var util = require('util');

var AuthzTestUtil = require('oae-authz/lib/test/util');
var Cassandra = require('oae-util/lib/cassandra');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var RestAPI = require('oae-rest');
var ShibbolethMigrator = require('../../../etc/migration/shibboleth_migration/migrateUsersToShibboleth.js');
var TestsUtil = require('oae-tests');

var csvStream = {};

describe('Shibboleth Migration', function() {
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

        // Set up the CSV file for errors
        var fileStream = fs.createWriteStream('shibboleth-migration-test.csv');
        fileStream.on('error', function(err) {
            log().error({'err': err}, 'Error occurred when writing to the warnings file');
            process.exit(1);
        });
        csvStream = csv.stringify({
            'columns': ['principal_id', 'email', 'display_name', 'login_id', 'message'],
            'header': true,
            'quoted': true
        });
        csvStream.pipe(fileStream);

        return callback();
    });

    /*!
     * Check that Shibboleth login ID records were created for all users with Google login
     * 
     * @param  String           tenantAlias         The tenant we are testing
     * @param  {Object[]}       users               The users we want to check login for
     * @param  {Function}       callback            Invoked when assertions are complete
     * @throws {AssertionError}                     Thrown if the assertions fail
     */
    var _assertShibbolethLoginIds = function(tenantAlias, users, callback) {
        if(_.isEmpty(users)) {
            return callback();
        }

        var user = users.shift();
        var shibLogin = util.format('%s:shibboleth:%s', tenantAlias, user.email);

        Cassandra.runQuery('SELECT "loginId" FROM "AuthenticationLoginId" WHERE "loginId" = ?', [shibLogin], function(err, rows) {
            assert.ok(!err);

            var result = _.chain(rows)
                .map(Cassandra.rowToHash)
                .pluck('loginId')
                .first()
                .value();

            assert.strictEqual(result, shibLogin);
            return _assertShibbolethLoginIds(tenantAlias, users, callback);
        });
    };

    /**
     * Test that verifies emails are made case insensitive
     */
    it('verify new Shibboleth logins are created', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 500, function(err, users) {
            assert.ok(!err);

            users = _.chain(users)
                .values()
                .pluck('user')
                .value();

            RestAPI.Tenants.getTenant(camAdminRestContext, null, function(err, tenant) {
                assert.ok(!err);
                var tenantAlias = tenant.alias;

                // Create Google logins for all users
                var googleLoginIds = _.map(users, function(user) {
                        return {
                            userId: user.id,
                            loginId: util.format('%s:google:%s', tenantAlias, user.email)
                        };
                    });

                var queries = _.chain(googleLoginIds)
                    .map(function(googleLoginId) {
                        var userId = googleLoginId.userId;
                        var loginId = googleLoginId.loginId;
                        return [
                            {
                                'query': 'INSERT INTO "AuthenticationUserLoginId" ("loginId", "userId", "value") VALUES (?, ?, ?)',
                                'parameters': [loginId, userId, '1']
                            },
                            {
                                'query': 'INSERT INTO "AuthenticationLoginId" ("loginId", "userId") VALUES (?, ?)',
                                'parameters': [loginId, userId]
                            }
                        ];
                    })
                    .flatten()
                    .value();

                Cassandra.runBatchQuery(queries, function(err) {
                    assert.ok(!err);

                    // Run the migration
                    ShibbolethMigrator.doMigration(tenantAlias, csvStream, function(err, errors) {
                        assert.ok(!err);

                        _assertShibbolethLoginIds(tenantAlias, users, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
