/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');

var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var LoginId = require('oae-authentication/lib/model').LoginId;

describe('Authentication', function() {

    // Rest context that can be used for anonymous requests on the tenant
    var anonymousTenantRestContext = null;
    // Rest context that can be used for anonymous requests on the global tenant
    var anonymousGlobalRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous global rest context
        anonymousGlobalRestContext = TestsUtil.createGlobalRestContext();
        // Fill up global admin rest context
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();

        // Create a new tenant.
        RestAPI.Tenant.createTenant(globalAdminRestContext, 'signedtest', 'Test for cross tenant authentication', 'localhost:2001', function(err, created) {
            anonymousTenantRestContext = TestsUtil.createTenantRestContext('localhost:2001');
            callback();
        });
    });


    describe('Signed authentication', function() {

        describe('Get token', function() {

            /*!
             * Verifies that you need to be logged in to generate a token.
             */
            it('verify anonymous users cannot generate a url', function(callback) {
                RestAPI.Authentication.loginOnTenant(anonymousGlobalRestContext, 'signedtest', function(err, restCtx) {
                    assert.equal(err.code, 401);
                    assert.ok(!restCtx);
                    callback();
                });
            });

            /*!
             * Verifies that no tokens are returned when a parameter is missing or invalid.
             */
            it('verify parameter validation', function(callback) {
                RestAPI.Authentication.getSignedToken(globalAdminRestContext, null, function(err, token) {
                    assert.equal(err.code, 400);
                    assert.ok(!token);
                    RestAPI.Authentication.getSignedToken(globalAdminRestContext, 'some non existing tenant alias', function(err, token) {
                        assert.equal(err.code, 404);
                        assert.ok(!token);
                        callback();
                    });
                });
            });
        });

        describe('Login', function() {

            /*!
             * Verifies that you can actually log in to a tenant.
             */
            it('verify login on tenant works', function(callback) {
                RestAPI.Authentication.loginOnTenant(globalAdminRestContext, 'signedtest', function(err, restCtx) {
                    assert.ok(!err);
                    RestAPI.User.getMe(restCtx, function(err, user) {
                        assert.ok(!err);
                        assert.ok(!user.anon);
                        assert.ok(user.isGlobalAdmin, 'The user should still be a global administrator');
                        callback();
                    });
                });
            });


            /*!
             * Tries to login to the signed authentication endpoint by using the provided parameters.
             * The response code will be checked.
             *
             * @param  {Number}   expires      When the signature expires.
             * @param  {String}   signature    The signature
             * @param  {String}   userId       The user to log on as.
             * @param  {Boolean}  isLoggedIn   Whether or not the user should be logged in.
             * @param  {Function} callback     Standard callback method
             * @api private
             */
            var performSignedTokenRequest = function(expires, signature, userId, isLoggedIn, callback) {
                var badToken = {
                    'expires': expires,
                    'signature': signature,
                    'userId': userId
                };
                RestAPI.Authentication.loginWithSignedToken(anonymousTenantRestContext, badToken, function(err) {
                    assert.ok(!err);
                    RestAPI.User.getMe(anonymousTenantRestContext, function(err, user) {
                        assert.ok(!err);
                        if (isLoggedIn) {
                            assert.ok(user.isGlobalAdmin);
                        } else {
                            assert.ok(user.anon);
                        }
                        callback();
                    });
                });
            };

            /*!
             * Verifies that the login request fails if one the parameters is missing.
             */
            it('verify parameter validation', function(callback) {
                performSignedTokenRequest(123, 'signsignsign', null, false, function() {
                    performSignedTokenRequest(123, null, 'u:admin:administrator', false, function() {
                        performSignedTokenRequest(null, 'signsignsign', 'u:admin:administrator', false, callback);
                    });
                });
            });
        });

    });
});
