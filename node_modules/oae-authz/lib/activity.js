/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var ResourceActions = require('oae-resource/lib/actions');
var ResourceConstants = require('oae-resource/lib/constants').ResourceConstants;
var TenantsAPI = require('oae-tenants');

var log = require('oae-logger').logger('oae-authz-activity');


//////////////////
// EMAIL ENTITY //
//////////////////

ActivityAPI.registerActivityEntityType('email', {
    'transformer': {
        'activitystreams': function(ctx, activityEntities, callback) {
            var currentUserId = (ctx.user() && ctx.user().id);
            var transformedEntities = _.mapObject(activityEntities, function(entities, activityId) {
                return _.mapObject(entities, function(entity) {
                    var email = entity.email.email;
                    var token = entity.email.token;
                    var tenant = TenantsAPI.getTenantByEmail(email);

                    var globalId = null;
                    var opts = {'ext': {}};

                    opts.ext[ActivityConstants.properties.OAE_TENANT] = tenant.compact();
                    if (currentUserId === entity[ActivityConstants.properties.OAE_ID]) {
                        // If the target user is the email address feed itself (i.e., the recipient
                        // of an email), we can keep the email address on the transformed entity
                        globalId = email;
                        opts.ext[ActivityConstants.properties.OAE_ID] = email;
                        opts.ext[ActivityConstants.properties.OAE_EMAIL] = email;
                        opts.ext[ActivityConstants.properties.OAE_TOKEN] = token;
                    }

                    return new ActivityModel.ActivityEntity('email', globalId, null, opts);
                });
            });

            return callback(null, transformedEntities);
        },
        'internal': function(ctx, activityEntities, callback) {
            var currentUserId = (ctx.user() && ctx.user().id);
            var transformedEntities = _.mapObject(activityEntities, function(entities, activityId) {
                return _.mapObject(entities, function(entity) {
                    var email = entity[ActivityConstants.properties.OAE_ID];
                    var tenant = TenantsAPI.getTenantByEmail(email);

                    var transformedEntity = {};
                    if (currentUserId === entity[ActivityConstants.properties.OAE_ID]) {
                        // If the target user is the email address feed itself (i.e., the recipient
                        // of an email), we can keep the email address on the transformed entity
                        _.extend(transformedEntity, {
                            'displayName': displayName,
                            'email': email
                        });
                    }

                    return transformedEntity;
                });
            });

            return callback(null, tarnsformedEntities);
        }
    },
    'propagation': function(associationsCtx, entity, callback) {
        // Anyone can see the email entity, however the
        return callback(null, [{'type': ActivityConstants.entityPropagation.ALL}]);
    }
});

ActivityAPI.registerActivityEntityAssociation('email', 'self', function(associationsCtx, entity, callback) {
    return callback(null, [entity[ActivityConstants.properties.OAE_ID]]);
});


/////////////////////
// INVITE ACTIVITY //
/////////////////////

ActivityAPI.registerActivityType(AuthzConstants.activity.ACTIVITY_INVITE, {
    'groupBy': [{'actor': true, 'object': true, 'target': 'objectType'}],
    'streams': {
        'email': {
            'router': {
                'object': ['self']
            }
        }
    }
});

ResourceActions.on(ResourceConstants.events.INVITED, function(ctx, invitations, emailTokens) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id, {'user': ctx.user()});
    _.chain(invitations)
        .map(function(invitation) {
            var email = invitation.email;
            var objectResource = new ActivityModel.ActivitySeedResource('email', invitation.email, {
                'email': {
                    'email': email,
                    'token': emailTokens[email]
                }
            });
            var targetResource = ActivityModel.ActivitySeedResource.fromResource(invitation.resource);
            return new ActivityModel.ActivitySeed(AuthzConstants.activity.ACTIVITY_INVITE, millis, ActivityConstants.verbs.INVITE, actorResource, objectResource, targetResource);
        })
        .each(function(activitySeed) {
            ActivityAPI.postActivity(ctx, activitySeed);
        })
        .value();
});


////////////////////////////////
// INVITATION ACCEPT ACTIVITY //
////////////////////////////////

ActivityAPI.registerActivityType(AuthzConstants.activity.ACTIVITY_INVITATION_ACCEPT, {
    'groupBy': [{'actor': true, 'object': true, 'target': 'objectType'}],
    'streams': {
        'activity': {
            'router': {
                'actor': ['self'],
                'object': ['self'],
                'target': ['managers']
            }
        },
        'notification': {
            'router': {
                'object': ['self']
            }
        },
        'email': {
            'router': {
                'object': ['self']
            }
        }
    }
});
