
var _ = require('underscore');
var Graph = require('data-structures').Graph;
var util = require('util');

/**
 * AuthzGraph inherits from the data-structures Graph and provides some additional data and function
 * sugar to perform common grahing operations. Particularly, making traversal possible.
 */
var AuthzGraph = module.exports = function() {
    Graph.call(this);
};
util.inherits(AuthzGraph, Graph);

/**
 * Determine if the graph is empty
 *
 * @return {Boolean}    Whether or not the graph has any nodes
 */
AuthzGraph.prototype.isEmpty = function() {
    return (this.nodeSize === 0);
};

/**
 * Convenience function to get all the nodes in the graph
 *
 * @return {Object[]}  All nodes in the graph
 */
AuthzGraph.prototype.getNodes = function() {
    var nodes = [];
    this.forEachNode(function(node) {
        nodes.push(node);
    });
    return nodes;
};

/**
 * Override the base Graph addNode function to include the `id` of the node. This will make it
 * easier to walk the graph
 *
 * @param  {String}     nodeId      The id of the node
 * @param  {Object}     [metadata]  Additional metadata to apply to the node. This is only applied if the node is new
 * @return {Object}                 The node object that was created. `null` if a node with the given
 *                                  id already existed
 */
AuthzGraph.prototype.addNode = function(nodeId, metadata) {
    var node = Graph.prototype.addNode.call(this, nodeId);
    if (node) {
        if (_.isObject(metadata)) {
            _.extend(node, metadata);
        }

        node.id = nodeId;
    }

    return node;
};

/**
 * Override the base Graph addEdge function to include the `from` and `to` nodes on the edge. This
 * will make it easier to walk the graph
 *
 * @param  {String}     fromId      The id of the source node of the edge
 * @param  {String}     toId        The id of the destination node of the edge
 * @param  {Object}     [metadata]  Additional metadata to apply to the edge. This is only applied if the edge is new
 * @return {Object}                 The edge object if an edge was created. `null` if this edge already
 *                                  existed
 */
AuthzGraph.prototype.addEdge = function(fromId, toId, metadata) {
    var edge = Graph.prototype.addEdge.call(this, fromId, toId);
    if (edge) {
        if (_.isObject(metadata)) {
            _.extend(edge, metadata);
        }

        edge.from = this.getNode(fromId);
        edge.to = this.getNode(toId);
    }

    return edge;
};

/**
 * Iterate over the nodes in the graph by their inbound edges
 *
 * @param  {String}     nodeId              The id of the node to start with. This node id will also
 *                                          be the last id returned to the `traverseCallback`
 * @param  {Function}   traverseCallback    Invoked for every node traversed over in the inbound
 *                                          edge search
 */
AuthzGraph.prototype.traverseInbound = function(nodeId, traverseCallback, _visited) {
    if (_visited[nodeId]) {
        return;
    } else {
        // Mark that we've now visited this node
        _visited[nodeId] = true;
    }

    var edges = this.getInEdgesOf(nodeId);

    // For each edge, recursively iterate over their "from" node
    _.each(edges, function(edge) {
        inboundForEach(edge.from.id, traverseCallback, _visited);
    });

    // Finally invoke the callback with the current node
    traverseCallback(nodeId);
};

module.exports = AuthzGraph;
