/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Validator = require('oae-authz/lib/validator').Validator;

var AuthzInvitationsDAO = require('oae-authz/lib/invitations/dao');

var getAllInvitationsByResourceId = module.exports.getAllInvitationsByResourceId = function(resourceId, callback) {
    var validator = new Validator();
    validator.check(resourceId, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isResourceId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    AuthzInvitationsDAO.getAllInvitationsByResourceId(resourceId, callback);
};

var getAllInvitationsByEmail = module.exports.getAllInvitationsByEmail = function(email, callback) {
    var validator = new Validator();
    validator.check(email, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isEmail();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    AuthzInvitationsDAO.getAllInvitationsByEmail(email, callback);
};

var createInvitations = module.exports.createInvitations = function(resourceId, emailRoles, inviterUserId, callback) {
    var validator = new Validator();
    validator.check(resourceId, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isResourceId();
    _.each(emailRoles, function(role, email) {
        validator.check(email, {'code': 400, 'msg': 'A valid email must be supplied to invite'}).isEmail();
        validator.check(role, {'code': 400, 'msg': 'A valid role must be supplied to give the invited user'}).isValidRole();
    });
    validator.check(inviterUserId, {'code': 400, 'msg': util.format('Specified inviter id "%s" must be a valid user id')}).isUserId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Generate a random token for this invitation
    AuthzInvitationsDAO.createInvitations(resourceId, emailRoles, inviterUserId, callback);
};

var updateInvitationRoles = module.exports.updateInvitationRoles = function(resourceId, emailRoles, callback) {
    var validator = new Validator();
    validator.check(resourceId, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isResourceId();
    _.each(emailRoles, function(role, email) {
        validator.check(email, {'code': 400, 'msg': util.format('Invalid email "%s" specified', email)}).isEmail();
        validator.check(role, {'code': 400, 'msg': util.format('Invalid role change "%s" specified', role)}).isValidRoleChange();
        if (role !== false) {
            validator.check(null, {'code': 400, 'msg': util.format('Invalid role "%s" specified', role)}).isString(role);
        }
    });
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    return AuthzInvitationsDAO.updateInvitationRoles(resourceId, emailRoles, callback);
};

var deleteInvitation = module.exports.deleteInvitation = function(ctx, resourceId, email, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can delete an invitation'}).isLoggedInUser(ctx);
    validator.check(resourceId, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isResourceId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    AuthzInvitationsDAO.deleteInvitation(resourceId, email, callback);
};
