/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var Chance = require('chance');

var Validator = require('oae-authz/lib/validator').Validator;

var InvitationsDAO = require('oae-invitations/lib/internal/dao');

var chance = new Chance();

var TOKEN_POOL = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';

var getInvitations = module.exports.getInvitations = function(ctx, resource, opts, callback) {
    resource = resource || {};

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can list invitations for a resource'}).isLoggedInUser(ctx);
    validator.check(resource.id, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isResourceId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    InvitationsDAO.getInvitations(resource.id, opts, callback);
};

var invite = module.exports.invite = function(ctx, resource, email, role, callback) {
    resource = resource || {};

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can invite others to collaborate'}).isLoggedInUser(ctx);
    validator.check(resource.id, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isResourceId();
    validator.check(email, {'code': 400, 'msg': 'A valid email must be supplied to invite'}).isEmail();
    validator.check(role, {'code': 400, 'msg': 'A valid role must be supplied to give the invited user'}).isValidRole();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Generate a random token for this invitation
    var token = chance.string({'length': 12, 'pool': TOKEN_POOL});
    InvitationsDAO.saveInvitation(resource.id, email, token, ctx.user().id, role, callback);
};

var getInvitationByToken = module.exports.getInvitationByToken = function(ctx, token, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can get an invitation'}).isLoggedInUser(ctx);
    validator.check(token, {'code': 400, 'msg': 'An invitation token must be provided'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    InvitationsDAO.getInvitationByToken(token, function(err, invitation) {
        if (err) {
            return callback(err);
        } else if (ctx.user().email !== invitation.email) {
            return callback({'err': 401, 'msg': 'Authenticated user does not have the appropriate email to get this token'});
        }

        return callback(null, invitation);
    });
};

var deleteInvitation = module.exports.deleteInvitation = function(ctx, resourceId, email, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can delete an invitation'}).isLoggedInUser(ctx);
    validator.check(resourceId, {'code': 400, 'msg': 'Specified resource must have a valid resource id'}).isResourceId();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    InvitationsDAO.deleteInvitation(resourceId, email, callback);
};
