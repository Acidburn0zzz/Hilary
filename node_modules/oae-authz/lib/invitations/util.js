
var _ = require('underscore');

var OaeUtil = require('oae-util/lib/util');

var AuthzInvitationsDAO = require('oae-authz/lib/invitations/dao');
var AuthzUtil = require('oae-authz/lib/util');
var Validator = require('oae-authz/lib/validator').Validator;

var computeInvitationRolesAfterChanges = module.exports.computeInvitationRolesAfterChanges = function(resourceId, changes, opts, callback) {
    if (resourceId && resourceId.indexOf('f') === 0) {
        throw new Error('Use authz id');
    }

    // If no resource id is provided, we treat this invocation as though the invitations list is
    // empty (i.e., a resource is currently being created with invitations)
    OaeUtil.invokeIfNecessary(resourceId, AuthzInvitationsDAO.getAllInvitationsByResourceId, resourceId, function(err, invitations) {
        if (err) {
            return callback(err);
        }

        var invitationRolesBefore = _.chain(invitations)
            .indexBy('email')
            .mapObject(function(invitation) {
                return invitation.role;
            })
            .value();
        var changeResult = AuthzUtil.computeRoleChanges(invitationRolesBefore, changes, opts);
        return callback(null, changeResult.changes, changeResult.roles, changeResult.ids);
    });
};
