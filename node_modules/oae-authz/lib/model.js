/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

/**
 * A Principal object that represents a principal in the roles system.
 *
 * @param  {String}   principalType  The type of this principal (e.g., 'u' for User, 'g' for Group)
 * @param  {String}   tenantAlias    The alias of the tenant to which this principal belongs
 * @param  {String}   principalId    The ID of this principal
 * @return {Object}                  The principal Object
 */
module.exports.Principal = function(principalType, tenantAlias, principalId) {
    var that = {};

    that.tenantAlias = tenantAlias;
    that.principalType = principalType;
    that.principalId = principalId;

    return that;
};

/**
 * A Resource object that represents a resource to which a principal may be assigned a role in the system.
 *
 * @param  {String}   resourceType   The type of this principal (e.g., 'g' for Group, 'c' for Content)
 * @param  {String}   tenantAlias    The alias of the tenant to which this resource belongs
 * @param  {String}   resourceId     The ID of this resource
 * @return {Object}                  The resource Object
 */
module.exports.Resource = function(resourceType, tenantAlias, resourceId) {
    var that = {};

    that.tenantAlias = tenantAlias;
    that.resourceType = resourceType;
    that.resourceId = resourceId;

    return that;
};

/**
 * An object that represents a target for a share / role change. There are 3 different permutations
 * that have slightly different meanings:
 *
 *  *   Only `principal` is set: The target for the share is some principal (user or group) and the
 *      appropriate interaction checks should be performed for the target
 *  *   Only `email` is set: The target is an email invitation
 *  *   Both `principal` and `email` are set: If the email matches the email of the principal
 *      profile, then interaction checks can be bypassed as the client has successfully
 *      looked up the user by email
 *
 * A `role` can optionally be present with the target, indicating a role change to apply to the
 * target
 *
 * @param  {Principal}  [principal]     The principal profile
 * @param  {String}     [email]         The email address
 * @param  {String}     [role]          The role change to apply, if applicable
 */
module.exports.ShareTarget = function(principal, email, role) {
    return {
        'principal': principal,
        'email': email,
        'role': role
    };
};

/**
 * An object that represents a set of roles on a resource, or a set of role changes that wish to be
 * applied to a resource. The object is keyed by principal id, while the value is either a string
 * role associated/applied to that member, or `false` to indicate that the member should be removed
 * from the resource
 *
 * @param  {Object}     memberRoles     The member roles as described in the summary
 */
module.exports.MemberRoles = function(memberRoles) {
    return _.extend({}, memberRoles);
};

/**
 * Identical to `MemberRoles`, except it applies to email addresses in authz invitations as opposed
 * to principal ids in authz members
 *
 * @see MemberRoles
 */
module.exports.EmailRoles = function(emailRoles) {
    return _.extend({}, emailRoles);
};

/**
 * An object that represents the delta state of an authz members bulk role change for a resource
 *
 * @param  {MemberRoles}    changes             The canonical member role changes that should be applied
 * @param  {Object}         roles               An info object that describes the resource member roles before and after the `changes` object is applied
 * @param  {MemberRoles}    roles.before        The state of the resource member roles before the change is applied
 * @param  {MemberRoles}    roles.after         The state of the resource member roles after the change is applied
 * @param  {Object}         members             Provides insight into how the state of the members association to the resource changes
 * @param  {Resource[]}     members.added       The members who are being added to the resource
 * @param  {Resource[]}     members.updated     The members who previously had a role, and whose roles are changing on the resource
 * @param  {Resource[]}     members.removed     The members who previously had a role, and who are being removed from the resource
 */
module.exports.MemberChangeInfo = function(changes, roles, members) {
    return {
        'changes': changes,
        'roles': roles,
        'members': members
    }
};

/**
 * Similar to MemberChangeInfo, however it applies to authz invitation emails instead of members
 *
 * @param  {EmailRoles}     changes             The canonical invitation role changes that should be applied
 * @param  {Object}         roles               An info object that describes the resource email roles before and after the `changes` object is applied
 * @param  {EmailRoles}     roles.before        The state of the resource email roles before the change is applied
 * @param  {EmailRoles}     roles.after         The state of the resource email roles after the change is applied
 * @param  {Object}         emails              Provides insight into how the state of the email association to the resource changes
 * @param  {String[]}       emails.added        The emails that are being added to the resource
 * @param  {String[]}       emails.updated      The emails that previously had an invitation role, and whose roles are changing on the resource
 * @param  {String[]}       emails.removed      The emails that previously had an invitation role, and are being removed from the resource
 */
module.exports.EmailChangeInfo = function(changes, roles, emails) {
    return {
        'changes': changes,
        'roles': roles,
        'emails': emails
    }
};
