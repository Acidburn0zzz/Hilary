 /*
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var ContentTestUtil = require('oae-content/lib/test/util');
var DiscussionsTestUtil = require('oae-discussions/lib/test/util');
var FoldersTestUtil = require('oae-folders/lib/test/util');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var AuthzTestUtil = require('oae-authz/lib/test/util');

describe('Invitations', function() {

    // Initialize some rest contexts for anonymous and admin users
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;
    var globalAdminRestContext = null;

    var randomString = TestsUtil.generateRandomText(1);

    var resourceFns = {
        'content': {
            'createSucceeds': _.partial(ContentTestUtil.assertCreateLinkSucceeds, _, randomString, randomString, _, 'http://oae.local', _, _, [], _),
            'createFails': _.partial(ContentTestUtil.assertCreateLinkFails, _, randomString, randomString, _, 'http://oae.local', _, _, [], _, _),
            'shareSucceeds': ContentTestUtil.assertShareContentSucceeds,
            'shareFails': ContentTestUtil.assertShareContentFails
        }
    };

    before(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        return callback();
    });

    describe('Create', function() {

        describe('Content', function() {

            it('verify creating content with members and invitations saves invitations', function(callback) {
                return _testInvitationsForCreate('content', callback);
            });

            it('verify validation of creating content with invitations', function(callback) {
                return _testInvitationsValidationForCreate('content', callback);
            });

            it('verify authorization of creating content with invitations', function(callback) {
                return _testInvitationsAuthorizationForCreate('content', callback);
            });
        });
    });

    describe('Share', function() {

        describe('Content', function() {

            it('verify sharing content with members and invitations saves invitations', function(callback) {
                return _testInvitationsForShare('content', callback);
            });
        });
    })

    var _testInvitationsForCreate = function(resourceType, callback) {
        var fns = resourceFns[resourceType];
        TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, user0, userManager, userViewer) {
            assert.ok(!err);

            // Ensure a simple create mixed with a couple member users succeeds
            fns.createSucceeds(user0.restContext, 'public', ['manager@oae.local', userManager.user.id], [userViewer.user.id, 'viewer@oae.local'], function(resource) {
                return callback();
            });
        });
    };

    var _testInvitationsValidationForCreate = function(resourceType, callback) {
        var fns = resourceFns[resourceType];
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user0) {
            assert.ok(!err);

            // Ensure variations of email addresses fail
            fns.createFails(user0.restContext, 'public', ['invalid@email'], [], 400, function(resource) {

                // Sanity check can be created with valid email
                fns.createSucceeds(user0.restContext, 'public', ['manager@oae.local'], [], function(resource) {
                    return callback();
                });
            });
        });
    };

    var _testInvitationsAuthorizationForCreate = function(resourceType, callback) {
        var fns = resourceFns[resourceType];
        ContentTestUtil.setupMultiTenantPrivacyEntities(function(publicTenant0, publicTenant1, privateTenant0) {

            // Ensure cannot create content associated to an email from a private tenant
            fns.createFails(privateTenant0.publicUser.restContext, 'public', [_emailForTenant(publicTenant0)], [], 401, function(resource) {
                // Ensure cannot create content associated to a private tenant
                fns.createFails(publicTenant0.publicUser.restContext, 'public', [_emailForTenant(privateTenant0)], [], 401, function(resource) {
                    // Sanity check we can create content on our own private tenant
                    fns.createSucceeds(privateTenant0.publicUser.restContext, 'public', [_emailForTenant(privateTenant0)], [], function(resource) {
                        // Ensure a user can create a loggedin item and share it with an email of a user from another tenant
                        fns.createSucceeds(publicTenant0.publicUser.restContext, 'loggedin', [_emailForTenant(publicTenant1)], [], function(resource) {
                            return callback();
                        });
                    });
                });
            });
        });
    };

    var _testInvitationsForShare = function(resourceType, callback) {
        var fns = resourceFns[resourceType];
        TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, users, userSharer, user0, user1) {
            assert.ok(!err);
            fns.createSucceeds(userSharer.restContext, 'public', [], [], function(resource) {

                // Ensure a simple share works as expected
                fns.shareSucceeds(userSharer.restContext, userSharer.restContext, resource.id, [user0.user.id, 'email1@oae.local', 'email2@oae.local', user1.user.id], function() {
                    return callback();
                });
            });
        });
    };

    var _testInvitationsValidationForShare = function(resourceType, callback) {
        var fns = resourceFns[resourceType];
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, user0) {
            assert.ok(!err);
            fns.createSucceeds(user0.restCOntext, 'public', [], [], function(resource) {
                // Ensure cannot share with a variation of an email address
                fns.shareFails(user0.restContext, userSharer.restContext, resource.id, ['email1@oae'], function() {
                    // Sanity check share succeeds
                    fns.shareSucceeds(user0.restContext, user0.restContext, resource.id, ['email1@oae.local'], function() {
                        return callback();
                    });
                });
            });
        });
    };

    var _emailForTenant = function(tenantInfo, username) {
        return util.format('%s@%s', username || TestsUtil.generateTestUserId(), tenantInfo.tenant.emailDomain);
    };
});
