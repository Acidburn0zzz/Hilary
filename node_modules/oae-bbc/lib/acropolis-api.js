/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore')
var N3 = require('N3');
var request = require('request');
var util = require('util');

var BASE_URL = 'http://beta.acropolis.org.uk';

var process = module.exports.process = function(offset, limit, callback) {
    var url = '/everything';
    var url = util.format('%s/everything.ttl?limit=%d&offset=%d', BASE_URL, limit, offset);
    _getTurtleData(url, function(err, triples) {
        if (err) {
            return callback(err);
        }

        _processTriples(url, triples, callback);
    });
};

var _processTriples = function(url, triples, callback) {
    var subjects = _.chain(triples)
        .filter(function(triple) {
            // Filter out the category triples (e.g/, don't use /assets)
            return (triple.subject[0] !== '/');
        })
        .map(function(triple) {
            return triple.subject;
        })
        .uniq()
        .value();

    // Get data
    processAcropolisSubjects(subjects, callback);
};

var processAcropolisSubjects = module.exports.processAcropolisSubjects = function(ids, callback, _items) {
    _items = _items || [];
    if (ids.length === 0) {
        return callback(null, _items);
    }

    var id = ids.pop();
    _getTurtleData(id, function(err, triples) {
        if (err) {
            return callback(err);
        }

        var item = {
            'id': id
        }
        var lblTriple = _findTripleByPredicate(triples, ['http://www.w3.org/2000/01/rdf-schema#label']);
        if (lblTriple) {
            item.displayName = lblTriple.object.replace(/"/g, '');;
        }

        var descriptionTriple = _findTripleByPredicate(triples, ['rdfs:comment', 'http://schema.org/description']);
        if (descriptionTriple) {
            item.description = descriptionTriple.object.replace(/"/g, '');
        }

        item.image = _findImageUrl(triples, id);
        _items.push(item);

        // Search one level further
        var sameAsSubjects = _.chain(triples)
            .filter(function(triple) {
                return (triple.predicate === 'http://www.w3.org/2002/07/owl#sameAs');
            })
            .map(function(triple) {
                return triple.subject;
            })
            .value();

        _getMoreMetadata(item, sameAsSubjects, 1, function(err) {
            if (err) {
                return callback(err);
            }

            processAcropolisSubjects(ids, callback, _items);
        });
    });
};

var _getTurtleData = function(url, callback) {
    var options = {
        'url': url,
        'headers': {
            'Accept': 'text/turtle'
        },
        'timeout': 6000
    };
    request(options, function(err, response, body) {
        if (err) {
            return callback(err);
        }

        if (!response.headers['content-type'] || response.headers['content-type'].indexOf('text/turtle') === -1) {
            return callback(null, []);
        }

        var cb = _.once(callback);

        var parser = N3.Parser();
        var triples = [];
        parser.parse(body, function (err, triple, prefixes) {
            if (err) {
                return cb(err);
            }

            if (triple) {
                triples.push(triple);
            } else {
                return callback(null, triples);
            }
        });
    });
};

var _getMoreMetadata = function(item, subjects, depth, callback, _processedSubjects) {
    _processedSubjects = _processedSubjects || [];
    if (subjects.length === 0) {
        return callback();
    }


    var moreResources = [];
    var done = _.after(subjects.length, function() {
        moreResources = _.chain(moreResources)
            .filter(function(resource) {
                return (!_.contains(_processedSubjects, resource));
            })
            .uniq()
            .value();
        if (_.isEmpty(moreResources)) {
            return callback();
        }

        if (depth > 2) {
            return callback();
        } else {
            _getMoreMetadata(item, moreResources, depth + 1, callback);
        }
    });

    _processedSubjects = _processedSubjects.concat(subjects);
    _.each(subjects, function(subject) {
        _getTurtleData(subject, function(err, triples) {
            if (err) {
                // Ignore this source
                return done();
            }

            var descriptionTriple = _findTripleByPredicate(triples, ['rdfs:comment', 'http://schema.org/description']);
            if (descriptionTriple) {
                item.description = descriptionTriple.object.replace(/"/g, '');
            }

            if (!item.image) {
                item.image = _findImageUrl(triples, item.id);
            }

            // Search one level further
            var sameAsSubjects = _.chain(triples)
                .filter(function(triple) {
                    return (triple.predicate === 'http://www.w3.org/2002/07/owl#sameAs' && triple.subject !== subject);
                })
                .map(function(triple) {
                    return triple.object;
                })
                .uniq()
                .value();

            if (_.isEmpty(sameAsSubjects)) {
                return done();
            }

            // Add more resources
            moreResources = moreResources.concat(sameAsSubjects);
            return done();
        });
    });
};

var _findTripleByPredicate = function(triples, predicates) {
    return _.find(triples, function(triple) {
        return _.contains(predicates, triple.predicate);
    });
};

var _findImageUrl = function(triples, id) {
    var imageTriples = _.filter(triples, function(triple) {
        return (
            triple.subject !== id && 
            triple.predicate === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' &&
            triple.object === 'http://purl.org/dc/dcmitype/Image'
        );
    });
    if (!_.isEmpty(imageTriples)) {
        return imageTriples[0].subject;
    }

    var dbpediaThumbnailTriple = _findTripleByPredicate(triples, ['http://dbpedia.org/ontology/thumbnail']);
    if (dbpediaThumbnailTriple) {
        return dbpediaThumbnailTriple.object;
    }

    return null;
};
