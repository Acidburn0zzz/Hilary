var _ = require('underscore');
var async = require('async');
var fs = require('fs');
var request = require('request');
var util = require('util');


var writeData = module.exports.writeData = function(callback) {
    getData(function(items) {
        fs.writeFile('data.json', JSON.stringify(items, null, 4), function() {
            console.log('Base JSON file written');
        });

        // Get the location names
        async.mapSeries(items, getLocationData, function(err, results) {
            console.log('Locations retrieved');
            _.each(items, function(item) {
                var loc = item.body[item.location];
                if (loc['http://www.w3.org/2004/02/skos/core#prefLabel']) {
                    item.location = loc['http://www.w3.org/2004/02/skos/core#prefLabel'][0].value;
                    delete item.body;
                } else if (loc['http://www.w3.org/2000/01/rdf-schema#label']) {
                    item.location = loc['http://www.w3.org/2000/01/rdf-schema#label'][0].value;
                    delete item.body
                }
            });
            fs.writeFile('data_with_locations.json', JSON.stringify(items, null, 4), function() {
                console.log('File locations written');
            });

            // Get the images
            async.mapSeries(items, getImage, function(err, results) {
                console.log('Images retrieved');
            });
        });
    });
};
var getLocationData = function(item, callback) {
    var uri = encodeURIComponent(item.location);
    var options = {
        'url': 'http://collection.britishmuseum.org/resource?uri=' + uri + '&format=json',
        'headers': {
            'Accept': 'application/json'
        }
    };
    request(options, function(err, response, body) {
        if (!err) {
            try {
                item.body = JSON.parse(body);
            } catch (err) {
                item.body = {};
            }
        }
        return callback(err, item);
    });
};

var getImage = function(item, callback) {
    var writeStream = fs.createWriteStream('images/' + item.image.split('/').pop());
    request(item.image).pipe(writeStream);

    // The image has been written
    writeStream.on('finish', callback);
};


var getData = module.exports.getData = function(callback, _offset, _items) {
    _items = _items || [];
    _offset = _offset || 10000;
    if (_items.length > 20) {
        return callback(_items);
    }

    getPage(_offset, function(err, items) {
        if (err) {
            return callback(err);
        }

        _items = _items.concat(items);
        _items = _.uniq(_items, function(item) {
            return item.displayName;
        });

        console.log('Got %d items so far', _items.length);

        getData(callback, _offset + 300, _items);
    });
};

var getPage = function(offset, callback) {
    var url = 'http://collection.britishmuseum.org/sparql.json?query=PREFIX+rdfs%3A+%3Chttp%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23%3E%0D%0APREFIX+foaf%3A+%3Chttp%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%3E%0D%0A%0D%0ASELECT+%3Fnode+%3Flabel+%3Fdescription+%3Fimage+%3Flocation+WHERE%0D%0A%7B%0D%0A++++%3Fnode+rdfs%3Alabel+%3Flabel+.%0D%0A++++%3Fnode+%3Chttp%3A%2F%2Fwww.researchspace.org%2Fontology%2FFR138i_representation%3E+%3Fimage+.%0D%0A++++%3Fnode+%3Chttp%3A%2F%2Fcollection.britishmuseum.org%2Fid%2Fontology%2FPX_physical_description%3E+%3Fdescription+.%0D%0A++++%3Fnode+%3Chttp%3A%2F%2Fwww.researchspace.org%2Fontology%2FFR7_from_place%3E+%3Flocation+.%0D%0A%7D%0D%0Aoffset+' + offset + '+limit+100&_implicit=false&implicit=true&_equivalent=false&_form=%2Fsparql';
    request(url, function(err, response, body) {
        if (err) {
            console.log('Bummer');
            return callback(err);
        }

        var items = [];
        var data = JSON.parse(body);
        _.each(data.results.bindings, function(binding) {
            items.push({
                'displayName': binding.label.value,
                'description': binding.description.value,
                'image': binding.image.value,
                'location': binding.location.value
            });
        });

        return callback(null, items);
    });
};
