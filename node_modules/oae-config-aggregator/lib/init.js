/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var express = require('express');
var schema = require('./schema');
var ConfigAPI = require('oae-config-aggregator');
var PrincipalAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;

module.exports = function(app, callback) {
    registerConfigAdminRestEndpoints(app);
    schema.ensureSchema(function(err) {

        // We'll create/get 1 global admin account in the internal global tenant that can be used
        // to create tenants/other global accounts.
        var globalTenant = new Tenant('global', 'Global tenant', 'A fake tenant that can be used for global administration', 2000, 'localhost');
        var globalContext = new Context(globalTenant, null);

        // Create a global admin if it doesn't exist.
        PrincipalAPI.createUser(globalContext, 'administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', function(err, user_id) {
            // An error occurred.
            if (!err) {
                console.log("Admin account with user_id '%s' created.", user_id);
            } else if (err && err.msg && !err.msg.indexOf('already exists') > 0) {
                return callback(err);
            }

            callback();
        });
    });
}

/**
 * Register all the endpoints required for interacting with the configuration admin interface.
 */
var registerConfigAdminRestEndpoints = function(app) {

    app.server.use(express.static(__dirname + "/../public"));

    app.server.get('/whoami', function(req, res, next) {
        res.send('Sakai OAE Global Admin Interface');
    });

    app.server.get('/api/modules', function(req, res, next) {
        ConfigAPI.getModules(function(modules) {
            res.send(200, modules)
        });
    });

    app.server.get('/api/configuration', function(req, res, next) {
        if (req.query.tenantid) {
            ConfigAPI.readConfig(req.query.tenantid, function(err, configuration) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(200, configuration);
            });
        } else {
            res.send(400, 'A tenant ID is required to get the configuration.');
        }
    });

    app.server.get('/admin', function(req, res, next) {
        var action = req.pathname;
        fs.readFile('node_modules/oae-config-aggregator/public/admin.html', 'binary', function(err, file) {
            if(err) {
                return res.send(err.code, "Page not found.");
            }

            res.writeHead(200, {'Content-Type': 'text/html'});
            res.write(file, 'binary');
            res.end();
        });
    });

    app.server.post('/admin/update', function(req, res, next) {
        ConfigAPI.writeConfig(req.body, function(err) {
            if (err) {
                return res.send(err.code, err.body);
            }
            res.send(200, 'Config successfully stored.');
        });
    });

}