/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var TestAPI = require('oae-tests');

var request = TestAPI.Http.createRequest();

describe('Utilities', function() {

    describe('OAE', function() {

        describe('Admin UI', function() {

            it('Test accessing the global admin UI succeeds', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/admin.html'
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test accessing the tenant admin UI succeeds', function(callback) {
                request.get({
                    'uri': 'http://localhost:2001/admin/tenant/camtest'
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

        });

        describe('Configuration', function() {

            it('Test configuration retrieval requires tenant ID', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration'
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    assert.equal(body, 'A tenant ID is required to get the configuration.');
                    callback();
                });
            });

            it('Test configuration retrieval succeeds', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration',
                    'qs': {
                        'tenantid': 'camtest'
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test persisting a global configuration value succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/admin/update',
                    'json': {
                        'oae-authentication/twitter-authentication/twitter-authentication-enabled': {
                            'tenantid': 'global',
                            'value': false
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test global configuration value overrides config.json value', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration',
                    'qs': {
                        'tenantid': 'global'
                    }
                }, function(err, response, modules) {
                    var val = true;
                    modules = JSON.parse(modules);
                    for (var i = 0, l = modules.length; i < l; i++) {
                        if (modules[i].id === 'oae-authentication') {
                            for (var opt in modules[i].config.options) {
                                if (opt === 'twitter-authentication') {
                                    for (var el in modules[i].config.options[opt].elements) {
                                        if (el === 'twitter-authentication-enabled') {
                                            if (modules[i].config.options[opt].elements[el].value === false) {
                                                val = modules[i].config.options[opt].elements[el].value;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    assert.equal(val, false);
                    callback();
                });
            });

            it('Test persisting a tenant configuration value succeeds', function(callback) {
                request.post({
                    'uri': 'http://localhost:2000/admin/update',
                    'json': {
                        "oae-authentication/twitter-authentication/twitter-authentication-enabled":{
                            "tenantid": "camtest",
                            "value": true
                        }
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 200);
                    callback();
                });
            });

            it('Test tenant configuration value overrides global value', function(callback) {
                request.get({
                    'uri': 'http://localhost:2000/api/configuration',
                    'qs': {
                        'tenantid': 'camtest'
                    }
                }, function(err, response, modules) {
                    var val = false;
                    modules = JSON.parse(modules);
                    for (var i = 0, l = modules.length; i < l; i++) {
                        if (modules[i].id === 'oae-authentication') {
                            for (var opt in modules[i].config.options) {
                                if (opt === 'twitter-authentication') {
                                    for (var el in modules[i].config.options[opt].elements) {
                                        if (el === 'twitter-authentication-enabled') {
                                            if (modules[i].config.options[opt].elements[el].value === true) {
                                                val = modules[i].config.options[opt].elements[el].value;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    assert.equal(val, true);
                    callback();
                });
            });

        });
    });
});
