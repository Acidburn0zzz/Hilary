/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var OAE = require('oae-util/lib/oae');

var ConfigAPI = require('oae-config');


/**
 * Convenience method to handle the general specification of clearing configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body.configFields]     One or more config keys to be cleared
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleClearConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    var configFields = req.body.configFields || null;

    // If the config fields is a single element, we're just clearing one field. Since the
    // API only takes an array we wrap the string into an array
    if (_.isString(configFields)) {
        configFields = [configFields];
    }

    ConfigAPI.clearConfig(req.ctx, tenantAlias, configFields, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * Convenience method to handle the general specification of updating configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body]                  The request body parameter keys are the configuration keys, and the value is the value to set
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleUpdateConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    ConfigAPI.updateConfig(req.ctx, tenantAlias, req.body, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/**
 * Convenience method to handle the general specification of getting configuration
 * values for either the current tenant or a specified tenant
 *
 * @param  {Request}            req                         The Express Request object holding the input parameters
 * @param  {Context}            req.ctx                     The context of the request
 * @param  {String|String[]}    [req.body.configFields]     One or more config keys to be cleared
 * @param  {String}             [req.params.tenantAlias]    The specified tenant alias, if any. Default: The tenant of the request context
 * @param  {Response}           res                         The Express Response object to which to send the response
 * @api private
 */
var _handleGetConfig = function(req, res) {
    // If the tenant alias is specified in the request parameters, use it. Otherwise
    // we use the current tenant in context
    var tenantAlias = req.params.tenantAlias || req.ctx.tenant().alias;
    ConfigAPI.getTenantConfig(req.ctx, tenantAlias, function(err, config) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, config);
    });
};

/**
 * Convenience method to handle getting the configuration schema for the current tenant
 *
 * @param  {Request}    req     The Express Request object of the current request
 * @param  {Response}   res     The Express Response object to which to send the response
 * @api private
 */
var _handleGetSchema = function(req, res) {
    ConfigAPI.getSchema(req.ctx, function(err, schema) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, schema);
    });
};

/**
 * @REST getConfigSchema
 *
 * Get configuration schemas for the global admin tenant and user tenants
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /config/schema
 * @Return      {ConfigSchema}          Returns an object representing configuration schema
 */
OAE.globalAdminRouter.on('get', '/api/config/schema', _handleGetSchema);
OAE.tenantRouter.on('get', '/api/config/schema', _handleGetSchema);

/**
 * @REST postConfigClear
 *
 * Clear specified configuration values for the current tenant
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /config/clear
 * @BodyParam   {ConfigFieldList}   body    Configuration items to clear
 */
OAE.globalAdminRouter.on('post', '/api/config/clear', _handleClearConfig);
OAE.tenantRouter.on('post', '/api/config/clear', _handleClearConfig);

/**
 * @REST postConfigTenantAliasClear
 *
 * Clear specified configuration values for a particular tenant
 *
 * @Server      admin
 * @Method      POST
 * @Path        /config/{tenantAlias}/clear
 * @PathParam   {string}            tenantAlias     Alias of tenant
 * @BodyParam   {ConfigFieldList}   body            Configuration items to clear
 */
OAE.globalAdminRouter.on('post', '/api/config/:tenantAlias/clear', _handleClearConfig);

/**
 * @REST getConfig
 *
 * Get the configuration of the current tenant
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /config
 * @Return      {Config}          Returns an object representing configuration
 */
OAE.globalAdminRouter.on('get', '/api/config', _handleGetConfig);
OAE.tenantRouter.on('get', '/api/config', _handleGetConfig);

/**
 * @REST getConfigTenantAlias
 *
 * Get the configuration of a particular tenant
 *
 * @Server      admin
 * @Method      GET
 * @Path        /config/{tenantAlias}
 * @PathParam   {string}            tenantAlias     Alias of tenant
 * @Return      {Config}                            Returns an object representing configuration
 */
OAE.globalAdminRouter.on('get', '/api/config/:tenantAlias', _handleGetConfig);

/**
 * @REST postConfig
 *
 * Update specified configuration values for the current tenant
 *
 * @Server      admin,tenant
 * @Method      POST
 * @Path        /config
 * @BodyParam   {ConfigList}        body        Configuration items to update with values
 */
OAE.globalAdminRouter.on('post', '/api/config', _handleUpdateConfig);
OAE.tenantRouter.on('post', '/api/config', _handleUpdateConfig);

/**
 * @REST postConfigTenantAlias
 *
 * Update specified configuration values for the specified tenant
 *
 * @Server      admin
 * @Method      POST
 * @Path        /config/{tenantAlias}
 * @PathParam   {string}            tenantAlias     Alias of tenant
 * @BodyParam   {ConfigList}        body            Configuration items to update with values
 */
OAE.globalAdminRouter.on('post', '/api/config/:tenantAlias', _handleUpdateConfig);

/**
 * @RESTModel ActivityConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             activity                    Activity configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel ActivitySchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        activity                    Activity configuration
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel AuthenticationConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             cas                         CAS authentication for tenant
 * @Property    {ConfigValue[]}             facebook                    Facebook authentication for tenant
 * @Property    {ConfigValue[]}             google                      Google+ authentication for tenant
 * @Property    {ConfigValue[]}             ldap                        LDAP authentication for tenant
 * @Property    {ConfigValue[]}             local                       Local authentication for tenant
 * @Property    {ConfigValue[]}             shibboleth                  Shibboleth authentication for tenant
 * @Property    {ConfigTitle}               title                       Name of configuration module
 * @Property    {ConfigValue[]}             twitter                     Twitter authentication for tenant
 */

/**
 * @RESTModel AuthenticationSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        cas                         CAS authentication for tenant
 * @Property    {ConfigModuleSchema}        facebook                    Facebook authentication for tenant
 * @Property    {ConfigModuleSchema}        google                      Google+ authentication for tenant
 * @Property    {ConfigModuleSchema}        ldap                        LDAP authentication for tenant
 * @Property    {ConfigModuleSchema}        local                       Local authentication for tenant
 * @Property    {ConfigModuleSchema}        shibboleth                  Shibboleth authentication for tenant
 * @Property    {string}                    title                       Name of configuration module
 * @Property    {ConfigModuleSchema}        twitter                     Twitter authentication for tenant
 */

/**
 * @RESTModel Config
 *
 * @Required    []
 * @Property    {ActivityConfig}            oae-activity                Activity configuration
 * @Property    {AuthenticationConfig}      oae-authentication          Authentication configuration
 * @Property    {ContentConfig}             oae-content                 Content configuration
 * @Property    {DiscussionsConfig}         oae-discussions             Discussions configuration
 * @Property    {EmailConfig}               oae-email                   Email configuration
 * @Property    {GoogleAnalyticsConfig}     oae-google-analytics        Google Analytics configuration
 * @Property    {MediacoreConfig}           oae-mediacore               MediaCore configuration
 * @Property    {PreviewProcessorConfig}    oae-preview-processor       Preview processor configuration
 * @Property    {PrincipalsConfig}          oae-principals              Principals configuration
 * @Property    {TenantsConfig}             oae-tenants                 Tenants configuration
 * @Property    {TincanapiConfig}           oae-tincapapi               TinCanAPI configuration
 * @Property    {UiConfig}                  oae-ui                      UI configuration
 * @Property    {UservoiceConfig}           oae-uservoice               UserVoice configuration
 */

/**
 * @RESTModel ConfigElementItem
 *
 * @Required    [name,value]
 * @Property    {string}                    name                        Name of list item
 * @Property    {string}                    value                       Value of list item
 */

/**
 * @RESTModel ConfigElementSchema
 *
 * @Required    [defaultValue,description,globalAdminname,suppress,tenantOverride,type]
 * @Property    {string}                    defaultValue                Default value for element (use "" for false)
 * @Property    {string}                    description                 Description of element
 * @Property    {boolean}                   globalAdminOnly             Is element restricted to global adminstrators
 * @Property    {ConfigElementItem[]}       group                       Possible values for group elements
 * @Property    {ConfigElementItem[]}       list                        Possible values for list elements
 * @Property    {string}                    name                        Name of element
 * @Property    {boolean}                   suppress                    Allow presentation of element in adminstrative user interface
 * @Property    {boolean}                   tenantOverride              Can tenants override global values
 * @Property    {string}                    type                        Type of element [boolean,internationalizableText,list,radio,text]
 */

/**
 * @RESTModel ConfigElementsSchema
 *
 * @Required    [{elementName}]
 * @Property    {ConfigElementSchema}       {elementName}               Schema for named element
 */

/**
 * @RESTModel ConfigFieldList
 *
 * @Required    []
 * @Property    {string[]}                  configFields                Array of config items in the form `oae-authentication/twitter/enabled`
 */

/**
 * @RESTModel ConfigValues
 *
 * @Required    [{configField}]
 * @Property    {string}                  {configField}                 Value(s) for config keys in the form `oae-authentication/twitter/enabled`
 */

/**
 * @RESTModel ConfigModuleSchema
 *
 * @Required    [description,elements,name]
 * @Property    {string}                    description                 Description of module
 * @Property    {ConfigElementsSchema}      elements                    Elements of the module
 * @Property    {string}                    name                        Name of module
 * @Property    {boolean}                   tenantOverride              Can tenants override global values
 */

/**
 * @RESTModel ConfigSchema
 *
 * @Required    []
 * @Property    {ActivitySchema}            oae-activity                Activity configuration schema
 * @Property    {AuthenticationSchema}      oae-authentication          Authentication configuration schema
 * @Property    {ContentSchema}             oae-content                 Content configuration schema
 * @Property    {DiscussionsSchema}         oae-discussions             Discussions configuration schema
 * @Property    {EmailSchema}               oae-email                   Email configuration schema
 * @Property    {GoogleAnalyticsSchema}     oae-google-analytics        Google Analytics configuration schema
 * @Property    {MediacoreSchema}           oae-mediacore               MediaCore configuration schema
 * @Property    {PreviewProcessorSchema}    oae-preview-processor       Preview processor configuration schema
 * @Property    {PrincipalsSchema}          oae-principals              Principals configuration schema
 * @Property    {TenantsSchema}             oae-tenants                 Tenants configuration schema
 * @Property    {TincanapiSchema}           oae-tincapapi               TinCanAPI configuration schema
 * @Property    {UiSchema}                  oae-ui                      UI configuration schema
 * @Property    {UservoiceSchema}           oae-uservoice               UserVoice configuration schema
 */

/**
 * @RESTModel ConfigTitle
 *
 * @Required    []
 * @Property    {void}                      null                        Not currently used
 */

/**
 * @RESTModel ConfigValue
 *
 * @Required    [{name}]
 * @Property    {string}                    {name}                      Value of the named config element
 */

/**
 * @RESTModel ContentConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             storage                     Backend storage configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 * @Property    {ConfigValue[]}             visibility                  Default visibility for new content
 */

/**
 * @RESTModel ContentSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        storage                     Backend storage configuration
 * @Property    {string}                    title                       Name of configuration module
 * @Property    {ConfigModuleSchema}        visibility                  Default visibility for new content
 */

/**
 * @RESTModel DiscussionsConfig
 *
 * @Required    [title]
 * @Property    {ConfigTitle}               title                       Name of configuration module
 * @Property    {ConfigValue[]}             visibility                  Default visibility for new discussions
 */

/**
 * @RESTModel DiscussionsSchema
 *
 * @Required    [title]
 * @Property    {string}                    title                       Name of configuration module
 * @Property    {ConfigModuleSchema}        visibility                  Default visibility for new discussions
 */

/**
 * @RESTModel EmailConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             general                     General email configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel EmailSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        general                     General email configuration
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel GoogleAnalyticsConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             google-analytics            Google Analytics configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel GoogleAnalyticsSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        google-analytics            Google Analytics configuration
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel MediacoreConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             mediacore                   MediaCore configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel MediacoreSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        mediacore                   MediaCore configuration
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel PreviewProcessorConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             flickr                      Flickr configuration
 * @Property    {ConfigValue[]}             slideshare                  SlideShare configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel PreviewProcessorSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        flickr                      Flickr configuration
 * @Property    {ConfigModuleSchema}        slideshare                  SlideShare configuration
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel PrincipalsConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             group                       Default configuration for new groups
 * @Property    {ConfigValue[]}             recaptcha                   Configuration for reCaptcha
 * @Property    {ConfigValue[]}             termsAndConditions          Configuration for Terms & Conditions
 * @Property    {ConfigTitle}               title                       Name of configuration module
 * @Property    {ConfigValue[]}             user                        Default configuration for new users
 */

/**
 * @RESTModel PrincipalsSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        group                       Default configuration for new groups
 * @Property    {ConfigModuleSchema}        recaptcha                   Configuration for reCaptcha
 * @Property    {ConfigModuleSchema}        termsAndConditions          Configuration for Terms & Conditions
 * @Property    {string}                    title                       Name of configuration module
 * @Property    {ConfigModuleSchema}        user                        Default configuration for new users
 */

/**
 * @RESTModel TenantsConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             actions                     Actions available
 * @Property    {ConfigValue[]}             tenantprivacy               Visibility of tenant
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel TenantsSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        actions                     Actions available
 * @Property    {ConfigModuleSchema}        tenantprivacy               Visibility of tenant
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel TincanapiConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             lrs                         Learning Record Store configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel TincanapiSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        lrs                         Learning Record Store configuration
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel UiConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             skin                        Skin configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel UiSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        skin                        Skin configuration
 * @Property    {string}                    title                       Name of configuration module
 */

/**
 * @RESTModel UservoiceConfig
 *
 * @Required    [title]
 * @Property    {ConfigValue[]}             general                     General UserVoice configuration
 * @Property    {ConfigTitle}               title                       Name of configuration module
 */

/**
 * @RESTModel UservoiceSchema
 *
 * @Required    [title]
 * @Property    {ConfigModuleSchema}        general                     General UserVoice configuration
 * @Property    {string}                    title                       Name of configuration module
 */
