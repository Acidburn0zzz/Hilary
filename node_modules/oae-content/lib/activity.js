/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var AuthzAPI = require('oae-authz');
var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var Context = require('oae-context').Context;
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

var log = require('oae-logger').logger('oae-content');

/*!
 * Post a content-create activity when a user creates a content item.
 */
ContentAPI.on(ContentConstants.events.CREATED_CONTENT, function(ctx, content, members) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.contentId);
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_CREATE, millis, ActivityConstants.verbs.CREATE, actorResource, objectResource);
    ActivityAPI.postActivity(activitySeed);
});

/*!
 * Post a content-update activity when a user updates a content item.
 */
ContentAPI.on(ContentConstants.events.UPDATED_CONTENT, function(ctx, content, members) {
    var millis = (new Date()).getTime();
    var actorResource = new ActivityModel.ActivitySeedResource('user', ctx.user().id);
    var objectResource = new ActivityModel.ActivitySeedResource('content', content.contentId);
    var activitySeed = new ActivityModel.ActivitySeed(ContentConstants.activity.ACTIVITY_CONTENT_UPDATE, millis, ActivityConstants.verbs.UPDATE, actorResource, objectResource);
    ActivityAPI.postActivity(activitySeed);
});

////////////////////////
// ACTIVITY PRODUCERS //
////////////////////////

ActivityAPI.registerActivityObjectProducer(ActivityConstants.activityTypes.ALL, 'content', function(activityType, entityType, resource, callback) {
    ContentAPI.getContent(adminCtx(), resource.resourceId, function(err, content) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(content.tenant, function(err, tenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + tenant.host;
            var globalId = httpHost + '/api/content/' + content.contentId;
            var profileUrl = httpHost + '/~' + content.contentId;
            var isPrivate = (!content.visibility || content.visibility === 'private');

            var opts = {};
            opts.displayName = content.name;
            opts.url = profileUrl;
            opts.image = {
                'internalUri': 'local://2012/11/28/17/image/to/come.png',
                'width': 35,
                'height': 35
            };

            opts.ext = {};

            var propagation = (!isPrivate || group.joinable !== 'no') ? ActivityConstants.entityPropagation.ALL : ActivityConstants.entityPropagation.OWN;
            opts.ext[ActivityConstants.properties.OAE_PROPAGATION] = propagation;
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = content.visibility;
            opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_TYPE] = content.contentType;
            opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_MIMETYPE] = content.mimeType;

            return callback(null, new ActivityModel.ActivityObject('content', globalId, opts));
        });
    });
});


//////////////////////
// ACTIVITY ROUTERS //
//////////////////////

ActivityAPI.registerActivityRouter(ActivityConstants.activityTypes.ALL, 'content', function(activityType, entityType, contentActivityObject, callback) {
    AuthzAPI.getAuthzMembers(contentActivityObject[ActivityConstants.properties.OAE_ID], null, 10000, function(err, members) {
        if (err) {
            return callback(err);
        }

        // extract the 'id'
        members = _.map(members, function(member) {
            return member.id;
        });

        return callback(null, members);
    });
});

var adminCtx = function() {
    return new Context(new Tenant('admin', 'admin', 'adminhost', true), new User('global', 'admin', 'admin', { isGlobalAdmin: true }));
}
