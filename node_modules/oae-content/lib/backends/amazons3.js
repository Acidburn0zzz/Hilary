/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var awssum = require('awssum');
var ShortId = require('shortid');
var util = require('util');

var Cassandra = require('oae-util/lib/cassandra');
var Config = require('oae-config').config('oae-content');
var log = require('oae-logger').logger('amazon-storage');
var Revision = require('oae-content/lib/model').Revision;
var Validator = require('oae-util/lib/validator').Validator;


var amazon = awssum.load('amazon/amazon');
var S3 = awssum.load('amazon/s3').S3;

//////////////////////
// Storage methods. //
//////////////////////

/**
 * @borrows Interface.store as Local.store
 */
var store = module.exports.store = function(ctx, stream, headers, callback) {
    headers = headers || {};

    if (!stream) {
        return callback({'code': 400, 'msg': 'Missing stream parameter'});
    }

    var validator = new Validator();
    validator.check(headers['Content-Length'], {'code': 400, 'msg': 'Missing Content-Length header'}).notEmpty();
    validator.check(headers['Content-Filename'], {'code': 400, 'msg': 'Missing Content-Filename header'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    var date = new Date();
    var id = ShortId.generate();
    var uri = util.format('%d/%d/%d/%d/%d/%s/%s', date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), id, headers['Content-Filename']);
    
    var options = {
        'BucketName': _getBucketName(ctx),
        'ObjectName': uri,
        'ContentLength': headers['Content-Length'],
        'Body':  stream
    };
    _getClient(ctx).PutObject(options, function(err, data) {
        if (err) {
            log().error({'err': err}, 'Could not upload to S3.');
            return callback(err);
        }
        callback(null, 'amazons3:' + uri);
    });
};

/**
 * @borrows Interface.remove as Local.remove
 */
var remove = module.exports.remove = function(ctx, uri, callback) {
    callback = callback || function() {};

    if (!uri) {
        callback({'code': 400, 'msg': 'Missing URI parameter.'});
    }
    
    _getClient(ctx).DeleteObject('oae-performance-files', uri, function(err) {
        if (err) {
            log().error({'err': err}, 'Could not delete S3.');
            return callback(err);
        }
        callback(null, uri);
    });
};

/**
 * @borrows Interface.getDownloadLink as Local.getDownloadLink
 */
var getDownloadLink = module.exports.getDownloadLink = function(ctx, uri) {
    // The download link expires in 5 minutes.
    var expires = Math.round((Date.now() + 5*60000) / 1000);

    // Sign the URL.
    var s3 = _getClient(ctx);
    uri = _getBucketName(ctx) + '/' + uri.split(':')[1];
    var url = 'https://s3.amazonaws.com/' + uri;
    url += '?AWSAccessKeyId=' + s3.accessKeyId();
    url += '&Signature=' + encodeURIComponent(s3.signature('GET\n\n\n' + expires + '\n/' + uri));
    url += '&Expires=' + expires;
    return {'code': 301, 'url': url};
};

/**
 * Returns the bucket we'll be using for storing files in.
 * @param  {Context}    ctx     The current execution context.
 * @return {String}             The bucket name
 */
var _getBucketName = function(ctx) {
    return Config.getValue(ctx.tenant().alias, 'storage', 'amazons3-bucket');
};

/**
 * Gets a client that can connect to S3 and is configured via the admin interface.
 * @param  {Context}    ctx     The current execution context.
 * @return {S3}                 An S3 client.
 */
var _getClient = function(ctx) {

    var accessKey = Config.getValue(ctx.tenant().alias, 'storage', 'amazons3-access-key');
    var secretKey = Config.getValue(ctx.tenant().alias, 'storage', 'amazons3-secret-key');
    var region = Config.getValue(ctx.tenant().alias, 'storage', 'amazons3-region');

    return new S3({
        'accessKeyId': accessKey,
        'secretAccessKey': secretKey,
        'region': region
    });
};