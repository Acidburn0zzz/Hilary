/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');

/**
 * Given a set of Etherpad author IDs, retrieve the corresponding OAE user ids
 *
 * @param  {String[]}   authorIds           A set of etherpad author ids for which the OAE user ids should be retrievedq
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        Standard error object (if any)
 * @param  {String[]}   callback.users      The retrieved OAE user ids
 */
var getUserIds = module.exports.getUserIds = function(authorIds, callback) {
    if (authorIds.length === 0) {
        return callback(null, {});
    }

    Cassandra.runQuery('SELECT authorId, userId FROM EtherpadUsers WHERE authorId IN (?)', [authorIds], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var userIds = {};
        _.each(rows, function(row) {
            var rowHash = Cassandra.rowToHash(row);
            if (rowHash.authorId && rowHash.userId) {
                userIds[rowHash.authorId] = rowHash.userId;
            }
        });
        return callback(null, userIds);
    });
};

/**
 * Map an Etherpad author ID to an OAE user ID
 *
 * @param  {String}     authorId        The Etherpad author ID to store
 * @param  {String}     userId          The OAE user ID for an Etherpad author ID
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    Standard error object (if any)
 */
var saveAuthorId = module.exports.saveAuthorId = function(authorId, userId, callback) {
    var q = Cassandra.constructUpsertCQL('EtherpadUsers', 'authorId', authorId, {'userId': userId}, 'QUORUM');
    if (!q) {
        return callback({'code': 500, 'msg': 'Could not store etherpad author'});
    }
    Cassandra.runQuery(q.query, q.parameters, callback);
};
