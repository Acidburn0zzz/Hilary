/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var AuthzUtil = require('oae-authz/lib/util');
var OaeUtil = require('oae-util/lib/util');
var ResourceActions = require('oae-resource/lib/actions');
var ResourceConstants = require('oae-resource/lib/constants').ResourceConstants;

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/dao');
var ContentMembersLibrary = require('oae-content/lib/internal/memberLibrary');

var log = require('oae-logger').logger('oae-content-invitations')

ResourceActions.on(ResourceConstants.events.INVITATION_ACCEPTED, function(ctx, invitationHashes, changesByResourceId) {
    var changesByContentId = {};
    _.chain(changesByResourceId)
        .keys()
        .filter(_isContentId)
        .each(function(contentId) {
            changesByContentId[contentId] = changesByResourceId[contentId];
        })
        .value();
    if (_.isEmpty(changesByContentId)) {
        return;
    }

    ContentDAO.Content.getMultipleContentItems(_.keys(changesByContentId), null, function(err, contentItems) {
        if (err) {
            return log().warn({
                'err': err,
                'contentIds': _.keys(changesByContentId)
            }, 'An error occurred while fetching content items to update libraries after an invitation was accepted');
        }

        _.each(contentItems, function(contentItem) {
            var changes = changesByResourceId[contentItem.id];
            var addedIds = _.pluck(changes.members.added, 'id');
            var updatedIds = _.pluck(changes.members.updated, 'id');

            ContentDAO.Content.updateContentLibraries(contentItem, [], function(err) {
                if (err) {
                    // If there was an error updating libraries here, the permissions were still changed, so we should not return an error. Just log it.
                    log().warn({
                        'err': err,
                        'content': contentItem
                    }, 'Failed to update user libraries after updating content permissions');
                }

                // If setting the content permissions results in any new members, we should insert them into the content members library
                OaeUtil.invokeIfNecessary((!_.isEmpty(addedIds)), ContentMembersLibrary.insert, contentItem, changes.members.added, function(err) {
                    if (err) {
                        log().warn({
                            'err': err,
                            'contentId': contentItem.id,
                            'principalIds': addedIds
                        }, 'An error occurred while inserting principals into content members library while setting content permissions');
                    }

                    return ContentAPI.emit(ContentConstants.events.UPDATED_CONTENT_MEMBERS, ctx, contentItem, changes.changes, addedIds, updatedIds, []);
                });
            });
        });
    });
});

var _isContentId = function(contentId) {
    return (AuthzUtil.isResourceId(contentId) && contentId.indexOf('c:') === 0);
};
