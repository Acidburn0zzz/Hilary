/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var AuthzUtil = require('oae-authz/lib/util');
var ResourceActions = require('oae-resource/lib/actions');
var ResourceConstants = require('oae-resource/lib/constants').ResourceConstants;

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var ContentDAO = require('oae-content/lib/internal/dao');

var log = require('oae-logger').logger('oae-content-invitations')

ResourceActions.when(ResourceConstants.events.ACCEPTED_INVITATION, function(ctx, invitationHashes, memberChangeInfosByResourceId, callback) {
    var memberChangeInfosByContentId = {};
    _.chain(memberChangeInfosByResourceId)
        .keys()
        .filter(_isContentId)
        .each(function(contentId) {
            memberChangeInfosByContentId[contentId] = memberChangeInfosByResourceId[contentId];
        })
        .value();
    if (_.isEmpty(memberChangeInfosByContentId)) {
        return callback();
    }

    ContentDAO.Content.getMultipleContentItems(_.keys(memberChangeInfosByContentId), null, function(err, contentItems) {
        if (err) {
            log().warn({
                'err': err,
                'contentIds': _.keys(memberChangeInfosByContentId)
            }, 'An error occurred while fetching content items to update libraries after an invitation was accepted');
            return callback();
        }

        // Invoke the "accept invitation" handler with the resources when we have them
        callback(null, contentItems);

        // Invoke the updated content members event for each content item that the current user was
        // added to
        _.each(contentItems, function(contentItem) {
            var memberChangeInfo = memberChangeInfosByResourceId[contentItem.id];
            if (_.isEmpty(memberChangeInfo.changes)) {
                return;
            }

            return ContentAPI.emit(ContentConstants.events.UPDATED_CONTENT_MEMBERS, ctx, contentItem, memberChangeInfo);
        });
    });
});

var _isContentId = function(contentId) {
    return (AuthzUtil.isResourceId(contentId) && contentId.indexOf('c:') === 0);
};
