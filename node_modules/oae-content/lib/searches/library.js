/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var Validator = require('oae-util/lib/validator').Validator;

var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var log = require('oae-logger').logger('oae-search-general');

/**
 * Search that searches a user's library
 *
 * @param   {Context}       ctx                 The context of the current request
 * @param   {Object}        opts                General search options
 * @param   {String}        opts.principalId    The principal whose library to search
 * @param   {Function}      callback            Invoked when the process completes
 * @param   {Object}        callback.err        An error that occurred, if any
 * @param   {SearchResult}  callback.results    An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // sanitize the search options
    opts = opts || {};
    opts = {
        'principalId': opts.params[0],
        'q': SearchUtil.getQueryParam(opts.q),
        'limit': isNaN(opts.limit) ? 10 : opts.limit,
        'start': isNaN(opts.start) ? 0 : opts.start,
        'sort': SearchUtil.getSortParam(opts.sort)
    }

    var validator = new Validator();
    validator.check(opts.principalId, {'code': 400, 'msg': 'Must specificy an id of a user or group to search'}).notEmpty();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    _search(ctx, opts, callback);
};

/**
 * Perform the search that searches a user or group's library for content.
 *
 * @param   {Context}       ctx                 The context of the current request
 * @param   {Object}        opts                General search options
 * @param   {Function}      callback            Invoked when the process completes
 * @param   {Object}        callback.err        An error that occurred, if any
 * @param   {SearchResult}  callback.results    An object that represents the results of the query
 */
var _search = function(ctx, opts, callback) {
    var data = {};

    // the query object for the Query DSL
    // if we're searching "all", we need to use a query_string query (as it supports the wildcard).
    // if we aren't searching for all, then we should use a match query to avoid errors in invalid query_string syntax
    var query = SearchUtil.createQueryStringQuery('general', opts.q);

    // the filter object for the Query DSL
    var filter = null;
    var typeFilter = SearchUtil.filterTerm('_type', SearchConstants.resourceMappingName);

    // the access filter will filter by content that is directly associated to the principal
    var principalFilter = SearchUtil.filterTerm('access', opts.principalId);

    if (ctx.user() && ctx.user().isGlobalAdmin()) {
        // if they're global admin, they can see all of the principals library always
        filter = SearchUtil.filterAnd(typeFilter, principalFilter);
    } else if (ctx.user() && ctx.user().isTenantAdmin(ctx.tenant().alias)) {
        // if the user is the tenant admin, query everything only for their tenant, and apply regular "logged in user" filters
        // on other content.
        filter = SearchUtil.filterAnd(
            typeFilter,
            principalFilter,
            SearchUtil.filterOr(
                SearchUtil.filterTerm('tenantId', ctx.tenant().alias),
                SearchUtil.filterTerms('visibility', ['public'])
            )
        );
    } else if (ctx.user()) {
        // if user is authenticated, query for public content, and loggedin that belongs to the user's tenant
        filter = SearchUtil.filterAnd(
            typeFilter,
            principalFilter,
            SearchUtil.filterOr(
                SearchUtil.filterTerm('visibility', 'public'),
                SearchUtil.filterAnd(
                    SearchUtil.filterTerm('tenantId', ctx.user().tenant),
                    SearchUtil.filterTerms('visibility', ['loggedin'])
                )
            )
        );
    } else {
        // for anonymous users, only show public content
        filter = SearchUtil.filterAnd(
            typeFilter,
            principalFilter,
            SearchUtil.filterTerm('visibility', 'public')
        );
    }

    // wrap the query and filter into the top-level Query DSL "query" object
    data = SearchUtil.createQuery(query, filter, {
        'from': opts.from,
        'size': opts.limit,
        'sort': {
            // this 'sort' key is the name of the field that we're sorting on
            'sort': opts.sort
        }
    });

    callback(null, data);
};
