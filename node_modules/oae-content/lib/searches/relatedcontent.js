/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var TenantsUtil = require('oae-tenants/lib/util');

var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var BOOST_FACTORS = {
    'THUMBNAIL': '1.5',
    'DESCRIPTION': '1.1',
    'CREATED_BY': '1.1'
};

/**
 * A search that searches for related content items to a specified content item.
 * This will mostly happen on account of the displayName.
 * Content items who have a thumbnail or a description or are also created by the creator of the base piece of content will get boosted.
 * By default this feed only returns 5 items.
 *
 * @param  {Context}       ctx                     The context of the current request
 * @param  {Object}        [opts]                  General search options
 * @param  {String}        [opts.includeExternal]  Whether or not to include content from other tenants ('true' or 'false') (Default: 'false')
 * @param  {Function}      callback                Invoked when the process completes
 * @param  {Object}        callback.err            An error that occurred, if any
 * @param  {SearchResult}  callback.results        An object that represents the results of the query
 */
module.exports = function(ctx, opts, callback) {
    // Sanitize custom search options
    opts = opts || {};
    opts.includeExternal = (opts.includeExternal === 'true');
    opts.limit = 5;

    var contentId = (opts.pathParams && opts.pathParams.length > 0) ? opts.pathParams[0] : null;

    // Validate that we have access to this content item and retrieve the display name.
    ContentAPI.getContent(ctx, contentId, function(err, contentObj) {
        if (err) {
            return callback(err);
        }

        // The query object for the Query DSL
        var query = _createQuery(contentObj);

        // The filter object for the Query DSL
        var filter = null;

        // We're searching for documents of type `resource` and resourceType `content`.
        var typeFilter = SearchUtil.filterTerm('_type', SearchConstants.resourceMappingName);
        var resourceTypeFilter = SearchUtil.filterTerm('resourceType', SearchConstants.general.RESOURCE_TYPE_CONTENT);

        // This base filter gets applied to the query unconditionally.
        var baseFilter = SearchUtil.filterAnd(typeFilter, resourceTypeFilter);

        if (ctx.user() && ctx.user().isGlobalAdmin()) {
            // If user is global admin, forget filtering by members and visibility, just query *everything*
            filter = baseFilter;
        } else if (ctx.user()) {
            // The user is authenticated

            // If we are including external resources, we will need to know the tenants for which we can interact
            var interactingTenantAliases = TenantsUtil.getAllTenantsForInteraction(ctx.tenant().alias);

            filter = SearchUtil.filterAnd(
                baseFilter,
                SearchUtil.filterAnd(

                    // I will only get resources from my own tenant if I have not specified to include external
                    SearchUtil.filterOr(
                        SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                        (opts.includeExternal && interactingTenantAliases.length > 0) ? SearchUtil.filterTerms('tenantAlias', interactingTenantAliases) : null
                    ),

                    // This or statement applies visibility restrictions
                    SearchUtil.filterOr(

                        // I can see all public resources
                        SearchUtil.filterTerm('visibility', 'public'),

                        // I can only see loggedin resources from my own tenant
                        SearchUtil.filterAnd(
                            SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias),
                            SearchUtil.filterTerm('visibility', 'loggedin')
                        )
                    )
                )
            );
        } else {
            // for anonymous users, only show public resources
            filter = SearchUtil.filterAnd(
                baseFilter,

                // limit to the current tenant unless specified otherwise
                (!opts.includeExternal) ? SearchUtil.filterTerm('tenantAlias', ctx.tenant().alias) : null,

                // resources must be public
                SearchUtil.filterTerm('visibility', 'public')
            );
        }

        // wrap the query and filter into the top-level Query DSL "query" object
        return callback(null, SearchUtil.createQuery(query, filter, opts));
    });
};

/**
 * Creates a query where documents must be similar to the passed in piece of content.
 * Documents who have a description and/or thumbnail are boosted.
 * Documents who are created by the same creator will also be boosted.
 *
 * @param  {Object} content     The content object
 * @return {Object}             The appropriate ElasticSearch query.
 * @api private
 */
var _createQuery = function(content) {
    return {
        'custom_filters_score': {
            'query': {
                'bool': {
                    'must': SearchUtil.createMoreLikeThisQuery(content.displayName),
                    'must_not': SearchUtil.filterIds([content.id]),
                    'boost': 500
                }
            },
            'filters': [{
                'filter': SearchUtil.filterExists('description'),
                'boost': BOOST_FACTORS.DESCRIPTION
            }, {
                'filter': SearchUtil.filterExists('thumbnailUrl'),
                'boost': BOOST_FACTORS.THUMBNAIL
            }, {
                'filter': SearchUtil.filterMembers([content.createdBy]),
                'boost': BOOST_FACTORS.CREATED_BY
            }],
            'score_mode': 'total'
        }
    };
};
