/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var PrincipalsUtil = require('oae-principals/lib/util');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;

var createPersistentContentActivityEntity = module.exports.createPersistentContentActivityEntity = function(content) {
    var persistentEntity = {'objectType': 'content', 'content': content};
    persistentEntity[ActivityConstants.properties.OAE_ID] = content.contentId;
    return persistentEntity;
};

var transformPersistentContentActivityEntity = module.exports.transformPersistentContentActivityEntity = function(ctx, content) {
    var tenant = ctx.tenant();

    var httpHost = 'http://' + tenant.host;
    var globalId = httpHost + '/api/content/' + content.contentId;
    var profileUrl = httpHost + '/content/' + content.contentId;

    var opts = {};
    // TODO: Change this to content.displayName when Issue #284 is merged
    opts.displayName = content.name;
    opts.url = profileUrl;

    // TODO: Use previews when it is merged.
    opts.image = new ActivityModel.ActivityMediaLink('local://2012/11/28/17/image/to/come.png', 35, 35);

    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = content.contentId;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = content.visibility;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_TYPE] = content.contentType;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_MIMETYPE] = content.mimeType;

    return new ActivityModel.ActivityEntity('content', globalId, opts);
};

var createPersistentCommentActivityEntity = module.exports.createPersistentCommentActivityEntity = function(content, comment, context) {
    comment.visibility = content.visibility;
    var persistentEntity = {
        'objectType': 'content-comment',
        'comment': comment,
        'commentContext': context
    };
    persistentEntity[ActivityConstants.properties.OAE_ID] = comment.commentId;
    return persistentEntity;
};

/**
 * Create a comment activity entity that can be used in an activity stream.
 *
 * @param   {Tenant}            tenant      The tenant of the comment
 * @param   {Content}           content     The parent content object of the comment
 * @param   {Comment}           comment     The comment object
 * @return  {ActivityEntity}                The activity entity that represents the given comment data
 */
var transformPersistentCommentActivityEntity = module.exports.transformPersistentCommentActivityEntity = function(ctx, comment, context) {
    var tenant = ctx.tenant();
    var entity = _transformCommentActivityEntity(ctx, comment);

    // Transform all the comment siblings in context, if any
    if (context.siblings && context.siblings.length > 0) {
        var siblings = [];
        context.siblings.forEach(function(sibling) {
            siblings.push(_transformCommentActivityEntity(ctx, sibling));
        });
        entity[ContentConstants.activity.PROP_OAE_COMMENT_SIBLINGS] = siblings;
    }

    // Transform the parent if there is one
    if (context.parent) {
        entity[ContentConstants.activity.PROP_OAE_COMMENT_REPLY_TO] = _transformCommentActivityEntity(ctx, context.parent);
    }

    // Transform the parent's siblings in context, if any
    if (context.parentSiblings && context.parentSiblings.length > 0) {
        var parentSiblings = [];
        context.parentSiblings.forEach(function(parentSibling) {
            parentSiblings.push(_transformCommentActivityEntity(ctx, parentSibling));
        });
        entity[ContentConstants.activity.PROP_OAE_COMMENT_REPLY_TO_SIBLINGS] = parentSiblings;
    }

    return entity;
};
 
var _transformCommentActivityEntity = function(ctx, comment) {
    var tenant = ctx.tenant();
    var httpHost = 'http://' + tenant.host;
    var globalId = httpHost + '/api/content/' + comment.contentId + '/comments/' + comment.commentId;
    var commentUrl = httpHost + '/content/' + comment.contentId;

    var opts = {};
    opts.url = commentUrl;
    opts.content = comment.body;

    opts.author = PrincipalsUtil.transformPersistentUserActivityEntity(ctx, comment.createdBy.id, comment.createdBy);
    opts.published = comment.created;

    opts.ext = {};
    opts.ext[ActivityConstants.properties.OAE_ID] = comment.commentId;
    opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = comment.visibility;
    opts.ext[ContentConstants.activity.PROP_OAE_CONTENT_ID] = comment.contentId;

    // TODO: When the threaded representation of the comment is changed to store the plain timestamp in `comment.created`, this should be
    // changed to represent the thread hierarchy. e.g., 123456780#123456780|
    opts.ext[ContentConstants.activity.PROP_OAE_COMMENT_THREAD_KEY] = comment.created;

    return new ActivityModel.ActivityEntity('content-comment', globalId, opts);
};



