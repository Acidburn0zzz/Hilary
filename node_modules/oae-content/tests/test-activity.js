/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var assert = require('assert');
var fs = require('fs');

var log = require('oae-logger').logger('test-activity');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

describe('Content Activity', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        callback();
    });

    var _getActivity = function(activityStream, activityType, entityType, entityOaeId) {
        if (!activityStream || !activityStream.items) {
            return null;
        }

        for (var i = 0; i < activityStream.items.length; i++) {
            var activity = activityStream.items[i];
            if (activity['oae:activityType'] === activityType && activity[entityType] && activity[entityType]['oae:id'] === entityOaeId) {
                return activity;
            }
        }
        return null;
    };

    /**
     * @return {Stream}     A stream that points to sakaiger that can be uploaded.
     */
    var getFileStream = function() {
        var file = __dirname + '/data/sakaiger.png';
        return fs.createReadStream(file);
    };

    /**
     * @return {Stream}     A stream that points to the sakai logo that can be uploaded.
     */
    var getSakaiLogoStream = function() {
        var file = __dirname + '/data/sakai-logo.png';
        return fs.createReadStream(file);
    };


    describe('Routes', function() {

        /**
         * Test that verifies a content resource routes activities to its members when created, updated and shared
         */
        it('verify routing to content members', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var managerGroupAlias = TestsUtil.generateTestUserId('managerGroup');
            var viewerGroupAlias = TestsUtil.generateTestUserId('viewerGroup');
            var managerGroupMemberUsername = TestsUtil.generateTestUserId('managerGroupMember');

            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Jane', null, function(err, jane) {
                    assert.ok(!err);

                    RestAPI.User.createUser(camAdminRestContext, managerGroupMemberUsername, 'password', 'Jane', null, function(err, managerGroupMember) {
                        assert.ok(!err);

                        // Create the group that will be a viewer of the content
                        RestAPI.Group.createGroup(camAdminRestContext, viewerGroupAlias, viewerGroupAlias, viewerGroupAlias, 'public', 'no', [], [], function(err, viewerGroup) {
                            assert.ok(!err);

                            // Create a group that will be a manager of the content
                            RestAPI.Group.createGroup(camAdminRestContext, managerGroupAlias, managerGroupAlias, managerGroupAlias, 'public', 'no', [], [], function(err, managerGroup) {
                                assert.ok(!err);

                                // managerGroupMember should be a member of the manager group to verify indirect group member routing
                                var membership = {};
                                membership[managerGroupMember.id] = 'manager';
                                RestAPI.Group.setGroupMembers(camAdminRestContext, managerGroup.id, membership, function(err) {
                                    assert.ok(!err);

                                    // Create a content item with manager group and viewer group as members.
                                    RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [managerGroup.id], [viewerGroup.id], function(err, link) {
                                        assert.ok(!err);

                                        // Share the content item with jane
                                        RestAPI.Content.shareContent(jackCtx, link.contentId, [jane.id], function(err) {
                                            assert.ok(!err);

                                            // Update the content item
                                            RestAPI.Content.updateContent(jackCtx, link.contentId, {'description': 'Super awesome link'}, function(err) {
                                                assert.ok(!err);

                                                // Verify Jack got the create, share and update as he was the actor for all of them
                                                RestAPI.Activity.getActivityStream(jackCtx, jack.id, null, function(err, activityStream) {
                                                    assert.ok(!err);
                                                    assert.ok(_getActivity(activityStream, 'content-create', 'object', link.contentId));
                                                    assert.ok(_getActivity(activityStream, 'content-share', 'target', jane.id));
                                                    assert.ok(_getActivity(activityStream, 'content-update', 'object', link.contentId));
                                                    
                                                    // Verify the manager group received the create, share and update as they are a content member
                                                    RestAPI.Activity.getActivityStream(camAdminRestContext, managerGroup.id, null, function(err, activityStream) {
                                                        assert.ok(!err);
                                                        assert.ok(_getActivity(activityStream, 'content-create', 'object', link.contentId));
                                                        assert.ok(_getActivity(activityStream, 'content-share', 'target', jane.id));
                                                        assert.ok(_getActivity(activityStream, 'content-update', 'object', link.contentId));

                                                        // Verify the viewer group received only the create and update. only managers care about the sharing of the "object"
                                                        RestAPI.Activity.getActivityStream(camAdminRestContext, viewerGroup.id, null, function(err, activityStream) {
                                                            assert.ok(!err);
                                                            assert.ok(_getActivity(activityStream, 'content-create', 'object', link.contentId));
                                                            assert.ok(!_getActivity(activityStream, 'content-share', 'target', jane.id));
                                                            assert.ok(_getActivity(activityStream, 'content-update', 'object', link.contentId));

                                                            // Verify the manager group *member* got the same activities as the manager group, as they are a member
                                                            RestAPI.Activity.getActivityStream(camAdminRestContext, managerGroupMember.id, null, function(err, activityStream) {
                                                                assert.ok(!err);
                                                                assert.ok(_getActivity(activityStream, 'content-create', 'object', link.contentId));
                                                                assert.ok(_getActivity(activityStream, 'content-share', 'target', jane.id));
                                                                assert.ok(_getActivity(activityStream, 'content-update', 'object', link.contentId));
                                                                callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Activity Entity Models', function() {

        /**
         * Test that verifies the properties of the content entity
         */
        it('verify the content entity model contains the correct content information', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Generate an activity with the content
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                    assert.ok(!err);

                    RestAPI.Activity.getActivityStream(jackCtx, jack.id, null, function(err, activityStream) {
                        assert.ok(!err);
                        assert.equal(activityStream.items[0].object['oae:visibility'], 'public');
                        assert.equal(activityStream.items[0].object['oae:contentType'], 'link');
                        assert.equal(activityStream.items[0].object['displayName'], 'Google');
                        assert.equal(activityStream.items[0].object['objectType'], 'content');
                        assert.equal(activityStream.items[0].object['oae:id'], link.contentId);
                        assert.ok(activityStream.items[0].object['url'].indexOf(link.contentId) !== -1);
                        assert.ok(activityStream.items[0].object['id'].indexOf(link.contentId) !== -1);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies the properties of a comment entity
         */
        it('verify the comment entity model contains the correct comment information', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Generate an activity with the content
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                    assert.ok(!err);

                    RestAPI.Content.createComment(jackCtx, link.contentId, 'How do you <strong>SEARCH</strong> on this thing???', null, function(err) {
                        assert.ok(!err);

                        RestAPI.Activity.getActivityStream(jackCtx, jack.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            var activity = _getActivity(activityStream, 'content-comment', 'target', link.contentId);
                            assert.ok(activity);
                            assert.equal(activity.object['oae:visibility'], 'public');
                            assert.equal(activity.object['objectType'], 'content-comment');
                            assert.equal(activity.object['content'], 'How do you <strong>SEARCH</strong> on this thing???');
                            // TODO: When the feature to return the comment on creation gets merged in, compare actual ID values here
                            assert.ok(activity.object['oae:id']);
                            assert.ok(activity.object['url'].indexOf(link.contentId) !== -1);
                            assert.ok(activity.object['id'].indexOf('/comments/') !== -1);
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('Posting Activities', function() {

        /**
         * Test that verifies that a content-create and content-update activity are generated when a content item is created and updated.
         */
        it('verify a content-create activity is posted when content is created and updated', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Generate an activity with the content
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                    assert.ok(!err);

                    RestAPI.Content.updateContent(jackCtx, link.contentId, {'description': 'Super awesome link'}, function(err) {
                        assert.ok(!err);

                        RestAPI.Activity.getActivityStream(jackCtx, jack.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            var createActivity = _getActivity(activityStream, 'content-create', 'object', link.contentId);
                            var updateActivity = _getActivity(activityStream, 'content-update', 'object', link.contentId);
                            assert.ok(createActivity);
                            assert.equal(createActivity.verb, 'create');
                            assert.ok(updateActivity);
                            assert.equal(updateActivity.verb, 'update');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a content-share activity is generated when a content item is shared.
         */
        it('verifies a content-share activity is generated when a content item is shared', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);

                RestAPI.Content.createLink(camAdminRestContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                    assert.ok(!err);

                    // Try and generate a share activity
                    RestAPI.Content.shareContent(camAdminRestContext, link.contentId, [jack.id], function(err) {
                        assert.ok(!err);

                        RestAPI.Activity.getActivityStream(camAdminRestContext, jack.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            var shareActivity = _getActivity(activityStream, 'content-share', 'object', link.contentId);
                            assert.ok(shareActivity);
                            assert.equal(shareActivity.verb, 'share');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a content-revision activity is generated when a content item's body has been updated / uploaded.
         */
        it('verifies a content-revision activity is generated when a content item\'s body has been updated', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Create a revisable content item
                RestAPI.Content.createFile(jackCtx, 'Test Content 1', 'Test content description 1', 'private', getFileStream,  [], [], function(err, content) {
                    assert.ok(!err);
                    assert.ok(content);

                    // Create a new version
                    RestAPI.Content.updateFileBody(jackCtx, content.contentId, getSakaiLogoStream, function(err) {
                        assert.ok(!err);

                        // Verify the revision activity was created for jack
                        RestAPI.Activity.getActivityStream(camAdminRestContext, jack.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            var revisionActivity = _getActivity(activityStream, 'content-revision', 'object', content.contentId);
                            assert.ok(revisionActivity);
                            assert.equal(revisionActivity.verb, 'update');

                            // Also verify that a content-update activity *doesn't* get generated. no one will want to see both a revision and a meta-data update
                            assert.ok(!_getActivity(activityStream, 'content-update', 'object', content.contentId));

                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a content-add-to-library activity is generated when a user adds a content item to their own library
         */
        it('verifies a content-add-to-library activity is generated when a user adds a content item to their own library', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                RestAPI.Content.createLink(camAdminRestContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, link) {
                    assert.ok(!err);

                    // Jack adds the content item to his own library
                    RestAPI.Content.shareContent(jackCtx, link.contentId, [jack.id], function(err) {
                        assert.ok(!err);

                        RestAPI.Activity.getActivityStream(camAdminRestContext, jack.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            var addActivity = _getActivity(activityStream, 'content-add-to-library', 'object', link.contentId);
                            assert.ok(addActivity);
                            assert.equal(addActivity.verb, 'add');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a content-update-visibility activity is generated when a content's visibility is updated
         */
        it('verifies a content-update-visibility activity is generated when a content\'s visibility is updated', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                RestAPI.Content.createLink(camAdminRestContext, 'Google', 'Google', 'public', 'http://www.google.ca', [], [jack.id], function(err, link) {
                    assert.ok(!err);

                    // Jack adds the content item to his own library
                    RestAPI.Content.updateContent(camAdminRestContext, link.contentId, {'visibility': 'private'}, function(err) {
                        assert.ok(!err);

                        RestAPI.Activity.getActivityStream(camAdminRestContext, jack.id, null, function(err, activityStream) {
                            assert.ok(!err);
                            var updateVisibilityActivity = _getActivity(activityStream, 'content-update-visibility', 'object', link.contentId);
                            assert.ok(updateVisibilityActivity);
                            assert.equal(updateVisibilityActivity.verb, 'update');
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('Activity Aggregation', function() {

        /**
         * Test that verifies that when multiple content-create activities are done by the same actor, the content items get
         * aggregated into a collection.
         */
        it('verifies content-create activities are pivoted by actor', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');

            // Create Jack, the user whose will create content items
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Create a google link
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, googleLink) {
                    assert.ok(!err);

                    // Create a Yahoo link
                    RestAPI.Content.createLink(jackCtx, 'Yahoo!', 'Yahoo!', 'public', 'http://www.yahoo.ca', [], [], function(err, yahooLink) {
                        assert.ok(!err);

                        // Verify the activities were aggregated into one, pivoted by actor
                        RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                            assert.ok(!err);
                            assert.ok(activityStream);
                            assert.equal(activityStream.items.length, 1);

                            var aggregate = _getActivity(activityStream, 'content-create', 'actor', jack.id);
                            assert.ok(aggregate.object);
                            assert.ok(aggregate.object['oae:collection']);
                            assert.equal(aggregate.object['oae:collection'].length, 2);

                            if (aggregate.object['oae:collection'][0]['oae:id'] === googleLink.contentId && aggregate.object['oae:collection'][1]['oae:id'] === yahooLink.contentId) {
                                // Don't fail, we want one to be google and the other to be yahoo
                            } else if (aggregate.object['oae:collection'][0]['oae:id'] === yahooLink.contentId && aggregate.object['oae:collection'][1]['oae:id'] === googleLink.contentId) {
                                // Don't fail, we want one to be google and the other to be yahoo
                            } else {
                                assert.fail('Expected the collection of created content items to be one yahoo link and one google link.');
                            }

                            callback();
                        });
                    });
                });
            });
        });

    
        /**
         * Test that verifies when a content create activity is aggregated and re-delivered, the activity that it is replacing is
         * deleted properly
         */
        it('verifies when a content-create activity is redelivered, it deletes the previous one', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');

            // Create Jack, the user whose will create content items
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Create a google link
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, googleLink) {
                    assert.ok(!err);

                    // Force a collection of activities so that the individual activity is delivered
                    RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                        assert.ok(!err);
                        assert.ok(activityStream);
                        assert.ok(activityStream.items.length, 1);

                        // Create a Yahoo link
                        RestAPI.Content.createLink(jackCtx, 'Yahoo!', 'Yahoo!', 'public', 'http://www.yahoo.ca', [], [], function(err, yahooLink) {
                            assert.ok(!err);

                            // Collect again and ensure we still only have one activity
                            RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                                assert.ok(!err);
                                assert.ok(activityStream);
                                assert.ok(activityStream.items.length, 1);

                                // Rinse and repeat once to ensure that the aggregates are removed properly as well
                                RestAPI.Content.createLink(jackCtx, 'Apereo!', 'Apereo!', 'public', 'http://www.apereo.org', [], [], function(err, apereoLink) {
                                    assert.ok(!err);

                                    // Collect again and ensure we still only have one activity
                                    RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                                        assert.ok(!err);
                                        assert.ok(activityStream);
                                        assert.ok(activityStream.items.length, 1);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies when a content item is updated multiple times, the actors that updated it are aggregated into a collection.
         */
        it('verifies content-update activities are pivoted by object', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');

            // Create Jack, the user whose will create content items
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Create a google link
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, googleLink) {
                    assert.ok(!err);

                    // Update the content once as jack
                    RestAPI.Content.updateContent(jackCtx, googleLink.contentId, {'name': 'The Google'}, function(err) {
                        assert.ok(!err);

                        // Update it a second time as jack, we use this to make sure we don't get duplicates in the aggregation
                        RestAPI.Content.updateContent(jackCtx, googleLink.contentId, {'name': 'Google'}, function(err) {
                            assert.ok(!err);

                            // Update it with a different user, this should be a second entry in the collection
                            RestAPI.Content.updateContent(camAdminRestContext, googleLink.contentId, {'name': 'Google'}, function(err) {
                                assert.ok(!err);

                                // Verify we get the 2 actors in the stream
                                RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                                    assert.ok(!err);
                                    assert.ok(activityStream);
                                    
                                    var activity = activityStream.items[0];
                                    assert.ok(activity);
                                    assert.equal(activity['oae:activityType'], 'content-update');

                                    var actors = activity.actor['oae:collection'];
                                    assert.ok(actors);
                                    assert.equal(actors.length, 2);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies two duplicate content updates do not result in an aggregation, but simply an activity with an updated
         * timestamp.
         */
        it('verifies duplicate content-update activities are re-released with a more recent date, with no aggregations', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');

            // Create Jack, the user whose will create content items
            RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                assert.ok(!err);
                var jackCtx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                // Create a google link
                RestAPI.Content.createLink(jackCtx, 'Google', 'Google', 'public', 'http://www.google.ca', [], [], function(err, googleLink) {
                    assert.ok(!err);

                    // Update the content once as jack
                    RestAPI.Content.updateContent(jackCtx, googleLink.contentId, {'name': 'The Google'}, function(err) {
                        assert.ok(!err);

                        // Add something to the activity feed that happened later than the previous update
                        RestAPI.Content.createLink(jackCtx, 'Yahoo!', 'Yahoo!', 'public', 'http://www.yahoo.ca', [], [], function(err, yahooLink) {
                            assert.ok(!err);

                            // Update it a second time as jack, we use this to make sure we don't get duplicates in the aggregation, and ensure the update jumps ahead of the last create activity in the feed
                            RestAPI.Content.updateContent(jackCtx, googleLink.contentId, {'name': 'Google'}, function(err) {
                                assert.ok(!err);

                                // Verify that the activity is still a non-aggregated activity, it just jumped to the front of the feed
                                RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                                    assert.ok(!err);
                                    assert.ok(activityStream);

                                    // One for the "content-create" aggregation, one for the "update content" duplicates
                                    assert.ok(activityStream.items.length, 2);

                                    // Ensures that the actor is not a collection, but still an individual entity
                                    var activity = activityStream.items[0];
                                    assert.equal(activity['oae:activityType'], 'content-update');
                                    assert.ok(activity.actor['oae:id'], jack.id);
                                    assert.ok(activity.object['oae:id'], googleLink.contentId);

                                    // Send a new activity into the feed so it is the most recent
                                    RestAPI.Content.createLink(jackCtx, 'Apereo', 'Apereo', 'public', 'http://www.apereo.org', [], [], function(err, apereoLink) {
                                        assert.ok(!err);

                                        // Force a collection so that the most recent activity is in the feed
                                        RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                                            assert.ok(!err);
                                            assert.ok(activityStream);
                                            assert.equal(activityStream.items.length, 2);

                                            // Jump the update activity to the top again
                                            RestAPI.Content.updateContent(jackCtx, googleLink.contentId, {'name': 'Google'}, function(err) {
                                                assert.ok(!err);

                                                // Verify update activity is at the top and still an individual activity
                                                RestAPI.Activity.getCurrentActivityStream(jackCtx, null, function(err, activityStream) {
                                                    assert.ok(activityStream);
                                                    assert.equal(activityStream.items.length, 2);

                                                    // content-update activity should be the first in the list, it should still be a single activity
                                                    var activity = activityStream.items[0];
                                                    assert.equal(activity['oae:activityType'], 'content-update');
                                                    assert.equal(activity.actor['oae:id'], jack.id);
                                                    assert.ok(activity.object['oae:id'], googleLink.contentId);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});

