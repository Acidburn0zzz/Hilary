/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var User = require('oae-principals/lib/model.user').User;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

// TODO
//var Tenant = require('oae-tenants/lib/model').Tenant;
//var Group = require('oae-principals/lib/model.group').Group;
//var PrincipalsAPI = require('oae-principals');
//var Context = require('oae-context').Context;
//var ContentAPI = require('oae-content');
//var Content = require('oae-content/lib/model').Content;
//var AuthzAPI = require('oae-authz');


describe('Content', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and tenant admin REST context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.getAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Log in the global admin so his cookie jar is set up appropriately
        RestAPI.User.getMe(camAdminRestContext, function(err, meObj) {
            callback();
        });
    });


    /**
     * Create a number of users that will be used inside of a test
     * @param  {Function(contexts)}  callback           Standard callback function
     * @param  {Object}              callback.contexts  Object where the keys are identifiers for the created users and the values are an
     *                                                  object with a user key containing the user object for the created user and a restContext key
     *                                                  containing the REST Context for that user
     */
    var setUpUsers = function(callback) {
        var contexts = {};
        var createUser = function(identifier, visibility, firstName, lastName, displayName) {
            var userId = TestsUtil.generateTestUserId(identifier);
            RestAPI.User.createUser(camAdminRestContext, userId, 'password', visibility, 'en_GB', 'Europe/London', firstName, lastName, displayName, function(err, createdUser) {
                if (err) {
                    assert.fail('Could not create test user');
                }
                contexts[identifier] = {
                    'user': createdUser,
                    'restContext': new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password')
                }
                if (_.keys(contexts).length === 6) {
                    callback(contexts);
                }
            });
        };
        
        createUser('nicolaas', 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs');
        createUser('simon', 'loggedin', 'Simon', 'Gaeremynck', 'Simon Gaeremynck');
        createUser('bert', 'private', 'Bert', 'Pareyn', 'Bert Pareyn');
        createUser('branden', 'private', 'Branden', 'Visser', 'Branden Visser');
        createUser('anthony', 'public', 'Anthony', 'Whyte', 'Anthony Whyte');
        createUser('stuart', 'public', 'Stuart', 'Freeman', 'Stuart Freeman');
    };

    /**
     * Create a number of groups that will be used inside of a test
     * @param  {Array<Context>}      contexts           Array of contexts that represent the users that will be used in the test
     * @param  {Function(groups)}    callback           Standard callback function
     * @param  {Array<Group>}        callback.groups    Array of group objects that have been created
     * 
     var setUpGroups = function(contexts, callback) {
        var r = Math.floor(Math.random() * 10000);
        var groups = [new Group(contexts['nicolaas'].tenant(), null, 'ui-team-' + r, 'UI Dev Team ' + r, 'UI Dev Group', 'public', 'yes'),
                      new Group(contexts['branden'].tenant(), null, 'backend-team-' + r, 'Back-end Dev Team ' + r, 'Back-end Dev Group', 'public', 'yes'),
                      new Group(contexts['anthony'].tenant(), null, 'oae-team-' + r, 'OAE Team ' + r, 'OAE Team Group', 'public', 'yes')];
        // Create UI Dev Group
        // Make Bert a member
        var bertMember = {};
        bertMember[contexts['bert'].user().id] = 'manager';
        PrincipalsAPI.createGroup(contexts['nicolaas'].restContext, groups[0].alias, groups[0].name, groups[0].description, 'public', 'yes', bertMember, {}, function(err, principalId) {
            groups[0].id = principalId;
            // Create Back-end Dev Group
            // Make Simon a member
            var simonMember = {};
            simonMember[contexts['simon'].user().id] = 'member';
            PrincipalsAPI.createGroup(contexts['branden'], groups[1].alias, groups[1].name, groups[1].description, 'public', 'yes', simonMember, {}, function(err, principalId) {
                groups[1].id = principalId;
                // Create OAE Team Group
                // Make Stuart, UI Dev Group and Back-end Dev Group all members
                var members = {};
                members[groups[1].id] = 'member';
                members[groups[0].id] = 'member';
                members[contexts['stuart'].user().id] = 'member';
                PrincipalsAPI.createGroup(contexts['anthony'], groups[2].alias, groups[2].name, groups[2].description, 'public', 'yes', members, {}, function(err, principalId) {
                    groups[2].id = principalId;
                    callback(groups);
                });
            });
        });
    }; */

    /**
     * Run a number of asserts on a piece of content. This function checks whether a user has access to the content and
     * whether or not it can be seen in the library of the creator
     * @param  {RestContext}        restCtx             Standard REST Context object that contains the current tenant URL and the current
     *                                                  user credentials
     * @param  {String}             creator             The user id for which we want to check the library
     * @param  {Content}            contentObj          The content object we'll be running checks for
     * @param  {Boolean}            expectAccess        Whether or not we expect the current user to have access to the piece of content
     * @param  {Boolean}            expectManager       Whether or not we expect the current user to be able to manage the piece of content
     * @param  {Boolean}            expectInLibrary     Whether or not we expect the current user to see the item in the creator's library
     * @param  {Function}           callback            Standard callback function executed when all checks have finished
     */
    var checkPieceOfContent = function(restCtx, libraryToCheck, contentObj, expectAccess, expectManager, expectInLibrary, callback) {
        // Check whether the content can be retrieved
        RestAPI.Content.getContent(restCtx, contentObj.contentId, function(err, retrievedContent) {
            if (expectAccess) {
                assert.ok(!err);
                assert.ok(retrievedContent.contentId);
                assert.equal(retrievedContent.tenant, contentObj.tenant);
                assert.equal(retrievedContent.visibility, contentObj.visibility);
                assert.equal(retrievedContent.name, contentObj.name);
                assert.equal(retrievedContent.description, contentObj.description);
                assert.equal(retrievedContent.contentType, contentObj.contentType);
                assert.equal(retrievedContent.createdBy.id, contentObj.createdBy);
                assert.equal(retrievedContent.created, contentObj.created);
                assert.ok(retrievedContent.lastModified);
                // Check if the canManage check is appropriate
                assert.equal(retrievedContent.isManager, expectManager);
            } else {
                assert.ok(err);
                assert.ok(!retrievedContent);
            }
            // Check if the item comes back in the library
            RestAPI.Content.getLibrary(restCtx, libraryToCheck, null, 10, function(err, contentItems) {
                // If no logged in user is provided, we expect an error
                if (!libraryToCheck) {
                    assert.ok(err);
                } else {
                    assert.ok(!err);
                    if (expectInLibrary) {
                        assert.equal(contentItems.results.length, 1);
                        assert.equal(contentItems.results[0].contentId, contentObj.contentId);
                    } else {
                        if (contentItems.results.length) {
                            console.log(restCtx);
                            console.log(libraryToCheck);
                            console.log(contentObj);
                        }
                        assert.equal(contentItems.results.length, 0);
                    }
                }
                callback();
            });
        });
    };

    describe('get content', function() {

        /** 
         * Test that will create a piece of content and try to get it in an invalid
         * and valid way
         */
        it('verify get content', function(callback) {
            setUpUsers(function(contexts) {
                // Create a piece of content
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/',  [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj);

                    // Get invalid piece of content
                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, null, function(err, retrievedContentObj) {
                        assert.ok(err);
                        assert.ok(!retrievedContentObj);

                        // Get the created piece of content
                        RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, retrievedContentObj) {
                            assert.ok(!err);
                            assert.equal(retrievedContentObj.contentId, contentObj.contentId);
                            callback();
                        });
                    });
                });
            });
        });

    });


    describe('create content', function() {
        
        /**
         * Test that will attempt to create new links with various parameter combinations
         */
        it('verify create link', function(callback) {
            setUpUsers(function(contexts) {
                // Create one as anon user
                RestAPI.Content.createLink(anonymousRestContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                    assert.ok(err);
                    assert.ok(!contentObj);

                    // Create one with all required fields
                    RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj.contentId);

                        // Create one without description
                        RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 3', null, 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            assert.ok(contentObj.contentId);

                            // Create one without URL
                            RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 4', 'Test content description 4', 'public', null, [], [], function(err, contentObj) {
                                assert.ok(err);
                                assert.ok(!contentObj);

                                // Create one without a valid URL
                                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 5', 'Test content description 5', 'public', 'Just a string', [], [], function(err, contentObj) {
                                    assert.ok(err);
                                    assert.ok(!contentObj);

                                    // Create one without title
                                    RestAPI.Content.createLink(contexts['nicolaas'].restContext, null, 'Test content description 6', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                                        assert.ok(err);
                                        assert.ok(!contentObj);

                                        // Create one without visibility
                                        RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 7', 'Test content description 7', null, 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                                            assert.ok(!err);
                                            assert.ok(contentObj.contentId);
                                            // Check if the visibility has been set to public (default)
                                            RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, contentObj) {
                                                assert.ok(!err);
                                                assert.equal(contentObj.visibility, 'public');
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create new files with various parameter combinations
         */
        it('verify create file', function(callback) {
            setUpUsers(function(contexts) {
                // Create one as anon user
                RestAPI.Content.createFile(anonymousRestContext, 'Test Content 1', 'Test content description 1', 'public', [], [], function(err, contentObj) {
                    assert.ok(err);
                    assert.ok(!contentObj);

                    // Create one with all required fields
                    RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'public', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj.contentId);

                        // Create one without description
                        RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 3', null, 'public', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            assert.ok(contentObj.contentId);

                            // Create one without title
                            RestAPI.Content.createFile(contexts['nicolaas'].restContext, null, 'Test content description 4', 'public', [], [], function(err, contentObj) {
                                assert.ok(err);
                                assert.ok(!contentObj);

                                // Create one without visibility
                                RestAPI.Content.createFile(contexts['nicolaas'].restContext, 'Test Content 5', 'Test content description 6', null, [], [], function(err, contentObj) {
                                    assert.ok(!err);
                                    assert.ok(contentObj.contentId);
                                    // Check if the visibility has been set to public (default)
                                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, contentObj) {
                                        assert.ok(!err);
                                        assert.equal(contentObj.visibility, 'public');
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * Test that will attempt to create new sakai docs with various parameter combinations
         */
        it('verify create sakai doc', function(callback) {
            setUpUsers(function(contexts) {
                // Create one as anon user
                RestAPI.Content.createSakaiDoc(anonymousRestContext, 'Test Content 1', 'Test content description 1', 'public', [], [], function(err, contentObj) {
                    assert.ok(err);
                    assert.ok(!contentObj);

                    // Create one with all required fields
                    RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, 'Test Content 2', 'Test content description 2', 'public', [], [], function(err, contentObj) {
                        assert.ok(!err);
                        assert.ok(contentObj.contentId);

                        // Create one without description
                        RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, 'Test Content 3', null, 'public', [], [], function(err, contentObj) {
                            assert.ok(!err);
                            assert.ok(contentObj.contentId);

                            // Create one without title
                            RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, null, 'Test content description 4', 'public', [], [], function(err, contentObj) {
                                assert.ok(err);
                                assert.ok(!contentObj);

                                // Create one without permission
                                RestAPI.Content.createSakaiDoc(contexts['nicolaas'].restContext, 'Test Content 5', 'Test content description 5', null, [], [], function(err, contentObj) {
                                    assert.ok(!err);
                                    assert.ok(contentObj.contentId);
                                    // Check if the permission has been set to public (default)
                                    RestAPI.Content.getContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err, contentObj) {
                                        assert.ok(!err);
                                        assert.equal(contentObj.visibility, 'public');
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a public content item and will verify direct and library access
         * for various people
         */
        it('verify create public content item', function(callback) {
            setUpUsers(function(contexts) {
                // Create a public content item
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as a different logged in user
                        checkPieceOfContent(contexts['simon'].restContext, contexts['nicolaas'].user.id, contentObj, true, false, true, function() {
                            // Get the piece of content as an anonymous user
                            checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, true, false, true, callback);
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a loggedin content item and will verify direct and library access
         * for various people
         */
        it('verify create logged in content item', function(callback) {
            setUpUsers(function(contexts) {
                // Create a logged in content item
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'loggedin', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as a different logged in user
                        checkPieceOfContent(contexts['simon'].restContext, contexts['nicolaas'].user.id, contentObj, true, false, true, function() {
                            // Get the piece of content as an anonymous user
                            checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                        });
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to create a private content item and will verify direct and library access
         * for various people
         */
        it('verify create private content item', function(callback) {
            setUpUsers(function(contexts) {
                // Create a private content item
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'private', 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as a different logged in user
                        checkPieceOfContent(contexts['simon'].restContext, contexts['nicolaas'].user.id, contentObj, false, false, false, function() {
                            // Get the piece of content as an anonymous user
                            checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                        });
                    });
                });
            });
        });
    
        /**
         * Test whether or not passing in viewers and managers to be added to the content upon creation works as expected. This test will
         * create a private piece of content that will have 1 additional manager and 1 viewer. We will fetch the content as those people
         * to verify access, and then get the content as a logged in user and an anonymous user to verify they don't have access
         */
        it('verify create content with default members', function(callback) {
            setUpUsers(function(contexts) {
                // Create a private content item and share with 2 people
                RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'private', 'http://www.sakaiproject.org/', [contexts['simon'].user.id], [contexts['bert'].user.id], function(err, contentObj) {   
                    assert.ok(!err);
                    assert.ok(contentObj.contentId);

                    // Get the piece of content as the person who created the content
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                        // Get the piece of content as another manager
                        checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, true, true, function() {
                            // Get the piece of content as a viewer
                            checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, true, false, true, function() {
                                // Get the piece of content as a non-member
                                checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, false, false, false, function() {
                                    // Get the piece of content as an anonymous user
                                    checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });

    
    describe('content permissions', function() {
    
        /**
         * Utility function that creates a piece of content, make a user a manager, make a user a viewer and test access for all of these as 
         * well as library content and the membership list of the content
         * @param  {Object}             contexts            Object where the keys are identifiers for the created users and the values are an
         *                                                  object with a user key containing the user object for the created user and a restContext key
         *                                                  containing the REST Context for that user
         * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
         * @param  {Function(content)}  callback            Standard callback function
         * @param  {Content}            callback.content    Content object that has been created as part of this test
         */
        var setUpContentPermissions = function(contexts, privacy, callback) {
            // Create a public content item
            RestAPI.Content.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', [], [], function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);

                // Get the piece of content as the person who created the content
                checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user.id, contentObj, true, true, true, function() {
                    // Check the list of content members
                    RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.results.length, 1);
                        // Morph results to hash for easy access.
                        var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                        assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');

                        // Try an invalid set permissions with no principals passed in
                        RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, {}, function(err) {
                            assert.ok(err);

                            // Make another user manager of the content
                            var permissions = {};
                            permissions[contexts['simon'].user.id] = 'manager';
                            RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                assert.ok(!err);
                                // Get the piece of content as the newly added manager
                                checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, true, true, true, function() {
                                    RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                        assert.ok(!err);
                                        assert.equal(members.results.length, 2);
                                        // Morph results to hash for easy access.
                                        var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                        assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                        assert.equal(hash[contexts['simon'].user.id][0].role, 'manager');

                                        // Make another user member of the content
                                        permissions = {};
                                        permissions[contexts['bert'].user.id] = 'viewer';
                                        RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                            assert.ok(!err);
                                            // Get the piece of content as the added member
                                            checkPieceOfContent(contexts['bert'].restContext, contexts['bert'].user.id, contentObj, true, false, true, function() {
                                                RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                    assert.ok(!err);
                                                    assert.equal(members.results.length, 3);
                                                    // Morph results to hash for easy access.
                                                    var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                                    assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                                    assert.equal(hash[contexts['simon'].user.id][0].role, 'manager');
                                                    assert.equal(hash[contexts['bert'].user.id][0].role, 'viewer');

                                                    // Try to add an existing and non-existing user
                                                    permissions = {};
                                                    permissions[contexts['anthony'].user.id] = 'viewer';
                                                    permissions['u:cam:nonExistingUser'] = 'viewer';
                                                    RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                                        assert.ok(err);
                                                        // Get the piece of content as the member that was part of the invalid setPermissions
                                                        checkPieceOfContent(contexts['anthony'].restContext, contexts['anthony'].user.id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                            RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                                assert.ok(!err);
                                                                assert.equal(members.results.length, 3);
                                                                // Morph results to hash for easy access.
                                                                var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                                                assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                                                assert.equal(hash[contexts['simon'].user.id][0].role, 'manager');
                                                                assert.equal(hash[contexts['bert'].user.id][0].role, 'viewer');

                                                                // Remove a manager from the content
                                                                permissions = {};
                                                                permissions[contexts['simon'].user.id] = false;
                                                                RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                                                    assert.ok(!err);
                                                                    // Get the piece of content as the removed manager
                                                                    checkPieceOfContent(contexts['simon'].restContext, contexts['simon'].user.id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                                        RestAPI.Content.getMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                                            assert.ok(!err);
                                                                            assert.equal(members.results.length, 2);
                                                                            // Morph results to hash for easy access.
                                                                            var hash = _.groupBy(members.results, function(member) { return member.profile.id; })
                                                                            assert.equal(hash[contexts['nicolaas'].user.id][0].role, 'manager');
                                                                            assert.equal(hash[contexts['simon'].user.id], undefined);
                                                                            assert.equal(hash[contexts['bert'].user.id][0].role, 'viewer');

                                                                            // Try setting the permissions with an undefined role
                                                                            permissions = {};
                                                                            permissions[contexts['branden'].user.id] = undefined;
                                                                            RestAPI.Content.updateMembers(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                                                                assert.ok(err);

                                                                                // Try to set the permissions on the content as a non-manager of the content
                                                                                permissions = {};
                                                                                permissions[contexts['branden'].user.id] = 'viewer';
                                                                                RestAPI.Content.updateMembers(contexts['simon'].restContext, contentObj.contentId, permissions, function(err) {
                                                                                    assert.ok(err);
                                                                                    callback(contentObj);
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        };
    
        /**
         * Test that will attempt to set permissions on a public piece of content
         */
        it('verify public content permissions', function(callback) {
            setUpUsers(function(contexts) {
                setUpContentPermissions(contexts, 'public', function(contentObj) {
                    // Get the piece of content as a non-associated user
                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, false, false, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, true, false, true, callback);
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to set permissions on a loggedin piece of content
         */
        it('verify logged in content permissions', function(callback) {
            setUpUsers(function(contexts) {
                setUpContentPermissions(contexts, 'loggedin', function(contentObj) {
                    // Get the piece of content as a non-associated user
                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, true, false, false, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                    });
                });
            });
        });
    
        /**
         * Test that will attempt to set permissions on a private piece of content
         */
        it('verify private content permissions', function(callback) {
            setUpUsers(function(contexts) {
                setUpContentPermissions(contexts, 'private', function(contentObj) {
                    // Get the piece of content as a non-associated user
                    checkPieceOfContent(contexts['branden'].restContext, contexts['branden'].user.id, contentObj, false, false, false, function() {
                        // Get the piece of content as an anonymous user
                        checkPieceOfContent(anonymousRestContext, contexts['nicolaas'].user.id, contentObj, false, false, false, callback);
                    });
                });
            });
        });
        
    });

    //////////////////////////////////////////////////////
    // Content permissions on multiple at the same time //
    //////////////////////////////////////////////////////
    
    /**
     * Test that will attempt to set permissions on multiple principals at once. It will add permissions and
     * remove permissions on sets of principals that have all valid principals and some with non-valid principals
     * @param  {Test}       test        Standard nodeunit test object
     *
    it('Test multiple content permissions', function(callback) {
        setUpUsers(function(contexts) {
            // Create a content item
            ContentAPI.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', {}, function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                // Set permission on multiple people at the same time (managers and members)
                var permissions = {};
                permissions[contexts['simon'].user().id] = 'manager';
                permissions[contexts['bert'].user().id] = 'viewer';
                permissions[contexts['branden'].user().id] = 'viewer';
                ContentAPI.setContentPermissions(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                    assert.ok(!err);
                    ContentAPI.getContentMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.length, 4);
                        members = convertMemberArrayToObject(members);
                        assert.equal(members[contexts['nicolaas'].user().id].role, 'manager');
                        assert.equal(members[contexts['simon'].user().id].role, 'manager');
                        assert.equal(members[contexts['bert'].user().id].role, 'viewer');
                        assert.equal(members[contexts['branden'].user().id].role, 'viewer');
                        // Set permission on multiple people at same time, some remove role
                        permissions = {};
                        permissions[contexts['simon'].user().id] = false;
                        permissions[contexts['bert'].user().id] = false;
                        permissions[contexts['anthony'].user().id] = 'viewer';
                        ContentAPI.setContentPermissions(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                            assert.ok(!err);
                            ContentAPI.getContentMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.length, 3);
                                members = convertMemberArrayToObject(members);
                                assert.equal(members[contexts['nicolaas'].user().id].role, 'manager');
                                assert.equal(members[contexts['branden'].user().id].role, 'viewer');
                                assert.equal(members[contexts['anthony'].user().id].role, 'viewer');
                                // Set permission on multiple people at same time (managers and members), some invalid
                                permissions = {};
                                permissions[contexts['simon'].user().id] = 'manager';
                                permissions[contexts['bert'].user().id] = 'viewer';
                                permissions['non-existing-user'] = 'viewer';
                                ContentAPI.setContentPermissions(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                    assert.ok(err);
                                    ContentAPI.getContentMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                        assert.ok(!err);
                                        assert.equal(members.length, 3);
                                        members = convertMemberArrayToObject(members);
                                        assert.equal(members[contexts['nicolaas'].user().id].role, 'manager');
                                        assert.equal(members[contexts['branden'].user().id].role, 'viewer');
                                        assert.equal(members[contexts['anthony'].user().id].role, 'viewer');
                                        // Set permission on multiple people at same time, some remove role, some invalid
                                        permissions = {};
                                        permissions[contexts['branden'].user().id] = false;
                                        permissions[contexts['anthony'].user().id] = false;
                                        permissions['non-existing-user'] = false;
                                        ContentAPI.setContentPermissions(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                                            assert.ok(err);
                                            ContentAPI.getContentMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                                                assert.ok(!err);
                                                assert.equal(members.length, 3);
                                                members = convertMemberArrayToObject(members);
                                                assert.equal(members[contexts['nicolaas'].user().id].role, 'manager');
                                                assert.equal(members[contexts['branden'].user().id].role, 'viewer');
                                                assert.equal(members[contexts['anthony'].user().id].role, 'viewer');
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }); */

    // TODO: Create unit test for paging on getContentMembers
    // TODO: Test get content members with no provided contentId

    //////////////////////
    // Content sharing //
    /////////////////////

    /**
     * Utility function for the sharing tests that will create a new content item, check for successful creation and check that
     * the right set of content members are retrieved
     * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
     *                                                  the current user and the current tenant
     * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
     * @param  {Function(content)}  callback            Standard callback function
     * @param  {Content}            callback.content    Content object that has been created as part of this test
     *
    var prepareSharing = function(contexts, privacy, callback) {
        // Create a content item
        ContentAPI.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', {}, function(err, contentObj) {    
            assert.ok(!err);
            assert.ok(contentObj.contentId);
            // Get the piece of content as the creator
            checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, true, true, true, function() {
                ContentAPI.getContentMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err, members) {
                    assert.ok(!err);
                    assert.equal(members.length, 1);
                    members = convertMemberArrayToObject(members);
                    assert.equal(members[contexts['nicolaas'].user().id].role, 'manager');
                    callback(contentObj);
                 });
            });
        });
    }; */

    /**
     * Utility function for the sharing tests that will try to share content, will then check for access to the content by the person
     * the content was shared with. Then the test will check whether that person can see the content's membership list and sees the
     * correct list of members in there
     * @param  {Content}    contentObj          Content object that will be shared
     * @param  {Context}    sharerContext       Standard context object that represents the user that will share the content
     * @param  {Context}    shareWithContext    Standard context object that represents the user the context will be shared with. Content access,
     *                                          library presence and membership checks will be run on this user
     * @param  {Boolean}    expectShare         Whether or not we expect that user 1 will be able to share the content with user 2
     * @param  {Boolean}    expectAccess        Whether or not we expect that user 2 will have access to the content after it's been shared with him
     * @param  {Boolean}    expectManager       Whether or not we expect that user 2 will be able to manage the content after it's been shared with him
     * @param  {Boolean}    expectInLibrary     Whether or not we expect user 2 to be able to see the content in his library after it's been shared with him
     * @param  {Function}   callback            Standard callback function
     *
    var testSharing = function(contentObj, sharerContext, shareWithContext, expectShare, expectAccess, expectManager, expectInLibrary, expectedMembers, callback) {
        ContentAPI.shareContent(sharerContext, contentObj.contentId, [shareWithContext.user().id], function(err) {
            if (expectShare) {
                assert.ok(!err);
            } else {
                assert.ok(err);
            }
            checkPieceOfContent(shareWithContext, shareWithContext.user() ? shareWithContext.user().id : null, contentObj, expectAccess, expectManager, expectInLibrary, function() {
                ContentAPI.getContentMembers(shareWithContext, contentObj.contentId, null, null, function(err, members) {
                    if (expectedMembers) {
                        assert.ok(!err);
                        assert.equal(members.length, _.keys(expectedMembers).length);
                        members = convertMemberArrayToObject(members);
                        for (var member in members) {
                            assert.ok(members[member].role, expectedMembers[member]);
                        }
                    } else {
                        assert.ok(err);
                    }
                    callback();
                });
            });
        });
    }; */

    /**
     * Test that will attempt to create a public piece of content, share it as the manager, share it as a member, share it
     * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
     * presence and the correct content membership list 
     *
    it('Test public sharing', function(callback) {
        setUpUsers(function(contexts) {
            // Create a public content item
            prepareSharing(contexts, 'public', function(contentObj) {
                // Share as content owner
                var expectedMembers = {};
                expectedMembers[contexts['nicolaas'].user().id] = 'manager';
                expectedMembers[contexts['simon'].user().id] = 'viewer';
                testSharing(contentObj, contexts['nicolaas'].restContext, contexts['simon'], true, true, false, true, expectedMembers, function() {
                    // Share as content member
                    expectedMembers[contexts['bert'].user().id] = 'viewer';
                    testSharing(contentObj, contexts['simon'], contexts['bert'], true, true, false, true, expectedMembers, function() {
                        // Share as other user, add to own library
                        expectedMembers[contexts['branden'].user().id] = 'viewer';
                        testSharing(contentObj, contexts['bert'], contexts['branden'], true, true, false, true, expectedMembers, function() {
                            // Share with the content manager, making sure that he's still the content manager after sharing
                            testSharing(contentObj, contexts['branden'], contexts['nicolaas'].restContext, true, true, true, true, expectedMembers, function() {
                                // Share as anonymous
                                testSharing(contentObj, new Context(contexts['anthony'].tenant()), contexts['anthony'], false, true, false, false, expectedMembers, function() {
                                    callback();
                                }); 
                            });
                        }); 
                    });
                });
            });
        });
    }); */

    /**
     * Test that will attempt to create a loggedin piece of content, share it as the manager, share it as a member, share it
     * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
     * presence and the correct content membership list 
     *
    it('Test logged in sharing', function(callback) {
        setUpUsers(function(contexts) {
            // Create a loggedin content item
            prepareSharing(contexts, 'loggedin', function(contentObj) {
                // Share as content owner
                var expectedMembers = {};
                expectedMembers[contexts['nicolaas'].user().id] = 'manager';
                expectedMembers[contexts['simon'].user().id] = 'viewer';
                testSharing(contentObj, contexts['nicolaas'].restContext, contexts['simon'], true, true, false, true, expectedMembers, function() {
                    // Share as content member
                    expectedMembers[contexts['bert'].user().id] = 'viewer';
                    testSharing(contentObj, contexts['simon'], contexts['bert'], true, true, false, true, expectedMembers, function() {
                        // Share as other user, add to own library
                        expectedMembers[contexts['branden'].user().id] = 'viewer';
                        testSharing(contentObj, contexts['branden'], contexts['branden'], true, true, false, true, expectedMembers, function() {
                            // Share with the content manager, making sure that he's still the content manager after sharing
                            testSharing(contentObj, contexts['branden'], contexts['nicolaas'].restContext, true, true, true, true, expectedMembers, function() {
                                // Share as anonymous
                                testSharing(contentObj, new Context(contexts['anthony'].tenant()), contexts['anthony'], false, true, false, false, expectedMembers, function() {
                                    callback();
                                });
                            });
                        }); 
                    });
                });
            });
        });
    }); */

    /**
     * Test that will attempt to create a private piece of content, share it as the manager, share it as a member, share it
     * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
     * presence and the correct content membership list 
     *
    it('Test private sharing', function(callback) {
        setUpUsers(function(contexts) {
            // Create a private content item
            prepareSharing(contexts, 'private', function(contentObj) {
                // Share as content owner
                var expectedMembers = {};
                expectedMembers[contexts['nicolaas'].user().id] = 'manager';
                expectedMembers[contexts['simon'].user().id] = 'viewer';
                testSharing(contentObj, contexts['nicolaas'].restContext, contexts['simon'], true, true, false, true, expectedMembers, function() {
                    // Share as content member
                    testSharing(contentObj, contexts['simon'], contexts['bert'], false, false, false, false, null, function() {
                        // Share as other user, add to own library
                        testSharing(contentObj, contexts['branden'], contexts['branden'], false, false, false, false, null, function() {
                            // Share with the content manager, making sure that he's still the content manager after sharing
                            testSharing(contentObj, contexts['simon'], contexts['nicolaas'].restContext, false, true, true, true, expectedMembers, function() {
                                // Share as anonymous
                                testSharing(contentObj, new Context(contexts['anthony'].tenant()), contexts['anthony'], false, false, false, false, null, function() {
                                    callback();
                                });
                            });
                        }); 
                    });
                });
            });
        });
    }); */

    ////////////////////////////////////////////////////
    // Content sharing with multiple at the same time //
    ////////////////////////////////////////////////////

    /**
     * Test that will attempt to use the shareContent function with multiple people and/or groups at the same time. Invalid
     * principal ids will be added in as well.
     *
    it('Test multiple sharing', function(callback) {
        setUpUsers(function(contexts) {
            // Create a piece of content
            prepareSharing(contexts, 'private', function(contentObj) {
                // Share with multiple people at the same time
                ContentAPI.shareContent(contexts['nicolaas'].restContext, contentObj.contentId, [contexts['simon'].user().id, contexts['bert'].user().id, contexts['branden'].user().id], function(err) {
                    assert.ok(!err);
                    // Check that these people have access
                    checkPieceOfContent(contexts['simon'], contexts['simon'].user().id, contentObj, true, false, true, function() {
                        checkPieceOfContent(contexts['bert'], contexts['bert'].user().id, contentObj, true, false, true, function() {
                            checkPieceOfContent(contexts['branden'], contexts['branden'].user().id, contentObj, true, false, true, function() {
                                checkPieceOfContent(contexts['anthony'], contexts['anthony'].user().id, contentObj, false, false, false, function() {
                                    // Share with multiple people, of which some are invalid users
                                    ContentAPI.shareContent(contexts['nicolaas'].restContext, contentObj.contentId, [contexts['anthony'].user().id, 'nonExistingUser'], function(err) {
                                        assert.ok(err);
                                        checkPieceOfContent(contexts['anthony'], contexts['anthony'].user().id, contentObj, false, false, false, function() {
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }); */

    //////////////////////////////////
    // Group related content access //
    //////////////////////////////////

    /**
     * Utility function for the for group-related content access. The following situation is assumed:
     * 1) UI Dev Group has 2 members, Nicolaas is a manager, Bert is a manager
     * 2) Back-end Dev Group has 2 members, Branden is a manager, Simon is a member
     * 3) OAE Team Group has 4 members, Anthony is a manager, Stuart is a member
     *    UI Dev Group is a member and Back-end Dev Group is a member
     * 
     * The following steps will be taken:
     * 1) A content item is created with the specified visibility
     * 2) Permissions are set on the content
     *  2.1) The UI Dev Group is made a viewer
     *  2.2) Simon is made a viewer
     *  2.3) We check that the content is part of the UI Dev Group's library
     *  2.4) We verify that Simon has access to content
     *  2.5) We verify that Bert and Nico have access to the content through the UI Dev Group membership
     *  2.6) We verify that the content doesn't show in the library of OAE Team and the Back-end team
     *  2.7) We verify that Stuart and Branden don't have access to the content
     * 3) The content is shared with the OAE Team Group
     *  3.1) We verify that Stuart and Branden now have access to the content
     *  3.2) We verify that the content shows in OAE Team and UI Dev team's library and not in the Back-end Team's library
     * 4) The Back-end Team Group is made a manager of the content
     *  4.1) We verify that Simon and Branden are now a manager
     *  4.2) We verify that Stuart is not a manager
     * 5) The permissions for OAE Team Group and Back-end Team Group are removed from the content
     *  5.1) We verify that Branden no longer has access to the content
     *  5.2) We verify that Simon and Nicolaas still have access to the content
     * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
     *                                                  the current user and the current tenant
     * @param  {Array<Group>}       groups              Array of group objects that will be used as part of this test
     * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
     * @param  {Function}           callback            Standard callback function
     *
    var testGroupAccess = function(contexts, groups, privacy, callback) {
        // Anthony creates a content item
        ContentAPI.createLink(contexts['anthony'], 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', {}, function(err, contentObj) {    
            assert.ok(!err);
            assert.ok(contentObj.contentId);
    
            // Set permissions on content --> Make UI dev team member, make Simon a member
            var permissions = {};
            permissions[groups[0].id] = 'viewer';
            permissions[contexts['simon'].user().id] = 'viewer';
            ContentAPI.setContentPermissions(contexts['anthony'], contentObj.contentId, permissions, function(err) {
                assert.ok(!err);
                // Check that UI Dev Team, Bert, Nico and Simon have member access
                checkPieceOfContent(contexts['bert'], groups[0].id, contentObj, true, false, true, function() {
                    checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, true, false, false, function() {
                        checkPieceOfContent(contexts['bert'], contexts['bert'].user().id, contentObj, true, false, false, function() {
                            // Check that it shows in UI Dev Team's library
                            ContentAPI.getLibraryItems(contexts['nicolaas'].restContext, groups[0].id, null, 10, function(err, contentItems) {
                                assert.ok(!err);
                                assert.equal(contentItems.length, 1);
                                assert.equal(contentItems[0].contentId, contentObj.contentId);
                                // Check that it shows in Simon's library
                                ContentAPI.getLibraryItems(contexts['simon'], contexts['simon'].user().id, null, 10, function(err, contentItems) {
                                    assert.ok(!err);
                                    assert.equal(contentItems.length, 1);
                                    assert.equal(contentItems[0].contentId, contentObj.contentId);
                                    // Check that it doesn't show in Nico's library
                                    ContentAPI.getLibraryItems(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, null, 10, function(err, contentItems) {
                                        assert.ok(!err);
                                        assert.equal(contentItems.length, 0);
                                        // Check that it doesn't show in Bert's library
                                        ContentAPI.getLibraryItems(contexts['bert'], contexts['bert'].user().id, null, 10, function(err, contentItems) {
                                            assert.ok(!err);
                                            assert.equal(contentItems.length, 0);
                                            // Check that it doesn't show in OAE Team's and Back-end team's library
                                            ContentAPI.getLibraryItems(contexts['anthony'], groups[1].id, null, 10, function(err, contentItems) {
                                                assert.ok(!err);
                                                assert.equal(contentItems.length, 0);
                                                ContentAPI.getLibraryItems(contexts['anthony'], groups[2].id, null, 10, function(err, contentItems) {
                                                    assert.ok(!err);
                                                    assert.equal(contentItems.length, 0);
                                                    // Check that Stuart doesn't have access
                                                    checkPieceOfContent(contexts['stuart'], contexts['stuart'].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                        // Check that Branden doesn't have access
                                                        checkPieceOfContent(contexts['branden'], contexts['branden'].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
    
                                                            // Share with the OAE Team group
                                                            ContentAPI.shareContent(contexts['anthony'], contentObj.contentId, [groups[2].id], function(err) {
                                                                // Check that Stuart has access
                                                                checkPieceOfContent(contexts['stuart'], contexts['stuart'].user().id, contentObj, true, false, false, function() {
                                                                    // Check that Branden has access
                                                                    checkPieceOfContent(contexts['branden'], contexts['branden'].user().id, contentObj, true, false, false, function() {
                                                                        // Check that it shows in OAE Team and UI Dev team's library and not in the Back-End Team's library
                                                                        ContentAPI.getLibraryItems(contexts['anthony'], groups[2].id, null, 10, function(err, contentItems) {
                                                                            assert.ok(!err);
                                                                            assert.equal(contentItems.length, 1);
                                                                            assert.equal(contentItems[0].contentId, contentObj.contentId);
                                                                            ContentAPI.getLibraryItems(contexts['nicolaas'].restContext, groups[0].id, null, 10, function(err, contentItems) {
                                                                                assert.ok(!err);
                                                                                assert.equal(contentItems.length, 1);
                                                                                assert.equal(contentItems[0].contentId, contentObj.contentId);
                                                                                ContentAPI.getLibraryItems(contexts['simon'], groups[1].id, null, 10, function(err, contentItems) {
                                                                                    assert.ok(!err);
                                                                                    assert.equal(contentItems.length, 0);
    
                                                                                    // Make Back-end team manager
                                                                                    permissions = {};
                                                                                    permissions[groups[1].id] = 'manager';
                                                                                    ContentAPI.setContentPermissions(contexts['anthony'], contentObj.contentId, permissions, function(err) {
                                                                                        assert.ok(!err);
                                                                                        // Check that Simon and Branden are manager, check that Stuart is not a manager
                                                                                        checkPieceOfContent(contexts['simon'], contexts['simon'].user().id, contentObj, true, true, true, function() {
                                                                                            checkPieceOfContent(contexts['branden'], contexts['branden'].user().id, contentObj, true, true, false, function() {
                                                                                                checkPieceOfContent(contexts['stuart'], contexts['stuart'].user().id, contentObj, true, false, false, function() {
      
                                                                                                    // Remove permission for Back-end team manager and OAE Team
                                                                                                    permissions = {};
                                                                                                    permissions[groups[1].id] = false;
                                                                                                    permissions[groups[2].id] = false;
                                                                                                    ContentAPI.setContentPermissions(contexts['anthony'], contentObj.contentId, permissions, function(err) {
                                                                                                        assert.ok(!err);
                                                                                                        // Check that Branden no longer has access, but Simon and Nico still do
                                                                                                        checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, true, false, false, function() {
                                                                                                            checkPieceOfContent(contexts['simon'], contexts['simon'].user().id, contentObj, true, false, true, function() {
                                                                                                                checkPieceOfContent(contexts['branden'], contexts['branden'].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                                                                                    callback();
                                                                                                                });
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }; */
    
    /**
     * Test that will verify group-related access for public content
     *
    it('Test public content group access', function(callback) {
        setUpUsers(function(contexts) {
            setUpGroups(contexts, function(groups) {
                testGroupAccess(contexts, groups, 'public', function() {
                    callback();
                });
            });
        });
    }); */
    
    /**
     * Test that will verify group-related access for logged in content
     *
    it('Test logged in content group access' , function(callback) {
        setUpUsers(function(contexts) {
            setUpGroups(contexts, function(groups) {
                testGroupAccess(contexts, groups, 'loggedin', function() {
                    callback();
                });
            });
        });
    }); */
    
    /**
     * Test that will verify group-related access for private content
     *
    it('Test private content group access', function(callback) {
        setUpUsers(function(contexts) {
            setUpGroups(contexts, function(groups) {
                testGroupAccess(contexts, groups, 'private', function() {
                    callback();
                });
            });
        });
    }); */

    // TODO: Test getFullContentProfile

    ///////////////
    // Libraries //
    ///////////////

    // TODO: Tests around libraries
    // User library
    // Mix of private, public, logged in content
    // Mix of created himself, manager through setPermissions and shared
    // Check the library as user, other user, anonymous
    // Check paging
    // Group library
    // TODO: Get library that doesn't exist
    // TODO: Check sorting of libraries
    //////////////////////
    // Deleting content //
    //////////////////////

    /**
     * Utitility function for the content delete assert. This function will create a piece of content, add a manager and a viewer using the setPermissions function,
     * share the content with an additional user. After each of these, the expected access will be checked. After that, the test will attempt to delete the content
     * as an anonymous user, a logged in user, a content member and a content manager. After that, the tests check if each of those can still access the content,
     * whether or not all roles have deleted, whether or not all libraries have been updated and whether or not the content members list is no longer available
     * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
     *                                                  the current user and the current tenant
     * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
     * @param  {Function(content)}  callback            Standard callback function
     *
    var prepareDelete = function(contexts, privacy, callback) {
        // Create a content item
        ContentAPI.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', privacy, 'http://www.sakaiproject.org/', {}, function(err, contentObj) {    
            assert.ok(!err);
            assert.ok(contentObj.contentId);
            // Get the piece of content as the creator
            checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, true, true, true, function() {
                // Make a user a manager and make a user a member
                var permissions = {};
                permissions[contexts['simon'].user().id] = 'manager';
                permissions[contexts['bert'].user().id] = 'viewer';
                ContentAPI.setContentPermissions(contexts['nicolaas'].restContext, contentObj.contentId, permissions, function(err) {
                    assert.ok(!err);
                    checkPieceOfContent(contexts['simon'], contexts['simon'].user().id, contentObj, true, true, true, function() {
                        checkPieceOfContent(contexts['bert'], contexts['bert'].user().id, contentObj, true, false, true, function() {
                            // Share the content with another user
                            ContentAPI.shareContent(contexts['simon'], contentObj.contentId, [contexts['branden'].user().id], function(err) {
                                assert.ok(!err);
                                checkPieceOfContent(contexts['branden'], contexts['branden'].user().id, contentObj, true, false, true, function() {
                                    // Try to delete the content as an anonymous user
                                    ContentAPI.deleteContent(new Context(contexts['branden'].tenant()), contentObj.contentId, function(err) {
                                        assert.ok(err);
                                        // Check that it is still around
                                        checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, true, true, true, function() {
                                            // Try to delete the content as a logged in user
                                            ContentAPI.deleteContent(contexts['anthony'], contentObj.contentId, function(err) {
                                                assert.ok(err);
                                                // Check that it is still around
                                                checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, true, true, true, function() {
                                                    // Try to delete the content as a content member
                                                    ContentAPI.deleteContent(contexts['branden'], contentObj.contentId, function(err) {
                                                        assert.ok(err);
                                                        // Check that it is still around
                                                        checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, true, true, true, function() {
                                                            // Try to delete the content as a content manager
                                                            ContentAPI.deleteContent(contexts['nicolaas'].restContext, contentObj.contentId, function(err) {
                                                                assert.ok(!err);
                                                                // Check to see if the manager, a member, a logged in user and the anonymous user still have access
                                                                checkPieceOfContent(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, contentObj, false, false, false, function() {
                                                                    checkPieceOfContent(contexts['bert'], contexts['bert'].user().id, contentObj, false, false, false, function() {
                                                                        checkPieceOfContent(contexts['anthony'], contexts['anthony'].user().id, contentObj, false, false, false, function() {
                                                                            checkPieceOfContent(new Context(contexts['nicolaas'].tenant()), contexts['nicolaas'].user().id, contentObj, false, false, false, function() {
                                                                                // Check roles api for the role on the content for a manager, a member and a logged in user
                                                                                AuthzAPI.getRole(contexts['nicolaas'].user().id, contentObj.contentId, function(err, role) {
                                                                                    assert.ok(!role);
                                                                                    AuthzAPI.getRole(contexts['bert'].user().id, contentObj.contentId, function(err, role) {
                                                                                        assert.ok(!role);
                                                                                        AuthzAPI.getRole(contexts['anthony'].user().id, contentObj.contentId, function(err, role) {
                                                                                            assert.ok(!role);
                                                                                            // Check whether the list of members is no longer accessible
                                                                                            ContentAPI.getContentMembers(contexts['nicolaas'].restContext, contentObj.contentId, null, null, function(err) {
                                                                                                assert.ok(err);
                                                                                                callback();
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }; */

    /**
     * Test that will attempt to create a public piece of content and delete it
     *
    it('Test public delete', function(callback) {
        setUpUsers(function(contexts) {
            prepareDelete(contexts, 'public', function() {
                callback();
            });
        });
    }); */

    /**
     * Test that will attempt to create a logged in piece of content and delete it
     *
    it('Test logged in delete', function(callback) {
        setUpUsers(function(contexts) {
            prepareDelete(contexts, 'loggedin', function() {
                callback();
            });
        });
    }); */

    /**
     * Test that will attempt to create a private piece of content and delete it
     *
    it('Test private delete', function(callback) {
        setUpUsers(function(contexts) {
            prepareDelete(contexts, 'private', function() {
                callback();
            });
        });
    }); */

    /////////////////////////////
    // Update content metadata //
    /////////////////////////////

    /**
     * Utitility function for the update content profile test, that will check whether or not the name and description of a piece
     * of content are as expected for 2 different users.
     * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
     * @param  {String}             contentId           Content id of the content for which the name and description are checked
     * @param  {String}             expectedName        The name the content is supposed to have
     * @param  {String}             expectedDescription The description the content is supposed to have
     * @param  {Function}           callback            Standard callback function
     *
    var checkNameAndDescription = function(contexts, contentId, expectedName, expectedDescription, callback) {
        // Check as user 0
        ContentAPI.getContent(contexts['nicolaas'].restContext, contentId, function(err, contentObj) {
            assert.ok(!err);
            assert.ok(contentObj.contentId, contentId);
            assert.ok(contentObj.name, expectedName);
            assert.ok(contentObj.description, expectedDescription);
            // Check as user 1
            ContentAPI.getContent(contexts['simon'], contentId, function(err, contentObj) {
                assert.ok(!err);
                assert.ok(contentObj.contentId, contentId);
                assert.ok(contentObj.name, expectedName);
                assert.ok(contentObj.description, expectedDescription);
                callback();
            });
        });
    }; */

    /**
     * Test that will exercise the name and description part of the updateContent profile function. A piece of content will be 
     * updated with invalid parameters, then the name will be updated, the description will be updated, both name and description 
     * will be updated at the same time, and we will attempt to update the profile as a non-manager. After all of these, we'll 
     * check if the correct metadata is still on the content.
     *
    it('Test update content profile', function(callback) {
        // Create a piece of content
        setUpUsers(function(contexts) {
        ContentAPI.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', {}, function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                // Share it with someone
                ContentAPI.shareContent(contexts['nicolaas'].restContext, contentObj.contentId, [contexts['simon'].user().id], function(err) {
                    assert.ok(!err);
                    // Invalid content metadata update (empty)
                    ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {}, function(err) {
                        assert.ok(err);
                        // Invalid content metadata update (unexisting field)
                        ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'name': 'New Test Content 1', 'nonExisting': 'Non-existing field'}, function(err) {
                            assert.ok(err);
                            // Check name and description are still correct
                            checkNameAndDescription(contexts, contentObj.contentId, 'Test Content 1', 'Test content description 1', function() {
                                // Change the name
                                ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'name': 'New Test Content 1'}, function(err) {
                                    assert.ok(!err);
                                    // Check the new name comes back
                                    checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 1', 'Test content description 1', function() {
                                        // Change the description
                                        ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'description': 'New test content description 1'}, function(err) {
                                            assert.ok(!err);
                                            // Check the new description comes back
                                            checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 1', 'New test content description 1', function() {
                                                // Change both at same time
                                                ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'name': 'New Test Content 2', 'description': 'New test content description 2'}, function(err) {
                                                    assert.ok(!err);
                                                    // Check the new name and description come back
                                                    checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 2', 'New test content description 2', function() {
                                                        // Try updating it as non-manager of the content
                                                        ContentAPI.updateContentMetadata(contexts['simon'], contentObj.contentId, {'name': 'New Test Content 3'}, function(err) {
                                                            assert.ok(err);
                                                             // Check that the old values are still in place
                                                             checkNameAndDescription(contexts, contentObj.contentId, 'New Test Content 2', 'New test content description 2', callback);
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }); */

    /**
     * Utility function that will check for content access and library presence for a content manager,
     * a content viewer, a logged in user and the anonymous user
     * @param  {Array<Context>}     contexts                Array of context objects that represent a request cycle and contain
     * @param  {String}             contentId               Content id of the content for which we expect in the access and library checks
     * @param  {Boolean}            expectLoggedInAccess    Whether or not the logged in user is expected to have access to the content
     * @param  {Boolean}            expectAnonAccess        Whether or not the anonymous user is expected to have access to the content
     * @param  {Function}           callback                Standard callback function
     *
    var checkAccessAndLibrary = function(contexts, contentId, expectLoggedInAccess, expectAnonAccess, callback) {
        // Check for the content manager
        ContentAPI.hasAccess(contexts['nicolaas'].restContext, contentId, function(err, hasAccess) {
            assert.ok(!err);
            assert.ok(hasAccess);
            // Check that it's part of the content manager's library
            ContentAPI.getLibraryItems(contexts['nicolaas'].restContext, contexts['nicolaas'].user().id, null, 10, function(err, items) {
                assert.ok(!err);
                assert.equal(items.length, 1);
                assert.equal(items[0].contentId, contentId);
                // Check for the content viewer
                ContentAPI.hasAccess(contexts['simon'], contentId, function(err, hasAccess) {
                    assert.ok(!err);
                    assert.ok(hasAccess);
                    // Check that it is part of his library
                    ContentAPI.getLibraryItems(contexts['simon'], contexts['simon'].user().id, null, 10, function(err, items) {
                        assert.ok(!err);
                        assert.equal(items.length, 1);
                        assert.equal(items[0].contentId, contentId);
                        // Check that it is visible in the manager's library
                        ContentAPI.getLibraryItems(contexts['simon'], contexts['nicolaas'].user().id, null, 10, function(err, items) {
                            assert.ok(!err);
                            if (expectLoggedInAccess) {
                                assert.equal(items.length, 1);
                                assert.equal(items[0].contentId, contentId);
                            } else {
                                assert.equal(items.length, 0);
                            }
                            // Check for the logged in user that's not a viewer
                            ContentAPI.hasAccess(contexts['bert'], contentId, function(err, hasAccess) {
                                assert.ok(!err);
                                assert.equal(hasAccess, expectLoggedInAccess);
                                // Check that it isn't part of his library
                                ContentAPI.getLibraryItems(contexts['bert'], contexts['bert'].user().id, null, 10, function(err, items) {
                                    assert.ok(!err);
                                    assert.equal(items.length, 0);
                                    // Check that it is visible in the manager's library
                                    ContentAPI.getLibraryItems(contexts['bert'], contexts['nicolaas'].user().id, null, 10, function(err, items) {
                                        assert.ok(!err);
                                        if (expectLoggedInAccess) {
                                            assert.equal(items.length, 1);
                                            assert.equal(items[0].contentId, contentId);
                                        } else {
                                            assert.equal(items.length, 0);
                                        }
                                        // Check for the anonymous user
                                        ContentAPI.hasAccess(new Context(), contentId, function(err, hasAccess) {
                                            assert.ok(!err);
                                            assert.equal(hasAccess, expectAnonAccess);
                                            // Check that it is visible in the manager's library
                                            ContentAPI.getLibraryItems(new Context(), contexts['nicolaas'].user().id, null, 10, function(err, items) {
                                                assert.ok(!err);
                                                if (expectAnonAccess) {
                                                    assert.equal(items.length, 1);
                                                    assert.equal(items[0].contentId, contentId);
                                                } else {
                                                    assert.equal(items.length, 0);
                                                }
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }; */

    /**
     * Test that will exercise the visibility part of the updateContentMetadata function for content. This test will create a public 
     * content item, try to give it a non-existing visibility, then make it visible to logged in users, then make it private and 
     * then try to change the visibility as a non-manager. After all of those, we check if the manager, viewer, logged in user and 
     * anonymous user have access as expected.
     *
    it('Test update content visibility', function(callback) {
        // Create a piece of content
        setUpUsers(function(contexts) {
            ContentAPI.createLink(contexts['nicolaas'].restContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/', {}, function(err, contentObj) {    
                assert.ok(!err);
                assert.ok(contentObj.contentId);
                // Share the content with one viewer
                ContentAPI.shareContent(contexts['nicolaas'].restContext, contentObj.contentId, [contexts['simon'].user().id], function(err) {
                    assert.ok(!err);
                    // Check that all of these can get the content as expected, check library presence as expected
                    checkAccessAndLibrary(contexts, contentObj.contentId, true, true, function() {
                        // Try an invalid update
                        ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': null}, function(err) {
                            assert.ok(err);
                            // Check that the access remains unchanged
                            checkAccessAndLibrary(contexts, contentObj.contentId, true, true, function() {
                                // Try an unknown visibility update
                                ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': 'unknown-option'}, function(err) {
                                    assert.ok(err);
                                    // Check that the access remains unchanged
                                    checkAccessAndLibrary(contexts, contentObj.contentId, true, true, function() {
                                        // Make the content logged in only
                                        ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': 'loggedin'}, function(err) {
                                            assert.ok(!err);
                                            // Check that everyone can get the content as expected, check library presence as expected
                                            checkAccessAndLibrary(contexts, contentObj.contentId, true, false, function() {
                                                // Make the content private
                                                ContentAPI.updateContentMetadata(contexts['nicolaas'].restContext, contentObj.contentId, {'visibility': 'private'}, function(err) {
                                                    assert.ok(!err);
                                                    // Check that everyone can get the content as expected, check library presence as expected
                                                    checkAccessAndLibrary(contexts, contentObj.contentId, false, false, function() {
                                                        // Try update as non-manager
                                                        ContentAPI.updateContentMetadata(contexts['simon'], contentObj.contentId, {'visibility': 'public'}, function(err) {
                                                            assert.ok(err);
                                                            // Check that everyone can get the content as expected, check library presence as expected
                                                            checkAccessAndLibrary(contexts, contentObj.contentId, false, false, function() {
                                                                callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    }); */

});
