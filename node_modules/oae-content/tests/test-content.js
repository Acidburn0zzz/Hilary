/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Tenant = require('oae-tenants/lib/model').Tenant;
var User = require('oae-principals/lib/model.user').User;
var PrincipalAPI = require('oae-principals');
var Context = require('oae-context').Context;

var ContentAPI = require('oae-content');
var Content = require('oae-content/lib/model').Content;

// Data used inside of the tests
var tenant1 = new Tenant('cam', 'Cambridge University', 'Cambridge University description', 2001);
var tenant2 = new Tenant('gt', 'Georgia Tech', 'Georgia Tech description', 2002);

/**
 * Create a number of contexts and users that will be used inside of a test
 * @param  {Function(contexts)}  callback           Standard callback function
 * @param  {Array<Context>}      callback.contexts  Array of context objects that represent a request cycle and contain
 *                                                  the current user and the current tenant
 */
var setUpUsers = function(callback) {
    var r = Math.floor(Math.random() * 10000);
    var contexts = [new Context(tenant1, new User(tenant1, 'u:cam:nm417-' + r, 'nm417-' + r, 'public', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs')),
                    new Context(tenant1, new User(tenant1, 'u:cam:simong-' + r, 'simong-' + r, 'loggedin', 'Simon', 'Gaeremynck', 'Simon Gaeremynck')),
                    new Context(tenant1, new User(tenant1, 'u:cam:bp323-' + r, 'bp323-' + r, 'private', 'Bert', 'Pareyn', 'Bert Pareyn')),
                    new Context(tenant1, new User(tenant1, 'u:cam:branden-' + r, 'branden-' + r, 'private', 'Branden', 'Visser', 'Branden Visser')),
                    new Context(tenant2, new User(tenant2, 'u:gt:stuart-' + r, 'stuart-' + r, 'public', 'Stuart', 'Freeman', 'Stuart Freeman'))];
    var done = 0;
    var createUserDone = function(err) {
        if (err) {
            throw err;
        }
        done++;
        if (done === contexts.length) {
            callback(contexts);
        }
    };
    // Create users
    for (var u = 0; u < contexts.length; u++) {
        var user = contexts[u].user();
        PrincipalAPI.createUser(contexts[u].tenant(), user.username, 'password' + u, user.privacy, user.firstName, user.lastName, user.displayName, createUserDone);
    }
};

/**
 * Run a number of asserts on a piece of content. This function checks whether a user has access to the content and
 * whether or not it can be seen in the library of the creator
 * @param  {Test}               test                Standard nodeunit test object
 * @param  {Context}            ctx                 Standard context object, representing the currently logged user and its tenant
 * @param  {User}               creator             The user that has created the content, and is thus a manager
 * @param  {Content}            contentObj          The content object we'll be running checks for
 * @param  {Boolean}            expectAccess        Whether or not we expect the current user to have access to the piece of content
 * @param  {Boolean}            expectManage        Whether or not we expect the current user to be able to manage the piece of content
 * @param  {Boolean}            expectInLibrary     Whether or not we expect the current user to see the item in the creator's library
 * @param  {Function}           callback            Standard callback function executed when all checks have finished
 */
var checkPieceOfContent = function(test, ctx, creator, contentObj, expectAccess, expectManage, expectInLibrary, callback) {
    // Check whether the content can be retrieved
    ContentAPI.getContent(ctx, contentObj.contentId, function(err, retrievedContent) {
        if (expectAccess) {
            test.ok(!err);
            test.ok(retrievedContent.contentId);
            test.equal(retrievedContent.tenant, contentObj.tenant);
            test.equal(retrievedContent.visibility, contentObj.visibility);
            test.equal(retrievedContent.title, contentObj.title);
            test.equal(retrievedContent.description, contentObj.description);
            test.equal(retrievedContent.contentType, contentObj.contentType);
            test.ok(retrievedContent.lastModified);
        } else {
            test.ok(err);
            test.ok(!retrievedContent);
        }
        // Use the hasAccess to check for access to the content
        ContentAPI.hasAccess(ctx, contentObj.contentId, function(err, hasAccess) {
            if (expectAccess) {
                test.ok(!err);
                test.ok(hasAccess);
            } else {
                test.ok(err);
                test.ok(!hasAccess);
            }
            // Use the canManage to check for management of the content
            ContentAPI.canManage(ctx, contentObj.contentId, function(err, canManage) {
                if (expectManage) {
                    test.ok(!err);
                    test.ok(canManage);
                } else {
                    test.ok(err);
                    test.ok(!canManage);
                }
                // Check if the item comes back in the library
                ContentAPI.getLibraryItems(ctx, creator.id, null, 10, function(err, contentItems) {
                    test.ok(!err);
                    if (expectInLibrary) {
                        test.equal(contentItems.length, 1);
                        test.equal(contentItems[0].contentId, contentObj.contentId);
                    } else {
                        test.equal(contentItems.length, 0);
                    }
                    callback();
                });
            });
        });
    });
};

//////////////////////
// Creating content //
//////////////////////

/**
 * Test that will attempt to create new content items with various parameter combinations
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createContent = function(test) {
    test.expect(16);

    setUpUsers(function(contexts) {
        // Create one as anon user
        ContentAPI.createContent(new Context(), 'public', 'Test Content 1', 'Test content description 1', 'link', function(err, contentObj) {
            test.ok(err);
            test.ok(!contentObj);
            // Create one with all required fields
            ContentAPI.createContent(contexts[0], 'public', 'Test Content 2', 'Test content description 2', 'link', function(err, contentObj) {
                test.ok(!err);
                test.ok(contentObj.contentId);
                // Create one without description
                ContentAPI.createContent(contexts[0], 'public', 'Test Content 3', null, 'link', function(err, contentObj) {
                    test.ok(!err);
                    test.ok(contentObj.contentId);
                    // Create one without type
                    ContentAPI.createContent(contexts[0], 'public', 'Test Content 4', 'Test content description 4', null, function(err, contentObj) {
                        test.ok(err);
                        test.ok(!contentObj);
                        // Create one without title
                        ContentAPI.createContent(contexts[0], 'public', null, 'Test content description 5', 'link', function(err, contentObj) {
                            test.ok(err);
                            test.ok(!contentObj);
                            // Create one without permission
                            ContentAPI.createContent(contexts[0], null, 'Test Content 6', 'Test content description 6', 'link', function(err, contentObj) {
                                test.ok(!err);
                                test.ok(contentObj.contentId);
                                // Check if the permission has been set to public (default)
                                ContentAPI.getContent(contexts[0], contentObj.contentId, function(err, contentObj) {
                                    test.ok(!err);
                                    test.equal(contentObj.visibility, 'public');
                                    // Create one without tenant
                                    ContentAPI.createContent(new Context(null, contexts[0].user()), 'public', 'Test Content 7', 'Test content description 7', 'link', function(err, contentObj) {
                                        test.ok(err);
                                        test.ok(!contentObj);
                                        test.done();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to create a public content item and will verify direct and library access
 * for various people
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createPublicContentItem = function(test) {
    test.expect(47);

    setUpUsers(function(contexts) {
        // Create a public content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'public', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the person who created the content
            checkPieceOfContent(test, contexts[0], contexts[0].user(), contentObj, true, true, true, function() {
                // Get the piece of content as a different logged in user
                checkPieceOfContent(test, contexts[1], contexts[0].user(), contentObj, true, false, true, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(test, new Context(), contexts[0].user(), contentObj, true, false, true, function() {
                        test.done();
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to create a loggedin content item and will verify direct and library access
 * for various people
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createLoggedinContentItem = function(test) {
    test.expect(40);

    setUpUsers(function(contexts) {
        // Create a logged in content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'loggedin', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the person who created the content
            checkPieceOfContent(test, contexts[0], contexts[0].user(), contentObj, true, true, true, function() {
                // Get the piece of content as a different logged in user
                checkPieceOfContent(test, contexts[1], contexts[0].user(), contentObj, true, false, true, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(test, new Context(), contexts[0].user(), contentObj, false, false, false, function() {
                        test.done();
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to create a private content item and will verify direct and library access
 * for various people
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createPrivateContentItem = function(test) {
    test.expect(33);

    setUpUsers(function(contexts) {
        // Create a private content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'private', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the person who created the content
            checkPieceOfContent(test, contexts[0], contexts[0].user(), contentObj, true, true, true, function() {
                // Get the piece of content as a different logged in user
                checkPieceOfContent(test, contexts[1], contexts[0].user(), contentObj, false, false, false, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(test, new Context(), contexts[0].user(), contentObj, false, false, false, function() {
                        test.done();
                    });
                });
            });
        });
    });
};

/////////////////////////
// Content permissions //
/////////////////////////

/**
 * Create a piece of content, make a user a manager, make a user a member and test access for all of these as well as library
 * content and the membership list of the content
 * @param  {Test}               test                Standard nodeunit test object
 * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
 *                                                  the current user and the current tenant
 * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
 * @param  {Function(content)}  callback            Standard callback function
 * @param  {Content}            callback.content    Content object that has been created as part of this test
 */
var setUpContentPermissions = function(test, contexts, privacy, callback) {
    // Create a public content item
    var contentObj = new Content(contexts[0].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
    ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
        test.ok(!err);
        test.ok(content.contentId);
        contentObj.contentId = content.contentId;
        // Get the piece of content as the person who created the content
        checkPieceOfContent(test, contexts[0], contexts[0].user(), contentObj, true, true, true, function() {
            // Check the list of content members
            ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                test.ok(!err);
                test.equal(_.keys(members).length, 1);
                test.equal(members[contexts[0].user().id], 'manager');
                // Make another user manager of the content
                var permissions = {};
                permissions[contexts[1].user().id] = 'manager';
                ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                    test.ok(!err);
                    // Get the piece of content as the newly added manager
                    checkPieceOfContent(test, contexts[1], contexts[1].user(), contentObj, true, true, true, function() {
                        ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                            test.ok(!err);
                            test.equal(_.keys(members).length, 2);
                            test.equal(members[contexts[0].user().id], 'manager');
                            test.equal(members[contexts[1].user().id], 'manager');
                            // Make another user member of the content
                            permissions = {};
                            permissions[contexts[2].user().id] = 'viewer';
                            ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                test.ok(!err);
                                // Get the piece of content as the added member
                                checkPieceOfContent(test, contexts[2], contexts[2].user(), contentObj, true, false, true, function() {
                                    ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                        test.ok(!err);
                                        test.equal(_.keys(members).length, 3);
                                        test.equal(members[contexts[0].user().id], 'manager');
                                        test.equal(members[contexts[1].user().id], 'manager');
                                        test.equal(members[contexts[2].user().id], 'viewer');
                                        callback(contentObj);
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to set permissions on a public piece of content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.publicContentPermissions = function(test) {
    test.expect(90);

    setUpUsers(function(contexts) {
        setUpContentPermissions(test, contexts, 'public', function(contentObj) {
            // Get the piece of content as a non-associated user
            checkPieceOfContent(test, contexts[3], contexts[3].user(), contentObj, true, false, false, function() {
                // Get the piece of content as an anonymous user
                checkPieceOfContent(test, new Context(), contexts[0].user(), contentObj, true, false, true, function() {
                    test.done();
                });
            });
        });
    });
};

/**
 * Test that will attempt to set permissions on a loggedin piece of content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.loggedInContentPermissions = function(test) {
    test.expect(83);

    setUpUsers(function(contexts) {
        setUpContentPermissions(test, contexts, 'loggedin', function(contentObj) {
            // Get the piece of content as a non-associated user
            checkPieceOfContent(test, contexts[3], contexts[3].user(), contentObj, true, false, false, function() {
                // Get the piece of content as an anonymous user
                checkPieceOfContent(test, new Context(), contexts[0].user(), contentObj, false, false, false, function() {
                    test.done();
                });
            });
        });
    });
};

/**
 * Test that will attempt to set permissions on a private piece of content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.privateContentPermissions = function(test) {
    test.expect(77);

    setUpUsers(function(contexts) {
        setUpContentPermissions(test, contexts, 'private', function(contentObj) {
            // Get the piece of content as a non-associated user
            checkPieceOfContent(test, contexts[3], contexts[3].user(), contentObj, false, false, false, function() {
                // Get the piece of content as an anonymous user
                checkPieceOfContent(test, new Context(), contexts[0].user(), contentObj, false, false, false, function() {
                    test.done();
                });
            });
        });
    });
};

//////////////////////
// Content sharing //
/////////////////////

// TODO: Test around sharing
// Create a public content item --> check access --> check members
// Share as content owner --> check access --> check members
// Share as content member --> check access --> check members
// Share as other user --> check access --> check members
// Share as anonymous --> check access --> check members
module.exports.publicSharing = function(test) {
    test.expect(84);

    setUpUsers(function(contexts) {
        // Create a public content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'public', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the creator
            checkPieceOfContent(test, contexts[0], contexts[0].user(), contentObj, true, true, true, function() {
                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                    test.ok(!err);
                    test.equal(_.keys(members).length, 1);
                    test.equal(members[contexts[0].user().id], 'manager');
                    // Share as content owner
                    ContentAPI.shareContent(contexts[0], contentObj.contentId, [contexts[1].user().id], function(err) {
                        test.ok(!err);
                        checkPieceOfContent(test, contexts[1], contexts[1].user(), contentObj, true, false, true, function() {
                            ContentAPI.getContentMembers(contexts[1], contentObj.contentId, function(err, members) {
                                test.ok(!err);
                                test.equal(_.keys(members).length, 2);
                                test.equal(members[contexts[0].user().id], 'manager');
                                test.equal(members[contexts[1].user().id], 'viewer');
                                // Share as content member
                                ContentAPI.shareContent(contexts[1], contentObj.contentId, [contexts[2].user().id], function(err) {
                                    test.ok(!err);
                                    checkPieceOfContent(test, contexts[2], contexts[2].user(), contentObj, true, false, true, function() {
                                        ContentAPI.getContentMembers(contexts[2], contentObj.contentId, function(err, members) {
                                            test.ok(!err);
                                            test.equal(_.keys(members).length, 3);
                                            test.equal(members[contexts[0].user().id], 'manager');
                                            test.equal(members[contexts[1].user().id], 'viewer');
                                            test.equal(members[contexts[2].user().id], 'viewer');
                                            // Share as other user, add to own library
                                            ContentAPI.shareContent(contexts[3], contentObj.contentId, [contexts[3].user().id], function(err) {
                                                test.ok(!err);
                                                checkPieceOfContent(test, contexts[3], contexts[3].user(), contentObj, true, false, true, function() {
                                                    ContentAPI.getContentMembers(contexts[3], contentObj.contentId, function(err, members) {
                                                        test.ok(!err);
                                                        test.equal(_.keys(members).length, 4);
                                                        test.equal(members[contexts[0].user().id], 'manager');
                                                        test.equal(members[contexts[1].user().id], 'viewer');
                                                        test.equal(members[contexts[2].user().id], 'viewer');
                                                        test.equal(members[contexts[3].user().id], 'viewer');
                                                        // Share as anonymous
                                                        ContentAPI.shareContent(new Context(), contentObj.contentId, [contexts[4].user().id], function(err) {
                                                            test.ok(err);
                                                            test.done();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * TODO
 * @param {Object} test
 */
module.exports.loggedInSharing = function(test) {
    test.expect(84);

    setUpUsers(function(contexts) {
        // Create a public content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'loggedin', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the creator
            checkPieceOfContent(test, contexts[0], contexts[0].user(), contentObj, true, true, true, function() {
                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                    test.ok(!err);
                    test.equal(_.keys(members).length, 1);
                    test.equal(members[contexts[0].user().id], 'manager');
                    // Share as content owner
                    ContentAPI.shareContent(contexts[0], contentObj.contentId, [contexts[1].user().id], function(err) {
                        test.ok(!err);
                        checkPieceOfContent(test, contexts[1], contexts[1].user(), contentObj, true, false, true, function() {
                            ContentAPI.getContentMembers(contexts[1], contentObj.contentId, function(err, members) {
                                test.ok(!err);
                                test.equal(_.keys(members).length, 2);
                                test.equal(members[contexts[0].user().id], 'manager');
                                test.equal(members[contexts[1].user().id], 'viewer');
                                // Share as content member
                                ContentAPI.shareContent(contexts[1], contentObj.contentId, [contexts[2].user().id], function(err) {
                                    test.ok(!err);
                                    checkPieceOfContent(test, contexts[2], contexts[2].user(), contentObj, true, false, true, function() {
                                        ContentAPI.getContentMembers(contexts[2], contentObj.contentId, function(err, members) {
                                            test.ok(!err);
                                            test.equal(_.keys(members).length, 3);
                                            test.equal(members[contexts[0].user().id], 'manager');
                                            test.equal(members[contexts[1].user().id], 'viewer');
                                            test.equal(members[contexts[2].user().id], 'viewer');
                                            // Share as other user, add to own library
                                            ContentAPI.shareContent(contexts[3], contentObj.contentId, [contexts[3].user().id], function(err) {
                                                test.ok(!err);
                                                checkPieceOfContent(test, contexts[3], contexts[3].user(), contentObj, true, false, true, function() {
                                                    ContentAPI.getContentMembers(contexts[3], contentObj.contentId, function(err, members) {
                                                        test.ok(!err);
                                                        test.equal(_.keys(members).length, 4);
                                                        test.equal(members[contexts[0].user().id], 'manager');
                                                        test.equal(members[contexts[1].user().id], 'viewer');
                                                        test.equal(members[contexts[2].user().id], 'viewer');
                                                        test.equal(members[contexts[3].user().id], 'viewer');
                                                        // Share as anonymous
                                                        ContentAPI.shareContent(new Context(), contentObj.contentId, [contexts[4].user().id], function(err) {
                                                            test.ok(err);
                                                            test.done();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * TODO
 * @param {Object} test
 */
module.exports.privateSharing = function(test) {
    test.expect(61);

    setUpUsers(function(contexts) {
        // Create a public content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'private', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.title, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the creator
            checkPieceOfContent(test, contexts[0], contexts[0].user(), contentObj, true, true, true, function() {
                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                    test.ok(!err);
                    test.equal(_.keys(members).length, 1);
                    test.equal(members[contexts[0].user().id], 'manager');
                    // Share as content owner
                    ContentAPI.shareContent(contexts[0], contentObj.contentId, [contexts[1].user().id], function(err) {
                        test.ok(!err);
                        checkPieceOfContent(test, contexts[1], contexts[1].user(), contentObj, true, false, true, function() {
                            ContentAPI.getContentMembers(contexts[1], contentObj.contentId, function(err, members) {
                                test.ok(!err);
                                test.equal(_.keys(members).length, 2);
                                test.equal(members[contexts[0].user().id], 'manager');
                                test.equal(members[contexts[1].user().id], 'viewer');
                                // Share as content member
                                ContentAPI.shareContent(contexts[1], contentObj.contentId, [contexts[2].user().id], function(err) {
                                    test.ok(err);
                                    checkPieceOfContent(test, contexts[2], contexts[2].user(), contentObj, false, false, false, function() {
                                        ContentAPI.getContentMembers(contexts[2], contentObj.contentId, function(err, members) {
                                            test.ok(err);
                                            // Share as other user, add to own library
                                            ContentAPI.shareContent(contexts[3], contentObj.contentId, [contexts[3].user().id], function(err) {
                                                test.ok(err);
                                                checkPieceOfContent(test, contexts[3], contexts[3].user(), contentObj, false, false, false, function() {
                                                    ContentAPI.getContentMembers(contexts[3], contentObj.contentId, function(err, members) {
                                                        test.ok(err);
                                                        // Share as anonymous
                                                        ContentAPI.shareContent(new Context(), contentObj.contentId, [contexts[4].user().id], function(err) {
                                                            test.ok(err);
                                                            test.done();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};










// TODO: Test setPermissions on multiple at the same time
// TODO: Test share on multiple at the same time


// TODO: Test groups-related content access
// TODO: Tests around libraries
// TODO: Tests around sharing
// TODO: Tests around deleting
// TODO: Tests around updating metadata