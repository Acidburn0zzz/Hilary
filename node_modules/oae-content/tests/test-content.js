/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Tenant = require('oae-tenants/lib/model').Tenant;
var User = require('oae-principals/lib/model.user').User;
var Group = require('oae-principals/lib/model.group').Group;
var PrincipalsAPI = require('oae-principals');
var Context = require('oae-context').Context;

var ContentAPI = require('oae-content');
var Content = require('oae-content/lib/model').Content;
var RolesAPI = require('oae-roles');


// Data used inside of the tests
var tenant1 = new Tenant('cam', 'Cambridge University', 'Cambridge University description', 2001);
var tenant2 = new Tenant('gt', 'Georgia Tech', 'Georgia Tech description', 2002);

/**
 * Create a number of contexts and users that will be used inside of a test
 * @param  {Function(contexts)}  callback           Standard callback function
 * @param  {Array<Context>}      callback.contexts  Array of context objects that represent a request cycle and contain
 *                                                  the current user and the current tenant
 */
var setUpUsers = function(callback) {
    var r = Math.floor(Math.random() * 10000);
    var contexts = [new Context(tenant1, new User(tenant1, 'u:cam:nm417-' + r, 'nm417-' + r, 'public', 'en_GB', 'BST', 'Nicolaas', 'Matthijs', 'Nicolaas Matthijs')),
                    new Context(tenant1, new User(tenant1, 'u:cam:simong-' + r, 'simong-' + r, 'loggedin', 'en_GB', 'BST', 'Simon', 'Gaeremynck', 'Simon Gaeremynck')),
                    new Context(tenant1, new User(tenant1, 'u:cam:bp323-' + r, 'bp323-' + r, 'private', 'en_GB', 'BST', 'Bert', 'Pareyn', 'Bert Pareyn')),
                    new Context(tenant1, new User(tenant1, 'u:cam:branden-' + r, 'branden-' + r, 'private', 'en_GB', 'BST', 'Branden', 'Visser', 'Branden Visser')),
                    new Context(tenant1, new User(tenant1, 'u:cam:arwhyte-' + r, 'arwhyte-' + r, 'public', 'en_GB', 'BST', 'Anthony', 'Whyte', 'Anthony Whyte')),
                    new Context(tenant2, new User(tenant2, 'u:gt:stuart-' + r, 'stuart-' + r, 'public', 'en_GB', 'BST', 'Stuart', 'Freeman', 'Stuart Freeman'))];
    var done = 0;
    var createUserDone = function(err) {
        if (err) {
            throw err;
        }
        done++;
        if (done === contexts.length) {
            callback(contexts);
        }
    };
    // Create users
    for (var u = 0; u < contexts.length; u++) {
        var user = contexts[u].user();
        PrincipalsAPI.createUser(contexts[u], user.username, 'password' + u, user.visibility, null, null, user.firstName, user.lastName, user.displayName, createUserDone);
    }
};

/**
 * Create a number of groups that will be used inside of a test
 * @param  {Array<Context>}      contexts           Array of contexts that represent the users that will be used in the test
 * @param  {Function(groups)}    callback           Standard callback function
 * @param  {Array<Group>}        callback.groups    Array of group objects that have been created
 */
var setUpGroups = function(contexts, callback) {
    var r = Math.floor(Math.random() * 10000);
    var groups = [new Group(contexts[0].tenant(), null, 'public', 'UI Dev Team ' + r, 'UI Dev Group'),
                  new Group(contexts[3].tenant(), null, 'public', 'Back-end Dev Team ' + r, 'Back-end Dev Group'),
                  new Group(contexts[4].tenant(), null, 'public', 'OAE Team ' + r, 'OAE Team Group')];
    // Create UI Dev Group
    PrincipalsAPI.createGroup(contexts[0], groups[0].name, groups[0].description, function(err, principal_id) {
        groups[0].principal_id = principal_id;
        // Make Bert a member
        PrincipalsAPI.addGroupMember(contexts[0], groups[0].principal_id, contexts[2].user().id, 'member', function(err) {
            // Create Back-end Dev Group
            PrincipalsAPI.createGroup(contexts[3], groups[1].name, groups[1].description, function(err, principal_id) {
                groups[1].principal_id = principal_id;
                // Make Simon a member
                PrincipalsAPI.addGroupMember(contexts[3], groups[1].principal_id, contexts[1].user().id, 'member', function(err) {
                    // Create OAE Team Group
                     PrincipalsAPI.createGroup(contexts[4], groups[2].name, groups[2].description, function(err, principal_id) {
                        groups[2].principal_id = principal_id;
                        // Make Stuart, UI Dev Group and Back-end Dev Group all members
                        PrincipalsAPI.addGroupMembers(contexts[4], groups[2].principal_id, [groups[1].principal_id, groups[0].principal_id, contexts[5].user().id], 'member', function(err) {
                            callback(groups);
                        });
                    });
                });
            });
        });
    });
};

/**
 * Run a number of asserts on a piece of content. This function checks whether a user has access to the content and
 * whether or not it can be seen in the library of the creator
 * @param  {Test}               test                Standard nodeunit test object
 * @param  {Context}            ctx                 Standard context object, representing the currently logged user and its tenant
 * @param  {String}             creator             The user id for which we want to check the library
 * @param  {Content}            contentObj          The content object we'll be running checks for
 * @param  {Boolean}            expectAccess        Whether or not we expect the current user to have access to the piece of content
 * @param  {Boolean}            expectManage        Whether or not we expect the current user to be able to manage the piece of content
 * @param  {Boolean}            expectInLibrary     Whether or not we expect the current user to see the item in the creator's library
 * @param  {Function}           callback            Standard callback function executed when all checks have finished
 */
var checkPieceOfContent = function(test, ctx, libraryToCheck, contentObj, expectAccess, expectManage, expectInLibrary, callback) {
    // Check whether the content can be retrieved
    ContentAPI.getContent(ctx, contentObj.contentId, function(err, retrievedContent) {
        if (expectAccess) {
            test.ok(!err);
            test.ok(retrievedContent.contentId);
            test.equal(retrievedContent.tenant, contentObj.tenant);
            test.equal(retrievedContent.visibility, contentObj.visibility);
            test.equal(retrievedContent.name, contentObj.name);
            test.equal(retrievedContent.description, contentObj.description);
            test.equal(retrievedContent.contentType, contentObj.contentType);
            test.ok(retrievedContent.lastModified);
        } else {
            test.ok(err);
            test.ok(!retrievedContent);
        }
        // Use the hasAccess to check for access to the content
        ContentAPI.hasAccess(ctx, contentObj.contentId, function(err, hasAccess) {
            if (expectAccess) {
                test.ok(!err);
                test.ok(hasAccess);
            } else {
                test.ok(!hasAccess);
            }
            // Use the canManage to check for management of the content
            ContentAPI.canManage(ctx, contentObj.contentId, function(err, canManage) {
                if (expectManage) {
                    test.ok(!err);
                    test.ok(canManage);
                } else {
                    test.ok(!canManage);
                }
                // Check if the item comes back in the library
                ContentAPI.getLibraryItems(ctx, libraryToCheck, null, 10, function(err, contentItems) {
                    // If no logged in user is provided, we expect an error
                    if (!libraryToCheck) {
                        test.ok(err);
                    } else {
                        test.ok(!err);
                        if (expectInLibrary) {
                            test.equal(contentItems.length, 1);
                            test.equal(contentItems[0].contentId, contentObj.contentId);
                        } else {
                            test.equal(contentItems.length, 0);
                        }
                    }
                    callback();
                });
            });
        });
    });
};

//////////////////////
// Creating content //
//////////////////////

/**
 * Test that will attempt to create new content items with various parameter combinations
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createContent = function(test) {
    test.expect(18);

    setUpUsers(function(contexts) {
        // Create one as anon user
        ContentAPI.createContent(new Context(), 'public', 'Test Content 1', 'Test content description 1', 'link', function(err, contentObj) {
            test.ok(err);
            test.ok(!contentObj);
            // Create one with all required fields
            ContentAPI.createContent(contexts[0], 'public', 'Test Content 2', 'Test content description 2', 'link', function(err, contentObj) {
                test.ok(!err);
                test.ok(contentObj.contentId);
                // Create one without description
                ContentAPI.createContent(contexts[0], 'public', 'Test Content 3', null, 'link', function(err, contentObj) {
                    test.ok(!err);
                    test.ok(contentObj.contentId);
                    // Create one without type
                    ContentAPI.createContent(contexts[0], 'public', 'Test Content 4', 'Test content description 4', null, function(err, contentObj) {
                        test.ok(err);
                        test.ok(!contentObj);
                         // Create one with an invalid content type
                        ContentAPI.createContent(contexts[0], 'public', 'Test Content 4', 'Test content description 4', 'GoogleDoc', function(err, contentObj) {
                            test.ok(err);
                            test.ok(!contentObj);
                            // Create one without title
                            ContentAPI.createContent(contexts[0], 'public', null, 'Test content description 5', 'link', function(err, contentObj) {
                                test.ok(err);
                                test.ok(!contentObj);
                                // Create one without permission
                                ContentAPI.createContent(contexts[0], null, 'Test Content 6', 'Test content description 6', 'link', function(err, contentObj) {
                                    test.ok(!err);
                                    test.ok(contentObj.contentId);
                                    // Check if the permission has been set to public (default)
                                    ContentAPI.getContent(contexts[0], contentObj.contentId, function(err, contentObj) {
                                        test.ok(!err);
                                        test.equal(contentObj.visibility, 'public');
                                        // Create one without tenant
                                        ContentAPI.createContent(new Context(null, contexts[0].user()), 'public', 'Test Content 7', 'Test content description 7', 'link', function(err, contentObj) {
                                            test.ok(err);
                                            test.ok(!contentObj);
                                            test.done();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to create a public content item and will verify direct and library access
 * for various people
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createPublicContentItem = function(test) {
    test.expect(45);

    setUpUsers(function(contexts) {
        // Create a public content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'public', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the person who created the content
            checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                // Get the piece of content as a different logged in user
                checkPieceOfContent(test, contexts[1], contexts[0].user().id, contentObj, true, false, true, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(test, new Context(), contexts[0].user().id, contentObj, true, false, true, function() {
                        test.done();
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to create a loggedin content item and will verify direct and library access
 * for various people
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createLoggedinContentItem = function(test) {
    test.expect(37);

    setUpUsers(function(contexts) {
        // Create a logged in content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'loggedin', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the person who created the content
            checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                // Get the piece of content as a different logged in user
                checkPieceOfContent(test, contexts[1], contexts[0].user().id, contentObj, true, false, true, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(test, new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                        test.done();
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to create a private content item and will verify direct and library access
 * for various people
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.createPrivateContentItem = function(test) {
    test.expect(29);

    setUpUsers(function(contexts) {
        // Create a private content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'private', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Get the piece of content as the person who created the content
            checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                // Get the piece of content as a different logged in user
                checkPieceOfContent(test, contexts[1], contexts[0].user().id, contentObj, false, false, false, function() {
                    // Get the piece of content as an anonymous user
                    checkPieceOfContent(test, new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                        test.done();
                    });
                });
            });
        });
    });
};

/////////////////////////
// Content permissions //
/////////////////////////

/**
 * Create a piece of content, make a user a manager, make a user a viewer and test access for all of these as well as library
 * content and the membership list of the content
 * @param  {Test}               test                Standard nodeunit test object
 * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
 *                                                  the current user and the current tenant
 * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
 * @param  {Function(content)}  callback            Standard callback function
 * @param  {Content}            callback.content    Content object that has been created as part of this test
 */
var setUpContentPermissions = function(test, contexts, privacy, callback) {
    // Create a content item
    var contentObj = new Content(contexts[0].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
    ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
        test.ok(!err);
        test.ok(content.contentId);
        contentObj.contentId = content.contentId;
        // Get the piece of content as the person who created the content
        checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
            // Check the list of content members
            ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                test.ok(!err);
                test.equal(_.keys(members).length, 1);
                test.equal(members[contexts[0].user().id], 'manager');
                // Make another user manager of the content
                var permissions = {};
                permissions[contexts[1].user().id] = 'manager';
                ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                    test.ok(!err);
                    // Get the piece of content as the newly added manager
                    checkPieceOfContent(test, contexts[1], contexts[1].user().id, contentObj, true, true, true, function() {
                        ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                            test.ok(!err);
                            test.equal(_.keys(members).length, 2);
                            test.equal(members[contexts[0].user().id], 'manager');
                            test.equal(members[contexts[1].user().id], 'manager');
                            // Make another user member of the content
                            permissions = {};
                            permissions[contexts[2].user().id] = 'viewer';
                            ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                test.ok(!err);
                                // Get the piece of content as the added member
                                checkPieceOfContent(test, contexts[2], contexts[2].user().id, contentObj, true, false, true, function() {
                                    ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                        test.ok(!err);
                                        test.equal(_.keys(members).length, 3);
                                        test.equal(members[contexts[0].user().id], 'manager');
                                        test.equal(members[contexts[1].user().id], 'manager');
                                        test.equal(members[contexts[2].user().id], 'viewer');
                                        // Try to add an existing and non-existing user
                                        permissions = {};
                                        permissions[contexts[4].user().id] = 'viewer';
                                        permissions['nonExistingUser'] = 'viewer';
                                        ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                            test.ok(err);
                                            // Get the piece of content as the member that was part of the invalid setPermissions
                                            checkPieceOfContent(test, contexts[4], contexts[4].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                                    test.ok(!err);
                                                    test.equal(_.keys(members).length, 3);
                                                    test.equal(members[contexts[0].user().id], 'manager');
                                                    test.equal(members[contexts[1].user().id], 'manager');
                                                    test.equal(members[contexts[2].user().id], 'viewer');
                                                    // Remove a manager from the content
                                                    permissions = {};
                                                    permissions[contexts[1].user().id] = false;
                                                    ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                                        test.ok(!err);
                                                        // Get the piece of content as the removed manager
                                                        checkPieceOfContent(test, contexts[1], contexts[1].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                            ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                                                test.ok(!err);
                                                                test.equal(_.keys(members).length, 2);
                                                                test.equal(members[contexts[0].user().id], 'manager');
                                                                test.equal(members[contexts[1].user().id], undefined);
                                                                test.equal(members[contexts[2].user().id], 'viewer');
                                                                callback(contentObj);
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to set permissions on a public piece of content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.publicContentPermissions = function(test) {
    test.expect(125);

    setUpUsers(function(contexts) {
        setUpContentPermissions(test, contexts, 'public', function(contentObj) {
            // Get the piece of content as a non-associated user
            checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, true, false, false, function() {
                // Get the piece of content as an anonymous user
                checkPieceOfContent(test, new Context(), contexts[0].user().id, contentObj, true, false, true, function() {
                    test.done();
                });
            });
        });
    });
};

/**
 * Test that will attempt to set permissions on a loggedin piece of content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.loggedInContentPermissions = function(test) {
    test.expect(117);

    setUpUsers(function(contexts) {
        setUpContentPermissions(test, contexts, 'loggedin', function(contentObj) {
            // Get the piece of content as a non-associated user
            checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, true, false, false, function() {
                // Get the piece of content as an anonymous user
                checkPieceOfContent(test, new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                    test.done();
                });
            });
        });
    });
};

/**
 * Test that will attempt to set permissions on a private piece of content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.privateContentPermissions = function(test) {
    test.expect(96);

    setUpUsers(function(contexts) {
        setUpContentPermissions(test, contexts, 'private', function(contentObj) {
            // Get the piece of content as a non-associated user
            checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, false, false, false, function() {
                // Get the piece of content as an anonymous user
                checkPieceOfContent(test, new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                    test.done();
                });
            });
        });
    });
};

//////////////////////////////////////////////////////
// Content permissions on multiple at the same time //
//////////////////////////////////////////////////////

/**
 * Test that will attempt to set permissions on multiple principals at once. It will add permissions and
 * remove permissions on sets of principals that have all valid principals and some with non-valid principals
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.testMultipleContentPermissions = function(test) {
    test.expect(27);

    setUpUsers(function(contexts) {
        // Create a content item
        var contentObj = new Content(contexts[0].tenant().alias, null, 'public', 'Test Content 1', 'Test content description 1', 'link');
        ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
            test.ok(!err);
            test.ok(content.contentId);
            contentObj.contentId = content.contentId;
            // Set permission on multiple people at the same time (managers and members)
            var permissions = {};
            permissions[contexts[1].user().id] = 'manager';
            permissions[contexts[2].user().id] = 'viewer';
            permissions[contexts[3].user().id] = 'viewer';
            ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                test.ok(!err);
                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                    test.ok(!err);
                    test.equal(_.keys(members).length, 4);
                    test.equal(members[contexts[0].user().id], 'manager');
                    test.equal(members[contexts[1].user().id], 'manager');
                    test.equal(members[contexts[2].user().id], 'viewer');
                    test.equal(members[contexts[3].user().id], 'viewer');
                    // Set permission on multiple people at same time, some remove role
                    permissions = {};
                    permissions[contexts[1].user().id] = false;
                    permissions[contexts[2].user().id] = false;
                    permissions[contexts[4].user().id] = 'viewer';
                    ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                        test.ok(!err);
                        ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                            test.ok(!err);
                            test.equal(_.keys(members).length, 3);
                            test.equal(members[contexts[0].user().id], 'manager');
                            test.equal(members[contexts[3].user().id], 'viewer');
                            test.equal(members[contexts[4].user().id], 'viewer');
                            // Set permission on multiple people at same time (managers and members), some invalid
                            permissions = {};
                            permissions[contexts[1].user().id] = 'manager';
                            permissions[contexts[2].user().id] = 'viewer';
                            permissions['non-existing-user'] = 'viewer';
                            ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                test.ok(err);
                                ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                    test.ok(!err);
                                    test.equal(_.keys(members).length, 3);
                                    test.equal(members[contexts[0].user().id], 'manager');
                                    test.equal(members[contexts[3].user().id], 'viewer');
                                    test.equal(members[contexts[4].user().id], 'viewer');
                                    // Set permission on multiple people at same time, some remove role, some invalid
                                    permissions = {};
                                    permissions[contexts[3].user().id] = false;
                                    permissions[contexts[4].user().id] = false;
                                    permissions['non-existing-user'] = false;
                                    ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                                        test.ok(err);
                                        ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                                            test.ok(!err);
                                            test.equal(_.keys(members).length, 3);
                                            test.equal(members[contexts[0].user().id], 'manager');
                                            test.equal(members[contexts[3].user().id], 'viewer');
                                            test.equal(members[contexts[4].user().id], 'viewer');
                                            test.done();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

//////////////////////
// Content sharing //
/////////////////////

/**
 * Utility function for the sharing tests that will create a new content item, check for successful creation and check that
 * the right set of content members are retrieved
 * @param  {Test}               test                Standard nodeunit test object
 * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
 *                                                  the current user and the current tenant
 * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
 * @param  {Function(content)}  callback            Standard callback function
 * @param  {Content}            callback.content    Content object that has been created as part of this test
 */
var prepareSharing = function(test, contexts, privacy, callback) {
    // Create a content item
    var contentObj = new Content(contexts[0].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
    ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
        test.ok(!err);
        test.ok(content.contentId);
        contentObj.contentId = content.contentId;
        // Get the piece of content as the creator
        checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
            ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err, members) {
                test.ok(!err);
                test.equal(_.keys(members).length, 1);
                test.equal(members[contexts[0].user().id], 'manager');
                callback(contentObj);
             });
        });
    });
};

/**
 * Utility function for the sharing tests that will try to share content, will then check for access to the content by the person
 * the content was shared with. Then the test will check whether that person can see the content's membership list and sees the
 * correct list of members in there
 * @param  {Test}       test                Standard nodeunit test object
 * @param  {Content}    contentObj          Content object that will be shared
 * @param  {Context}    sharerContext       Standard context object that represents the user that will share the content
 * @param  {Context}    shareWithContext    Standard context object that represents the user the context will be shared with. Content access,
 *                                          library presence and membership checks will be run on this user
 * @param  {Boolean}    expectShare         Whether or not we expect that user 1 will be able to share the content with user 2
 * @param  {Boolean}    expectAccess        Whether or not we expect that user 2 will have access to the content after it's been shared with him
 * @param  {Boolean}    expectManage        Whether or not we expect that user 2 will be able to manage the content after it's been shared with him
 * @param  {Boolean}    expectInLibrary     Whether or not we expect user 2 to be able to see the content in his library after it's been shared with him
 * @param  {Function}   callback            Standard callback function
 */
var testSharing = function(test, contentObj, sharerContext, shareWithContext, expectShare, expectAccess, expectManage, expectInLibrary, expectedMembers, callback) {
    ContentAPI.shareContent(sharerContext, contentObj.contentId, [shareWithContext.user().id], function(err) {
        if (expectShare) {
            test.ok(!err);
        } else {
            test.ok(err);
        }
        checkPieceOfContent(test, shareWithContext, shareWithContext.user() ? shareWithContext.user().id : null, contentObj, expectAccess, expectManage, expectInLibrary, function() {
            ContentAPI.getContentMembers(shareWithContext, contentObj.contentId, function(err, members) {
                if (expectedMembers) {
                    test.ok(!err);
                    test.equal(_.keys(members).length, _.keys(expectedMembers).length);
                    for (var member in members) {
                        test.ok(members[member], expectedMembers[member]);
                    }
                } else {
                    test.ok(err);
                }
                callback();
            });
        });
    });
};

/**
 * Test that will attempt to create a public piece of content, share it as the manager, share it as a member, share it
 * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
 * presence and the correct content membership list 
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.publicSharing = function(test) {
    test.expect(122);

    setUpUsers(function(contexts) {
        // Create a public content item
        prepareSharing(test, contexts, 'public', function(contentObj) {
            // Share as content owner
            var expectedMembers = {};
            expectedMembers[contexts[0].user().id] = 'manager';
            expectedMembers[contexts[1].user().id] = 'viewer';
            testSharing(test, contentObj, contexts[0], contexts[1], true, true, false, true, expectedMembers, function() {
                // Share as content member
                expectedMembers[contexts[2].user().id] = 'viewer';
                testSharing(test, contentObj, contexts[1], contexts[2], true, true, false, true, expectedMembers, function() {
                    // Share as other user, add to own library
                    expectedMembers[contexts[3].user().id] = 'viewer';
                    testSharing(test, contentObj, contexts[2], contexts[3], true, true, false, true, expectedMembers, function() {
                        // Share with the content manager, making sure that he's still the content manager after sharing
                        testSharing(test, contentObj, contexts[3], contexts[0], true, true, true, true, expectedMembers, function() {
                            // Share as anonymous
                            testSharing(test, contentObj, new Context(), contexts[4], false, true, false, false, expectedMembers, function() {
                                test.done();
                            }); 
                        });
                    }); 
                });  
            });            
        });
    });
};

/**
 * Test that will attempt to create a loggedin piece of content, share it as the manager, share it as a member, share it
 * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
 * presence and the correct content membership list 
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.loggedInSharing = function(test) {
    test.expect(122);

    setUpUsers(function(contexts) {
        // Create a loggedin content item
        prepareSharing(test, contexts, 'loggedin', function(contentObj) {
            // Share as content owner
            var expectedMembers = {};
            expectedMembers[contexts[0].user().id] = 'manager';
            expectedMembers[contexts[1].user().id] = 'viewer';
            testSharing(test, contentObj, contexts[0], contexts[1], true, true, false, true, expectedMembers, function() {
                // Share as content member
                expectedMembers[contexts[2].user().id] = 'viewer';
                testSharing(test, contentObj, contexts[1], contexts[2], true, true, false, true, expectedMembers, function() {
                    // Share as other user, add to own library
                    expectedMembers[contexts[3].user().id] = 'viewer';
                    testSharing(test, contentObj, contexts[3], contexts[3], true, true, false, true, expectedMembers, function() {
                        // Share with the content manager, making sure that he's still the content manager after sharing
                        testSharing(test, contentObj, contexts[3], contexts[0], true, true, true, true, expectedMembers, function() {
                            // Share as anonymous
                            testSharing(test, contentObj, new Context(), contexts[4], false, true, false, false, expectedMembers, function() {
                                test.done();
                            });
                        });
                    }); 
                });  
            });            
        });
    });
};

/**
 * Test that will attempt to create a private piece of content, share it as the manager, share it as a member, share it
 * as a non-related user and share it as an anonymous user. For each of those, it will check for content access, library
 * presence and the correct content membership list 
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.privateSharing = function(test) {
    test.expect(83);

    setUpUsers(function(contexts) {
        // Create a private content item
        prepareSharing(test, contexts, 'private', function(contentObj) {
            // Share as content owner
            var expectedMembers = {};
            expectedMembers[contexts[0].user().id] = 'manager';
            expectedMembers[contexts[1].user().id] = 'viewer';
            testSharing(test, contentObj, contexts[0], contexts[1], true, true, false, true, expectedMembers, function() {
                // Share as content member
                testSharing(test, contentObj, contexts[1], contexts[2], false, false, false, false, null, function() {
                    // Share as other user, add to own library
                    testSharing(test, contentObj, contexts[3], contexts[3], false, false, false, false, null, function() {
                        // Share with the content manager, making sure that he's still the content manager after sharing
                        testSharing(test, contentObj, contexts[1], contexts[0], false, true, true, true, expectedMembers, function() {
                            // Share as anonymous
                            testSharing(test, contentObj, new Context(), contexts[4], false, false, false, false, null, function() {
                                test.done();
                            });
                        });
                    }); 
                });  
            });            
        });
    });
};

////////////////////////////////////////////////////
// Content sharing with multiple at the same time //
////////////////////////////////////////////////////

/**
 * Test that will attempt to use the shareContent function with multiple people and/or groups at the same time. Invalid
 * principal ids will be added in as well.
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.testMultipleSharing = function(test) {
    test.expect(76);

    setUpUsers(function(contexts) {
        // Create a piece of content
        prepareSharing(test, contexts, 'private', function(contentObj) {
            // Share with multiple people at the same time
            ContentAPI.shareContent(contexts[0], contentObj.contentId, [contexts[1].user().id, contexts[2].user().id, contexts[3].user().id], function(err) {
                test.ok(!err);
                // Check that these people have access
                checkPieceOfContent(test, contexts[1], contexts[1].user().id, contentObj, true, false, true, function() {
                    checkPieceOfContent(test, contexts[2], contexts[2].user().id, contentObj, true, false, true, function() {
                        checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, true, false, true, function() {
                            checkPieceOfContent(test, contexts[4], contexts[4].user().id, contentObj, false, false, false, function() {
                                // Share with multiple people, of which some are invalid users
                                ContentAPI.shareContent(contexts[0], contentObj.contentId, [contexts[4].user().id, 'nonExistingUser'], function(err) {
                                    test.ok(err);
                                    checkPieceOfContent(test, contexts[4], contexts[4].user().id, contentObj, false, false, false, function() {
                                        test.done();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

//////////////////////////////////
// Group related content access //
//////////////////////////////////

/**
 * Utility function for the for group-related content access. The following situation is assumed:
 * 1) UI Dev Group has 2 members, Nicolaas is a manager, Bert is a manager
 * 2) Back-end Dev Group has 2 members, Branden is a manager, Simon is a member
 * 3) OAE Team Group has 4 members, Anthony is a manager, Stuart is a member
 *    UI Dev Group is a member and Back-end Dev Group is a member
 * 
 * The following steps will be taken:
 * 1) A content item is created with the specified visibility
 * 2) Permissions are set on the content
 *  2.1) The UI Dev Group is made a viewer
 *  2.2) Simon is made a viewer
 *  2.3) We check that the content is part of the UI Dev Group's library
 *  2.4) We verify that Simon has access to content
 *  2.5) We verify that Bert and Nico have access to the content through the UI Dev Group membership
 *  2.6) We verify that the content doesn't show in the library of OAE Team and the Back-end team
 *  2.7) We verify that Stuart and Branden don't have access to the content
 * 3) The content is shared with the OAE Team Group
 *  3.1) We verify that Stuart and Branden now have access to the content
 *  3.2) We verify that the content shows in OAE Team and UI Dev team's library and not in the Back-end Team's library
 * 4) The Back-end Team Group is made a manager of the content
 *  4.1) We verify that Simon and Branden are now a manager
 *  4.2) We verify that Stuart is not a manager
 * 5) The permissions for OAE Team Group and Back-end Team Group are removed from the content
 *  5.1) We verify that Branden no longer has access to the content
 *  5.2) We verify that Simon and Nicolaas still have access to the content
 * @param  {Test}               test                Standard nodeunit test object
 * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
 *                                                  the current user and the current tenant
 * @param  {Array<Group>}       groups              Array of group objects that will be used as part of this test
 * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
 * @param  {Function}           callback            Standard callback function
 */
var testGroupAccess = function(test, contexts, groups, privacy, callback) {
    // Anthony creates a content item
    var contentObj = new Content(contexts[4].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
    ContentAPI.createContent(contexts[4], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
        test.ok(!err);
        test.ok(content.contentId);
        contentObj.contentId = content.contentId;

        // Set permissions on content --> Make UI dev team member, make Simon a member
        var permissions = {};
        permissions[groups[0].principal_id] = 'viewer';
        permissions[contexts[1].user().id] = 'viewer';
        ContentAPI.setContentPermissions(contexts[4], contentObj.contentId, permissions, function(err) {
            test.ok(!err);
            // Check that UI Dev Team, Bert, Nico and Simon have member access
            checkPieceOfContent(test, contexts[2], groups[0].principal_id, contentObj, true, false, true, function() {
                checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, false, false, function() {
                    checkPieceOfContent(test, contexts[2], contexts[2].user().id, contentObj, true, false, false, function() {
                        // Check that it shows in UI Dev Team's library
                        ContentAPI.getLibraryItems(contexts[0], groups[0].principal_id, null, 10, function(err, contentItems) {
                            test.ok(!err);
                            test.equal(contentItems.length, 1);
                            test.equal(contentItems[0].contentId, contentObj.contentId);
                            // Check that it shows in Simon's library
                            ContentAPI.getLibraryItems(contexts[1], contexts[1].user().id, null, 10, function(err, contentItems) {
                                test.ok(!err);
                                test.equal(contentItems.length, 1);
                                test.equal(contentItems[0].contentId, contentObj.contentId);
                                // Check that it doesn't show in Nico's library
                                ContentAPI.getLibraryItems(contexts[0], contexts[0].user().id, null, 10, function(err, contentItems) {
                                    test.ok(!err);
                                    test.equal(contentItems.length, 0);
                                    // Check that it doesn't show in Bert's library
                                    ContentAPI.getLibraryItems(contexts[2], contexts[2].user().id, null, 10, function(err, contentItems) {
                                        test.ok(!err);
                                        test.equal(contentItems.length, 0);
                                        // Check that it doesn't show in OAE Team's and Back-end team's library
                                        ContentAPI.getLibraryItems(contexts[4], groups[1].principal_id, null, 10, function(err, contentItems) {
                                            test.ok(!err);
                                            test.equal(contentItems.length, 0);
                                            ContentAPI.getLibraryItems(contexts[4], groups[2].principal_id, null, 10, function(err, contentItems) {
                                                test.ok(!err);
                                                test.equal(contentItems.length, 0);
                                                // Check that Stuart doesn't have access
                                                checkPieceOfContent(test, contexts[5], contexts[5].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                    // Check that Branden doesn't have access
                                                    checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {

                                                        // Share with the OAE Team group
                                                        ContentAPI.shareContent(contexts[4], contentObj.contentId, [groups[2].principal_id], function(err) {
                                                            // Check that Stuart has access
                                                            checkPieceOfContent(test, contexts[5], contexts[5].user().id, contentObj, true, false, false, function() {
                                                                // Check that Branden has access
                                                                checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, true, false, false, function() {
                                                                    // Check that it shows in OAE Team and UI Dev team's library and not in the Back-End Team's library
                                                                    ContentAPI.getLibraryItems(contexts[4], groups[2].principal_id, null, 10, function(err, contentItems) {
                                                                        test.ok(!err);
                                                                        test.equal(contentItems.length, 1);
                                                                        test.equal(contentItems[0].contentId, contentObj.contentId);
                                                                        ContentAPI.getLibraryItems(contexts[0], groups[0].principal_id, null, 10, function(err, contentItems) {
                                                                            test.ok(!err);
                                                                            test.equal(contentItems.length, 1);
                                                                            test.equal(contentItems[0].contentId, contentObj.contentId);
                                                                            ContentAPI.getLibraryItems(contexts[1], groups[1].principal_id, null, 10, function(err, contentItems) {
                                                                                test.ok(!err);
                                                                                test.equal(contentItems.length, 0);

                                                                                // Make Back-end team manager
                                                                                permissions = {};
                                                                                permissions[groups[1].principal_id] = 'manager';
                                                                                ContentAPI.setContentPermissions(contexts[4], contentObj.contentId, permissions, function(err) {
                                                                                    test.ok(!err);
                                                                                    // Check that Simon and Branden are manager, check that Stuart is not a manager
                                                                                    checkPieceOfContent(test, contexts[1], contexts[1].user().id, contentObj, true, true, true, function() {
                                                                                        checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, true, true, false, function() {
                                                                                            checkPieceOfContent(test, contexts[5], contexts[5].user().id, contentObj, true, false, false, function() {
  
                                                                                                // Remove permission for Back-end team manager and OAE Team
                                                                                                permissions = {};
                                                                                                permissions[groups[1].principal_id] = false;
                                                                                                permissions[groups[2].principal_id] = false;
                                                                                                ContentAPI.setContentPermissions(contexts[4], contentObj.contentId, permissions, function(err) {
                                                                                                    test.ok(!err);
                                                                                                    // Check that Branden no longer has access, but Simon and Nico still do
                                                                                                    checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, false, false, function() {
                                                                                                        checkPieceOfContent(test, contexts[1], contexts[1].user().id, contentObj, true, false, true, function() {
                                                                                                            checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, privacy === 'private' ? false : true, false, false, function() {
                                                                                                                callback();
                                                                                                            });
                                                                                                        });
                                                                                                    });
                                                                                                });
                                                                                            });
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Test that will verify group-related access for public content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.testPublicContentGroupAccess = function(test) {
    test.expect(201);
    
    setUpUsers(function(contexts) {
        setUpGroups(contexts, function(groups) {
            testGroupAccess(test, contexts, groups, 'public', function(){
                test.done();
            });
        });
    });
};

/**
 * Test that will verify group-related access for logged in content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.testLoggedInContentGroupAccess = function(test) {
    test.expect(201);
    
    setUpUsers(function(contexts) {
        setUpGroups(contexts, function(groups) {
            testGroupAccess(test, contexts, groups, 'loggedin', function(){
                test.done();
            });
        });
    });
};

/**
 * Test that will verify group-related access for private content
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.testPrivateContentGroupAccess = function(test) {
    test.expect(180);
    
    setUpUsers(function(contexts) {
        setUpGroups(contexts, function(groups) {
            testGroupAccess(test, contexts, groups, 'private', function(){
                test.done();
            });
        });
    });
};

///////////////
// Libraries //
///////////////

// TODO: Tests around libraries

//////////////////////
// Deleting content //
//////////////////////

/**
 * Utitility function for the content delete test. This function will create a piece of content, add a manager and a viewer using the setPermissions function,
 * share the content with an additional user. After each of these, the expected access will be checked. After that, the test will attempt to delete the content
 * as an anonymous user, a logged in user, a content member and a content manager. After that, the tests check if each of those can still access the content,
 * whether or not all roles have deleted, whether or not all libraries have been updated and whether or not the content members list is no longer available
 * @param  {Test}               test                Standard nodeunit test object
 * @param  {Array<Context>}     contexts            Array of context objects that represent a request cycle and contain
 *                                                  the current user and the current tenant
 * @param  {User}               privacy             Privacy setting for the piece of content. Can be public, loggedin or private
 * @param  {Function(content)}  callback            Standard callback function
 */
var prepareDelete = function(test, contexts, privacy, callback) {
    // Create a content item
    var contentObj = new Content(contexts[0].tenant().alias, null, privacy, 'Test Content 1', 'Test content description 1', 'link');
    ContentAPI.createContent(contexts[0], contentObj.visibility, contentObj.name, contentObj.description, contentObj.contentType, function(err, content) {
        test.ok(!err);
        test.ok(content.contentId);
        contentObj.contentId = content.contentId;
        // Get the piece of content as the creator
        checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
            // Make a user a manager and make a user a member
            var permissions = {};
            permissions[contexts[1].user().id] = 'manager';
            permissions[contexts[2].user().id] = 'viewer';
            ContentAPI.setContentPermissions(contexts[0], contentObj.contentId, permissions, function(err) {
                test.ok(!err);
                checkPieceOfContent(test, contexts[1], contexts[1].user().id, contentObj, true, true, true, function() {
                    checkPieceOfContent(test, contexts[2], contexts[2].user().id, contentObj, true, false, true, function() {
                        // Share the content with another user
                        ContentAPI.shareContent(contexts[1], contentObj.contentId, [contexts[3].user().id], function(err) {
                            test.ok(!err);
                            checkPieceOfContent(test, contexts[3], contexts[3].user().id, contentObj, true, false, true, function() {
                                // Try to delete the content as an anonymous user
                                ContentAPI.deleteContent(new Context(), contentObj.contentId, function(err) {
                                    test.ok(err);
                                    // Check that it is still around
                                    checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                                        // Try to delete the content as a logged in user
                                        ContentAPI.deleteContent(contexts[4], contentObj.contentId, function(err) {
                                            test.ok(err);
                                            // Check that it is still around
                                            checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                                                // Try to delete the content as a content member
                                                ContentAPI.deleteContent(contexts[3], contentObj.contentId, function(err) {
                                                    test.ok(err);
                                                    // Check that it is still around
                                                    checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, true, true, true, function() {
                                                        // Try to delete the content as a content manager
                                                        ContentAPI.deleteContent(contexts[0], contentObj.contentId, function(err) {
                                                            test.ok(!err);
                                                            // Check to see if the manager, a member, a logged in user and the anonymous user still have access
                                                            checkPieceOfContent(test, contexts[0], contexts[0].user().id, contentObj, false, false, false, function() {
                                                                checkPieceOfContent(test, contexts[2], contexts[2].user().id, contentObj, false, false, false, function() {
                                                                    checkPieceOfContent(test, contexts[4], contexts[4].user().id, contentObj, false, false, false, function() {
                                                                        checkPieceOfContent(test, new Context(), contexts[0].user().id, contentObj, false, false, false, function() {
                                                                            // Check roles api for the role on the content for a manager, a member and a logged in user
                                                                            RolesAPI.getRole(contexts[0].user().id, contentObj.contentId, function(err, role) {
                                                                                test.ok(!role);
                                                                                RolesAPI.getRole(contexts[2].user().id, contentObj.contentId, function(err, role) {
                                                                                    test.ok(!role);
                                                                                    RolesAPI.getRole(contexts[4].user().id, contentObj.contentId, function(err, role) {
                                                                                        test.ok(!role);
                                                                                        // Check whether the list of members is no longer accessible
                                                                                        ContentAPI.getContentMembers(contexts[0], contentObj.contentId, function(err) {
                                                                                            test.ok(err);
                                                                                            callback();
                                                                                        });
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Test that will attempt to create a public piece of content and delete it
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.publicDelete = function(test) {
    test.expect(139);

    setUpUsers(function(contexts) {
        prepareDelete(test, contexts, 'public', function() {
            test.done();
        });
    });
};

/**
 * Test that will attempt to create a logged in piece of content and delete it
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.loggedInDelete = function(test) {
    test.expect(139);

    setUpUsers(function(contexts) {
        prepareDelete(test, contexts, 'loggedin', function() {
            test.done();
        });
    });
};

/**
 * Test that will attempt to create a private piece of content and delete it
 * @param  {Test}       test        Standard nodeunit test object
 */
module.exports.privateDelete = function(test) {
    test.expect(139);

    setUpUsers(function(contexts) {
        prepareDelete(test, contexts, 'private', function() {
            test.done();
        });
    });
};

/////////////////////////////
// Update content metadata //
/////////////////////////////

// TODO: Tests around updating metadata
// TODO: Tests around updating visibility settings