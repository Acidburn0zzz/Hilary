/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzUtil = require('oae-authz/lib/util');
var ResourceActions = require('oae-resource/lib/actions');
var ResourceConstants = require('oae-resource/lib/constants').ResourceConstants;

var DiscussionConstants = require('oae-discussions/lib/constants').DiscussionConstants;
var DiscussionsDAO = require('oae-discussions/lib/internal/dao');

var log = require('oae-logger').logger('oae-discussions-invitations')

ResourceActions.when(ResourceConstants.events.INVITATION_ACCEPTED, function(ctx, invitationHashes, memberChangeInfosByResourceId, callback) {
    var memberChangeInfosByDiscussionId = {};
    _.chain(memberChangeInfosByResourceId)
        .keys()
        .filter(_isDiscussionId)
        .each(function(discussionId) {
            memberChangeInfosByDiscussionId[discussionId] = memberChangeInfosByResourceId[discussionId];
        })
        .value();
    if (_.isEmpty(memberChangeInfosByDiscussionId)) {
        return callback();
    }

    var discussionIds = _.keys(memberChangeInfosByDiscussionId);
    DiscussionsDAO.getDiscussionsById(discussionIds, null, function(err, discussions) {
        if (err) {
            log().warn({
                'err': err,
                'discussionIds': discussionIds
            }, 'An error occurred while getting discussions to update discussion libraries after an invitation was accepted');
            return callback();
        }

        // Invoke the "accept invitation" handler with the resources when we have them
        callback(null, discussions);

        // Fire members update tasks for each discussion
        _.each(discussions, function(discussion) {
            var memberChangeInfo = memberChangeInfosByDiscussionId[discussion.id];
            if (_.isEmpty(memberChangeInfo.changes)) {
                return;
            }

            return DiscussionsAPI.emit(DiscussionsConstants.events.UPDATED_DISCUSSION_MEMBERS, ctx, discussion, memberChangeInfo);
        });
    });
});

var _isDiscussionId = function(discussionId) {
    return (AuthzUtil.isResourceId(discussionId) && discussionId.indexOf('d:') === 0);
};
