/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var OAE = require('oae-util/lib/oae');
var PreviewProcessorAPI = require('oae-preview-processor');
var Util = require('oae-util/lib/util');

var DiscussionsAPI = require('oae-discussions');
var DiscussionsConstants = require('oae-discussions/lib/constants').DiscussionsConstants;


/**
 * @REST postDiscussionCreate
 *
 * Create a new discussion
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /discussion/create
 * @FormParam   {string}            description         A longer description for the discussion
 * @FormParam   {string}            displayName         The display name of the discussion
 * @FormParam   {string[]}          [managers]          Unique identifier(s) for users and groups to add as manager of the discussion. The user creating the discussion will be added as a manager automatically
 * @FormParam   {string[]}          [members]           Unique identifier(s) for users and groups to add as members of the discussion
 * @FormParam   {string}            [visibility]        The visibility of the discussion. Defaults to the configured tenant default          [loggedin,private,public]
 * @Return      {BasicDiscussion}                       The created discussion
 */
OAE.tenantRouter.on('post', '/api/discussion/create', function(req, res) {
    var members = {};
    if (_.isArray(req.body.managers)) {
        _.each(req.body.managers, function(manager) {
            members[manager] = DiscussionsConstants.roles.MANAGER;
        });
    } else if (_.isString(req.body.managers)) {
        members[req.body.managers] = DiscussionsConstants.roles.MANAGER;
    }

    if (_.isArray(req.body.members)) {
        _.each(req.body.members, function(member) {
            members[member] = DiscussionsConstants.roles.MEMBER;
        });
    } else if (_.isString(req.body.members)) {
        members[req.body.members] = DiscussionsConstants.roles.MEMBER;
    }

    DiscussionsAPI.Discussions.createDiscussion(req.ctx, req.body.displayName, req.body.description, req.body.visibility, members, null, function(err, discussion) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, discussion);
    });
});

/**
 * @REST postDiscussionDiscussionId
 *
 * Update a discussion
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /discussion/{discussionId}
 * @PathParam   {string}        discussionId        The id of the discussion to update
 * @FormParam   {string}        [description]       Updated description for the discussion
 * @FormParam   {string}        [displayName]       Updated display name for the discussion
 * @FormParam   {string}        [visibility]        Updated visibility for the discussion           [loggedin,private,public]
 * @Return      {BasicDiscussion}                   The updated discussion
 */
OAE.tenantRouter.on('post', '/api/discussion/:discussionId', function(req, res) {
    DiscussionsAPI.Discussions.updateDiscussion(req.ctx, req.params.discussionId, req.body, function(err, discussion) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, discussion);
    });
});

/**
 * @REST deleteDiscussionDiscussionId
 *
 * Delete a discussion
 *
 * @Server      tenant
 * @Method      DELETE
 * @Path        /discussion/{discussionId}
 * @PathParam   {string}        discussionId        The id of the discussion to delete
 */
OAE.tenantRouter.on('delete', '/api/discussion/:discussionId', function(req, res) {
    DiscussionsAPI.Discussions.deleteDiscussion(req.ctx, req.params.discussionId, function(err, message) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, message);
    });
});

/**
 * @REST getDiscussionLibraryPrincipalId
 *
 * Get the discussions library items for a user or group
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /discussion/library/{principalId}
 * @PathParam   {string}                principalId         The id of the principal whose discussion library to fetch
 * @QueryParam  {number}                [limit]             The maximum number of results to return. Default: 10
 * @QueryParam  {string}                [start]             The discussion ordering token from which to start fetching discussions
 * @Return      {DiscussionsLibrary}                        The discussions library items for the specified user or group
 */
OAE.tenantRouter.on('get', '/api/discussion/library/:principalId', function(req, res) {
    var limit = Util.getNumberParam(req.query.limit, 12, 1, 25);
    DiscussionsAPI.Discussions.getDiscussionsLibrary(req.ctx, req.params.principalId, req.query.start, limit, function(err, discussions, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, {'results': discussions, 'nextToken': nextToken});
    });
});

/**
 * @REST deleteDiscussionLibraryPrincipalIdDiscussionId
 *
 * Remove a discussion from a discussion library
 *
 * @Server      tenant
 * @Method      DELETE
 * @Path        /discussion/library/{principalId}/{discussionId}
 * @PathParam   {string}                discussionId        The id of the discussion to remove from the library
 * @PathParam   {string}                principalId         The id of the principal from whose discussion library to remove the discussion
 */
OAE.tenantRouter.on('delete', '/api/discussion/library/:principalId/:discussionId', function(req, res) {
    DiscussionsAPI.Discussions.removeDiscussionFromLibrary(req.ctx, req.params.principalId, req.params.discussionId, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200);
    });
});

/**
 * @REST getDiscussionDiscussionId
 *
 * Get a full discussion profile
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /discussion/{discussionId}
 * @PathParam   {string}                discussionId        The id of the discussion to get
 * @Return      {Discussion}                                Full discussion profile
 */
OAE.tenantRouter.on('get', '/api/discussion/:discussionId', function(req, res) {
    DiscussionsAPI.Discussions.getFullDiscussionProfile(req.ctx, req.params.discussionId, function(err, discussion) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, discussion);
    });
});


/**
 * @REST postDiscussionDiscussionIdShare
 *
 * Share a discussion
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /discussion/{discussionId}/share
 * @PathParam   {string}                discussionId        The id of the discussion to share
 * @FormParam   {string[]}              members             Unique identifier(s) for users and groups to share the discussion with
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/discussion/:discussionId/share', function(req, res) {
    var members = (_.isArray(req.body.members)) ? req.body.members : [req.body.members];
    members = _.compact(members);

    DiscussionsAPI.Discussions.shareDiscussion(req.ctx, req.params.discussionId, members, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200);
    });
});

/**
 * @REST postDiscussionDiscussionIdMembers
 *
 * Update the members of a discussion
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /discussion/{discussionId}/members
 * @PathParam   {string}                    discussionId        The id of the discussion to update the members for
 * @BodyParam   {DiscussionMembersUpdate}   body                Object that describes the membership updates to apply to the discussion
 * @Return      {void}
 */
OAE.tenantRouter.on('post', '/api/discussion/:discussionId/members', function(req, res) {
    // Parse the incoming false values
    var permissionUpdates = {};
    console.log(req.body)
    _.each(req.body, function(value, key) {
        permissionUpdates[key] = Util.castToBoolean(value);
    });

    DiscussionsAPI.Discussions.setDiscussionPermissions(req.ctx, req.params.discussionId, permissionUpdates, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200);
    });
});

/**
 * @REST getDiscussionDiscussionIdMembers
 *
 * Get discussion members
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /discussion/{discussionId}/members
 * @PathParam   {string}                discussionId        Unique identifier for discusion to share
 * @QueryParam  {number}                [limit]             Maximum number of users to return (defaults to 10, limited to between 1 and 25)
 * @QueryParam  {string}                [start]             Marker for continuing search (starts at beginning by default)
 * @Return      {MembersResponse}                           Members of the specified discussion
 */
OAE.tenantRouter.on('get', '/api/discussion/:discussionId/members', function(req, res) {
    var limit = Util.getNumberParam(req.query.limit, 10, 1, 25);
    DiscussionsAPI.Discussions.getDiscussionMembers(req.ctx, req.params.discussionId, req.query.start, limit, function(err, members, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, {'results': members, 'nextToken': nextToken});
    });
});


/**
 * @REST getDiscussionDiscussionIdMessages
 *
 * Get a list of messages from the discussion
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /discussion/{discussionId}/messages
 * @PathParam   {string}                discussionId        Unique identifier for discusion
 * @QueryParam  {number}                [limit]             Maximum number of messages to return (defaults to 10, limited to between 1 and 25)
 * @QueryParam  {string}                [start]             Marker for continuing search (starts at beginning by default)
 * @Return      {MessagesResponse}                          Messages in the specified discussion
 */
OAE.tenantRouter.on('get', '/api/discussion/:discussionId/messages', function(req, res) {
    var limit = Util.getNumberParam(req.query.limit, 10, 1, 25);
    DiscussionsAPI.Discussions.getMessages(req.ctx, req.params.discussionId, req.query.start, limit, function(err, messages, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, {'results': messages, 'nextToken': nextToken});
    });
});

/**
 * @REST postDiscussionDiscussionIdMessages
 *
 * Create a new message in a discussion
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /discussion/{discussionId}/messages
 * @PathParam   {string}        discussionId        Unique identifier for discusion for new message
 * @FormParam   {string}        [body]              Content of new message
 * @FormParam   {string}        [replyTo]           Created time for message to which the new message is a reply
 * @Return      {Message}                           New message object
 */
OAE.tenantRouter.on('post', '/api/discussion/:discussionId/messages', function(req, res) {
    DiscussionsAPI.Discussions.createMessage(req.ctx, req.params.discussionId, req.body.body, req.body.replyTo, function(err, message) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, message);
    });
});

/**
 * @REST deleteDiscussionDiscussionIdMessagesCreated
 *
 * Delete a message in a discussion
 *
 * @Server      tenant
 * @Method      DELETE
 * @Path        /discussion/{discussionId}/messages/{created}
 * @PathParam   {string}                created             Creation time of message to delete
 * @PathParam   {string}                discussionId        Unique identifier for discusion containing message
 * @Return      {Message}                                   Deleted message object
 */
OAE.tenantRouter.on('delete', '/api/discussion/:discussionId/messages/:created', function(req, res) {
    DiscussionsAPI.Discussions.deleteMessage(req.ctx, req.params.discussionId, req.params.created, function(err, message) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        res.send(200, message);
    });
});
