/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/**
 * @RESTModel BasicDiscussion
 *
 * @Required    [created,createdBy,description,displayName,id,lastModified,profilePath,resourceType,tenant,visibility]
 * @Property    {number}        created                 Time discussion was created (epoch format)
 * @Property    {string}        createdBy               Unique identifier of user that created discussion
 * @Property    {string}        description             Description of discussion
 * @Property    {string}        displayName             Name to display for discussion
 * @Property    {string}        id                      Unique identifier for discusion
 * @Property    {number}        lastModified            Time discussion was last modified (epoch format)
 * @Property    {string}        profilePath             URL to discussion page
 * @Property    {string}        resourceType            Type of resource (discussion)
 * @Property    {Tenant}        tenant                  Tenant for discussion
 * @Property    {string}        visibility              Visibility of discussion        [loggedin,private,public]
 */

/**
 * @RESTModel Discussion
 *
 * @Required    [canPost,canShare,created,createdBy,description,displayName,id,isManager,lastModified,profilePath,resourceType,signature,tenant,visibility]
 * @Property    {boolean}       canPost                 Is current user allowed to post messages to discussion
 * @Property    {boolean}       canShare                Is current user allowed to share discussion
 * @Property    {number}        created                 Time discussion was created (epoch format)
 * @Property    {User}          createdBy               Full profile of user that created discussion
 * @Property    {string}        description             Description of discussion
 * @Property    {string}        displayName             Name to display for discussion
 * @Property    {string}        id                      Unique identifier for discusion
 * @Property    {boolean}       isManager               Is current user allowed to manage discussion
 * @Property    {number}        lastModified            Time discussion was last modified (epoch format)
 * @Property    {string}        profilePath             URL to discussion page
 * @Property    {string}        resourceType            Type of resource (discussion)
 * @Property    {Signature}     signature               Access control information for discussion
 * @Property    {Tenant}        tenant                  Tenant for discussion
 * @Property    {string}        visibility              Visibility of discussion        [loggedin,private,public]
 */

/**
 * @RESTModel DiscussionsLibrary
 *
 * @Required  [nextToken,results]
 * @Property  {Discussion[]}    results                 Array of discussions
 * @Property  {string}          nextToken               Marker to allow continuation of search (empty if search has been exhausted)
 */

/**
 * @RESTModel DiscussionMembersUpdate
 *
 * @Required    []
 * @Property    {string}        {principalId}           The role to apply to the named principal. If the value is `false`, the principal will be revoked access       [false,manager,member]
 */

/**
 * @RESTModel Message
 *
 * @Required    [created,id,level,replyTo]
 * @Property    {string}        body                    Content of message
 * @Property    {string}        created                 Time message was created (epoch format)
 * @Property    {User}          createdBy               User that created message (not present if message deleted)
 * @Property    {string}        deleted                 Time message was deleted (epoch format)
 * @Property    {string}        id                      Unique identifier for message
 * @Property    {number}        level                   Nesting level within message/replies (root is 0)
 * @Property    {string}        messageBoxId            Unique identifier of discussion
 * @Property    {string}        replyTo                 Creation time of parent message
 * @Property    {string}        threadKey               Unique identifier for message thread
 */

/**
 * @RESTModel MessagesResponse
 *
 * @Required    [nextToken,results]
 * @Property    {Message[]}     results                 Array of messages
 * @Property    {string}        nextToken               Marker to allow continuation of search (empty if search has been exhausted)
 */
