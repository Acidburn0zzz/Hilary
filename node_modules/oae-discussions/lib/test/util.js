/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var ShortId = require('shortid');
var util = require('util');

var ConfigTestsUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var setupMultiTenantPrivacyEntities = module.exports.setupMultiTenantPrivacyEntities = function(callback) {
    _createMultiPrivacyTenants(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
        _setupTenant(publicTenant, function() {
            _setupTenant(publicTenant1, function() {
                _setupTenant(privateTenant, function() {
                    _setupTenant(privateTenant1, function() {
                        return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                    });
                });
            });
        });
    });
};

var _setupTenant = function(tenant, callback) {
    _createMultiPrivacyUsers(tenant.adminRestCtx, function(publicUser, loggedinUser, privateUser) {
        _createMultiPrivacyDiscussions(tenant.adminRestCtx, function(publicDiscussion, loggedinDiscussion, privateDiscussion) {
            tenant.publicUser = publicUser;
            tenant.loggedinUser = loggedinUser;
            tenant.privateUser = privateUser;
            tenant.publicDiscussion = publicDiscussion;
            tenant.loggedinDiscussion = loggedinDiscussion;
            tenant.privateDiscussion = privateDiscussion;
            return callback();
        });
    });
};

var _createMultiPrivacyUsers = function(restCtx, callback) {
    _createUserWithVisibility(restCtx, 'public', function(publicUser) {
        _createUserWithVisibility(restCtx, 'loggedin', function(loggedinUser) {
            _createUserWithVisibility(restCtx, 'private', function(privateUser) {
                return callback(publicUser, loggedinUser, privateUser);
            });
        });
    });
};

var _createMultiPrivacyDiscussions = function(restCtx, callback) {
    _createDiscussionWithVisibility(restCtx, 'public', function(publicDiscussion) {
        _createDiscussionWithVisibility(restCtx, 'loggedin', function(loggedinDiscussion) {
            _createDiscussionWithVisibility(restCtx, 'private', function(privateDiscussion) {
                return callback(publicDiscussion, loggedinDiscussion, privateDiscussion);
            });
        });
    });
};

var _createMultiPrivacyTenants = function(callback) {
    var randomId = ShortId.generate();
    var publicTenantAlias = util.format('public-%s', randomId);
    var publicTenant1Alias = util.format('public1-%s', randomId);
    var privateTenantAlias = util.format('private-%s', randomId);
    var privateTenant1Alias = util.format('private1-%s', randomId);

    _createPublicTenant(publicTenantAlias, function(tenant, tenantAdminRestCtx) {
        var publicTenant = {'tenant': tenant, 'adminRestCtx': tenantAdminRestCtx, 'anonymousRestCtx': TestsUtil.createTenantRestContext(tenant.host)};
        _createPublicTenant(publicTenant1Alias, function(tenant, tenantAdminRestCtx) {
            var publicTenant1 = {'tenant': tenant, 'adminRestCtx': tenantAdminRestCtx, 'anonymousRestCtx': TestsUtil.createTenantRestContext(tenant.host)};
            _createPrivateTenant(privateTenantAlias, function(tenant, tenantAdminRestCtx) {
                var privateTenant = {'tenant': tenant, 'adminRestCtx': tenantAdminRestCtx, 'anonymousRestCtx': TestsUtil.createTenantRestContext(tenant.host)};
                _createPrivateTenant(privateTenant1Alias, function(tenant, tenantAdminRestCtx) {
                    var privateTenant1 = {'tenant': tenant, 'adminRestCtx': tenantAdminRestCtx, 'anonymousRestCtx': TestsUtil.createTenantRestContext(tenant.host)};
                    return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                });
            });
        });
    });
};

var _createUserWithVisibility = function(restCtx, visibility, callback) {
    var randomId = util.format('%s-%s', visibility, ShortId.generate());
    var username = 'username-' + randomId;
    var password = 'password-' + randomId;
    var displayName = 'displayName-' + randomId;
    var publicAlias = 'publicAlias-' + randomId;
    RestAPI.User.createUser(restCtx, username, password, displayName, {'visibility': visibility, 'publicAlias': publicAlias}, function(err, user) {
        assert.ok(!err);
        return callback({'user': user, 'restCtx': TestsUtil.createTenantRestContext(restCtx.hostHeader, username, password)});
    });
};

var _createDiscussionWithVisibility = function(restCtx, visibility, callback) {
    var randomId = util.format('%s-%s', visibility, ShortId.generate());
     RestAPI.Discussions.createDiscussion(restCtx, 'displayName-' + randomId, 'description-' + randomId, visibility, null, null, null, function(err, discussion) {
        assert.ok(!err);
        return callback(discussion);
     });
};

var _createPrivateTenant = function(tenantAlias, callback) {
    _createPublicTenant(tenantAlias, function(tenant, tenantAdminRestCtx) {
        // Only global admins can update tenant privacy, so use that
        ConfigTestsUtil.updateConfigAndWait(TestsUtil.createGlobalAdminRestContext(), tenant.alias, 'oae-tenants/tenantprivacy/tenantprivate', true, function(err) {
            assert.ok(!err);
            return callback(tenant, tenantAdminRestCtx);
        });
    });
};

var _createPublicTenant = function(tenantAlias, callback) {
    TestsUtil.createTenantWithAdmin(tenantAlias, tenantAlias, function(err, tenant, tenantAdminRestCtx) {
        assert.ok(!err);
        return callback(tenant, tenantAdminRestCtx);
    });
};
