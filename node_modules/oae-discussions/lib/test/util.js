/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var AuthzTestUtil = require('oae-authz/lib/test/util');
var LibraryAPI = require('oae-library');
var PrincipalsTestUtil = require('oae-principals/lib/test/util');
var RestAPI = require('oae-rest');
var SearchTestUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests/lib/util');

/**
 * Set up 2 public tenants and 2 private tenants, each with a public, loggedin, private set of users and
 * discussions. The resulting model looks like:
 *
 * ```
 *  {
 *      "publicTenant": {
 *          "tenant": <Tenant>,
 *          "anonymousRestContext": <RestContext>,
 *          "adminRestContext": <RestCOntext> (of the tenant admin),
 *          "publicDiscussion": <Discussion>,
 *          "loggedinDiscussion": <Discussion>,
 *          "privateDiscussion": <Discussion>,
 *          "publicUser": {
 *              "user": <User>,
 *              "restContext": <RestContext>
 *          },
 *          "loggedinUser": { ... }
 *          "privateUser": { ... }
 *      },
 *      "publicTenant1": { ... },
 *      "privateTenant": { ... },
 *      "privateTenant1": { ... }
 *  }
 * ```
 *
 * @param  {Function}   Invoked when all the entities are set up
 * @throws {Error}      An assertion error is thrown if something does not get created properly
 */
var setupMultiTenantPrivacyEntities = module.exports.setupMultiTenantPrivacyEntities = function(callback) {
    // Create the tenants and users
    TestsUtil.setupMultiTenantPrivacyEntities(function(publicTenant, publicTenant1, privateTenant, privateTenant1) {
        // Create the discussions.
        _setupTenant(publicTenant, function() {
            _setupTenant(publicTenant1, function() {
                _setupTenant(privateTenant, function() {
                    _setupTenant(privateTenant1, function() {
                        return callback(publicTenant, publicTenant1, privateTenant, privateTenant1);
                    });
                });
            });
        });
    });
};

/**
 * Create the discussions within a tenant.
 *
 * @param  {Tenant}     tenant          The tenant to setup
 * @param  {Function}   callback        Standard callback function
 * @throws {Error}                      An assertion error is thrown if something does not get created properly
 * @api private
 */
var _setupTenant = function(tenant, callback) {
    _createMultiPrivacyDiscussions(tenant.adminRestContext, function(publicDiscussion, loggedinDiscussion, privateDiscussion) {
        tenant.publicDiscussion = publicDiscussion;
        tenant.loggedinDiscussion = loggedinDiscussion;
        tenant.privateDiscussion = privateDiscussion;
        callback();
    });
};

/**
 * Set up discussions of all privacies using the given rest context
 *
 * @param  {RestContext}    restCtx         The rest context to use
 * @param  {Function}       callback        Standard callback function
 * @throws {Error}                          An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createMultiPrivacyDiscussions = function(restCtx, callback) {
    _createDiscussionWithVisibility(restCtx, 'public', function(publicDiscussion) {
        _createDiscussionWithVisibility(restCtx, 'loggedin', function(loggedinDiscussion) {
            _createDiscussionWithVisibility(restCtx, 'private', function(privateDiscussion) {
                return callback(publicDiscussion, loggedinDiscussion, privateDiscussion);
            });
        });
    });
};

/**
 * Create a discussion with the specified visibility
 *
 * @param  {RestContext}    restCtx             The rest context to use
 * @param  {String}         visibility          The visibility of the user
 * @param  {Function}       callback            Standard callback function
 * @param  {Discussion}     callback.discussion The discussion that was created
 * @throws {Error}                              An assertion error is thrown if something does not get created properly
 * @api private
 */
var _createDiscussionWithVisibility = function(restCtx, visibility, callback) {
    var randomId = TestsUtil.generateTestUserId(visibility);
    RestAPI.Discussions.createDiscussion(restCtx, 'displayName-' + randomId, 'description-' + randomId, visibility, null, null, function(err, discussion) {
        assert.ok(!err);
        return callback(discussion);
    });
};

var assertCreateDiscussionSucceeds = module.exports.assertCreateDiscussionSucceeds = function(restContext, displayName, description, visibility, managers, members, callback) {
    PrincipalsTestUtil.assertGetMeSucceeds(restContext, function(me) {
        RestAPI.Discussions.createDiscussion(restContext, displayName, description, visibility, managers, members, function(err, discussion) {
            assert.ok(!err, JSON.stringify(err));
            assert.strictEqual(discussion.displayName, displayName);
            assert.strictEqual(discussion.description, description);
            assert.strictEqual(discussion.visibility, visibility);

            // Assemble our expected roles after creation
            var roleChanges = {};
            roleChanges[me.id] = 'manager';

            _.each(managers, function(id) {
                roleChanges[id] = 'manager';
            });

            _.each(members, function(id) {
                roleChanges[id] = 'member';
            });

            // Ensure the members have the expected roles
            getAllDiscussionMembers(restContext, discussion.id, null, function(result) {
                AuthzTestUtil.assertMemberRolesEquals({}, roleChanges, AuthzTestUtil.getMemberRolesFromResults(result));

                AuthzTestUtil.assertGetInvitationsSucceeds(restContext, 'discussion', discussion.id, function(result) {
                    AuthzTestUtil.assertEmailRolesEquals({}, roleChanges, AuthzTestUtil.getEmailRolesFromResults(result.results));
                    return callback(discussion);
                });
            });
        });
    });
};

var assertCreateDiscussionFails = module.exports.assertCreateDiscussionFails = function(restContext, displayName, description, visibility, managers, members, httpCode, callback) {
    RestAPI.Discussions.createDiscussion(restContext, displayName, description, visibility, managers, members, function(err, discussion) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!discussion);
        return callback();
    });
};

var assertGetDiscussionFails = module.exports.assertGetDiscussionFails = function(restContext, discussionId, httpCode, callback) {
    RestAPI.Discussions.getDiscussion(restContext, discussionId, function(err, discussion) {
        assert.ok(err);
        assert.strictEqual(err.code, httpCode);
        assert.ok(!discussion);
        return callback();
    });
};

var assertDeleteDiscussionSucceeds = module.exports.assertDeleteDiscussionSucceeds = function(restContext, discussionId, callback) {
    RestAPI.Discussions.deleteDiscussion(restContext, discussionId, function(err) {
        assert.ok(!err);

        // Ensure the discussion now gets a 404
        return assertGetDiscussionFails(restContext, discussionId, 404, callback);
    });
};

/**
 * Update a discussion, ensuring that the request succeeds
 *
 * @param  {RestContext}    restContext             The REST context with which to update the discussion
 * @param  {String}         dicussionId             The id of the discussion to update
 * @param  {Object}         updates                 An object keyed by field name, whose values are either the new value to assign to the field
 * @param  {Function}       callback                Invoked when the discussion has been successfully updated
 * @param  {Discussion}     callback.discussion     The updated discussion
 * @throws {AssertionError}                         Thrown if the request fails
 */
var assertUpdateDiscussionSucceeds = module.exports.assertUpdateDiscussionSucceeds = function(restContext, discussionId, updates, callback) {
    RestAPI.Discussions.updateDiscussion(restContext, discussionId, updates, function(err, discussion) {
        assert.ok(!err);

        // Wait for library and search to be udpated before continuing
        LibraryAPI.Index.whenUpdatesComplete(function() {
            SearchTestUtil.whenIndexingComplete(function() {
                return callback(discussion);
            });
        });
    });
};

var assertShareDiscussionSucceeds = module.exports.assertShareDiscussionSucceeds = function(managerRestContext, actorRestContext, discussionId, targetIds, callback) {
    // Get the discussion members before sharing
    getAllDiscussionMembers(managerRestContext, discussionId, null, function(result) {
        var memberRolesBefore = AuthzTestUtil.getMemberRolesFromResults(result);

        AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
            var emailRolesBefore = AuthzTestUtil.getEmailRolesFromResults(result.results);

            // Build a role update object that represents the change that should occur in the share
            // operation
            var roleChange = {};
            _.each(targetIds, function(targetId) {
                if (!memberRolesBefore[targetId] && !emailRolesBefore[targetId]) {
                    roleChange[targetId] = 'member';
                }
            });

            // Perform the discussion share
            RestAPI.Discussions.shareDiscussion(actorRestContext, discussionId, targetIds, function(err) {
                assert.ok(!err);

                // Ensure the members and invitations had the expected updates
                AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
                    AuthzTestUtil.assertEmailRolesEquals(emailRolesBefore, roleChange, AuthzTestUtil.getEmailRolesFromResults(result.results));

                    getAllDiscussionMembers(managerRestContext, discussionId, null, function(membersAfterUpdate) {
                        AuthzTestUtil.assertMemberRolesEquals(memberRolesBefore, roleChange, AuthzTestUtil.getMemberRolesFromResults(membersAfterUpdate));

                        return callback();
                    });
                });
            });
        });
    });
};

var assertShareDiscussionFails = module.exports.assertShareDiscussionFails = function(managerRestContext, actorRestContext, discussionId, targetIds, httpCode, callback) {
    // Get the discussion members before sharing
    getAllDiscussionMembers(managerRestContext, discussionId, null, function(result) {
        var memberRolesBefore = AuthzTestUtil.getMemberRolesFromResults(result);

        AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
            var emailRolesBefore = AuthzTestUtil.getEmailRolesFromResults(result.results);

            // Perform the discussion share
            RestAPI.Discussions.shareDiscussion(actorRestContext, discussionId, targetIds, function(err) {
                assert.ok(err);
                assert.strictEqual(err.code, httpCode);

                var delta = {};

                // Ensure the members and invitations had the expected updates
                AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
                    AuthzTestUtil.assertEmailRolesEquals(emailRolesBefore, delta, AuthzTestUtil.getEmailRolesFromResults(result.results));

                    getAllDiscussionMembers(managerRestContext, discussionId, null, function(membersAfterUpdate) {
                        AuthzTestUtil.assertMemberRolesEquals(memberRolesBefore, delta, AuthzTestUtil.getMemberRolesFromResults(membersAfterUpdate));

                        return callback();
                    });
                });
            });
        });
    });
};

/**
 * Update the members of a discussion, ensuring that the request succeeds
 *
 * @param  {RestContext}    restContext     The REST context with which to update the members
 * @param  {String}         dicussionId     The id of the discussion whose members to update
 * @param  {Object}         updates         An object keyed by principal id, whose values are either the role to assign or `false` to indicate that the principal should be removed
 * @param  {Function}       callback        Invoked when the members have been successfully updated
 * @throws {AssertionError}                 Thrown if the request fails
 */
var assertUpdateDiscussionMembersSucceeds = module.exports.assertUpdateDiscussionMembersSucceeds = function(managerRestContext, actorRestContext, discussionId, updates, callback) {
    // Get the discussion members before sharing
    getAllDiscussionMembers(managerRestContext, discussionId, null, function(result) {
        var memberRolesBefore = AuthzTestUtil.getMemberRolesFromResults(result);

        AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
            var emailRolesBefore = AuthzTestUtil.getEmailRolesFromResults(result.results);

            RestAPI.Discussions.updateDiscussionMembers(actorRestContext, discussionId, updates, function(err) {
                assert.ok(!err);
                // Wait for library and search to be updated before continuing
                LibraryAPI.Index.whenUpdatesComplete(function() {
                    SearchTestUtil.whenIndexingComplete(function() {

                        // Ensure the members and invitations had the expected updates
                        AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
                            AuthzTestUtil.assertEmailRolesEquals(emailRolesBefore, updates, AuthzTestUtil.getEmailRolesFromResults(result.results));

                            getAllDiscussionMembers(managerRestContext, discussionId, null, function(membersAfterUpdate) {
                                AuthzTestUtil.assertMemberRolesEquals(memberRolesBefore, updates, AuthzTestUtil.getMemberRolesFromResults(membersAfterUpdate));

                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
};

var assertUpdateDiscussionMembersFails = module.exports.assertUpdateDiscussionMembersFails = function(managerRestContext, actorRestContext, discussionId, updates, httpCode, callback) {
    // Get the discussion members before sharing
    getAllDiscussionMembers(managerRestContext, discussionId, null, function(result) {
        var memberRolesBefore = AuthzTestUtil.getMemberRolesFromResults(result);

        AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
            var emailRolesBefore = AuthzTestUtil.getEmailRolesFromResults(result.results);

            RestAPI.Discussions.updateDiscussionMembers(actorRestContext, discussionId, updates, function(err) {
                assert.ok(err);
                assert.strictEqual(err.code, httpCode);

                // Wait for library and search to be udpated before continuing
                LibraryAPI.Index.whenUpdatesComplete(function() {
                    SearchTestUtil.whenIndexingComplete(function() {

                        var delta = {};

                        // Ensure the members and invitations had the expected updates
                        AuthzTestUtil.assertGetInvitationsSucceeds(managerRestContext, 'discussion', discussionId, function(result) {
                            AuthzTestUtil.assertEmailRolesEquals(emailRolesBefore, delta, AuthzTestUtil.getEmailRolesFromResults(result.results));

                            getAllDiscussionMembers(managerRestContext, discussionId, null, function(membersAfterUpdate) {
                                AuthzTestUtil.assertMemberRolesEquals(memberRolesBefore, delta, AuthzTestUtil.getMemberRolesFromResults(membersAfterUpdate));

                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });
};

/**
 * Get the full discussion members library of a discussion
 *
 * @param  {RestContext}    restContext         The rest context to use to get the discussion members library
 * @param  {String}         discussionId        The id of the discussion whose members to get
 * @param  {Object}         [opts]              Optional arguments for getting the discussion members library
 * @param  {Number}         [opts.batchSize]    The size of the pages to use when paging through the discussion members library
 * @param  {Function}       callback            Standard callback function
 * @param  {Object[]}       callback.members    An array of users and groups that were fetched from the library
 * @param  {Object[][]}     callback.responses  The raw response objects for each page request that was made to get the discussion members library
 * @throws {AssertionError}                     Thrown if an error occurrs while paging through the discussion members library
 */
var getAllDiscussionMembers = module.exports.getAllDiscussionMembers = function(restContext, discussionId, opts, callback, _members, _responses, _nextToken) {
    _members = _members || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_members, _responses);
    }

    opts = opts || {};
    opts.batchSize = opts.batchSize || 25;
    RestAPI.Discussions.getDiscussionMembers(restContext, discussionId, _nextToken, opts.batchSize, function(err, result) {
        assert.ok(!err);
        _responses.push(result);
        return getAllDiscussionMembers(restContext, discussionId, opts, callback, _.union(_members, result.results), _responses, result.nextToken);
    });
};

var assertGetAllDiscussionsLibrarySucceeds = module.exports.assertGetAllDiscussionsLibrarySucceeds = function(restContext, principalId, opts, callback, _discussions, _responses, _nextToken) {
    _discussions = _discussions || [];
    _responses = _responses || [];
    if (_nextToken === null) {
        return callback(_discussions, _responses);
    }

    opts = opts || {};
    opts.batchSize = opts.batchSize || 25;
    assertGetDiscussionsLibrarySucceeds(restContext, principalId, {'start': _nextToken, 'limit': opts.batchSize}, function(result) {
        _responses.push(result);
        return assertGetAllDiscussionsLibrarySucceeds(restContext, principalId, opts, callback, _.union(_discussions, result.results), _responses, result.nextToken);
    });
};

var assertGetDiscussionsLibrarySucceeds = module.exports.assertGetDiscussionsLibrarySucceeds = function(restContext, principalId, opts, callback) {
    opts = opts || {};
    RestAPI.Discussions.getDiscussionsLibrary(restContext, principalId, opts.start, opts.limit, function(err, result) {
        assert.ok(!err);
        return callback(result);
    });
};
