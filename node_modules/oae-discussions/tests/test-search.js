/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var SearchTestsUtil = require('oae-search/lib/test/util');
var TestsUtil = require('oae-tests');

describe('Discussion Search', function() {

    // REST contexts we can use to do REST requests
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var gtAdminRestContext = null;

    before(function(callback) {
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
        callback();
    });

    describe('Indexing', function() {
        /**
         * A test that verifies a discussion item is indexable and searchable.
         */
        it('verify indexing of a discussion', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var displayName = TestsUtil.generateTestUserId('discussion');
                RestAPI.Discussions.createDiscussion(user.restContext, displayName, displayName, 'public', null, null, function(err, discussion) {
                    assert.ok(!err);

                    SearchTestsUtil.searchAll(user.restContext, 'general', null, {'resourceTypes': 'discussion', 'q': displayName}, function(err, results) {
                        assert.ok(!err);
                        assert.equal(results.results.length, 1);
                        assert.equal(results.results[0].displayName, displayName);
                        assert.equal(results.results[0].description, displayName);
                        callback();
                    });
                });
            });
        });

        it('verify updating the metadata for a discussion, updates the index', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var displayName1 = TestsUtil.generateTestUserId('discussion');
                var displayName2 = TestsUtil.generateTestUserId('discussion');
                RestAPI.Discussions.createDiscussion(user.restContext, displayName1, displayName1, 'public', null, null, function(err, discussion) {
                    assert.ok(!err);

                    RestAPI.Discussions.updateDiscussion(user.restContext, discussion.id, {'displayName': displayName2}, function(err) {
                        assert.ok(!err);

                        SearchTestsUtil.searchAll(user.restContext, 'general', null, {'resourceTypes': 'discussion', 'q': displayName1}, function(err, results) {
                            assert.ok(!err);
                            assert.equal(results.results.length, 0);
                            SearchTestsUtil.searchAll(user.restContext, 'general', null, {'resourceTypes': 'discussion', 'q': displayName2}, function(err, results) {
                                assert.ok(!err);
                                assert.equal(results.results.length, 0);
                                assert.equal(results.results[0].displayName, displayName2);
                                assert.equal(results.results[0].description, displayName2);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('verify indexing of a message', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var discussionDescription = TestsUtil.generateTestUserId('discussion');
                RestAPI.Discussions.createDiscussion(user.restContext, discussionDescription, discussionDescription, 'public', null, null, function(err, discussion) {
                    assert.ok(!err);

                    var messageBody = TestsUtil.generateTestUserId('message');
                    RestAPI.Discussions.createMessage(user.restContext, discussion.id, messageBody, null, function(err, message) {
                        assert.ok(!err);

                        // When we search for the message, the discussion should be returned
                        SearchTestsUtil.searchAll(user.restContext, 'general', null, {'resourceTypes': 'discussion', 'q': messageBody}, function(err, results) {
                            assert.ok(!err);
                            assert.equal(results.results.length, 1);
                            assert.equal(results.results[0].displayName, discussionDescription);
                            assert.equal(results.results[0].description, discussionDescription);
                            callback();
                        });
                    });
                });
            });
        });
    });
});