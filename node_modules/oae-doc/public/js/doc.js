(function(){

    /**
     * @todo When the 3akai-ux UI is brought in we should use the templating functions in the 3akai-ux API.
     *
     * Trimpath Template Renderer: Renders the template with the given JSON object, inserts it into a certain HTML
     * element if required, and returns the rendered HTML string
     * @param {String|Object} templateElement The name of the template HTML ID or a jQuery selection object.
     * @param {Object} templateData JSON object containing the template data
     * @param {Object} outputElement (Optional) jQuery element in which the template needs to be rendered
     */
    var renderTemplate = function(templateElement, templateData, outputElement) {
        var templateName;

        if (templateElement instanceof jQuery && templateElement[0]) {
            templateName = templateElement[0].id;
        } else {
            templateName = templateElement.replace('#', '');
            templateElement = $('#' + templateName);
        }

        var renderedTemplate = "";
        var templateNode = templateElement.get(0);
        if (templateNode) {
            var firstNode = templateNode.firstChild;
            var template = null;
            // Check whether the template is wrapped in <!-- -->
            if (firstNode && (firstNode.nodeType === 8 || firstNode.nodeType === 4)) {
                template = firstNode.data.toString();
            } else {
                template = templateNode.innerHTML.toString();
            }
            // Parse the template through TrimPath and add the parsed template to the template cache
            try {
                renderedTemplate = TrimPath.parseTemplate(template, templateName);
            } catch (e) {
                console.log('TemplateRenderer: parsing failed: ' + e);
            }
        } else {
            console.log('TemplateRenderer: The template "' + templateName + '" could not be found');
        }

        // Run the template and feed it the given JSON object
        var render = '';
        try {
            render = renderedTemplate.process(templateData, {'throwExceptions': true});
        } catch (err) {
            console.log('TemplateRenderer: rendering of Template \'' + templateName + '\' failed: ' + err);
        }

        // Check it there was an output element defined
        // If so, put the rendered template in there
        if (outputElement) {
            outputElement.html(render);
        }

        return render;
    };

    var renderDocs = function(docs, module) {
        renderTemplate('doc_docs_template', {
            'docs': docs,
            'module': module
        }, $('#doc_docs_container'));
    };

    var getDocsForModule = function(module, callback) {
        $.ajax({
            url: '/api/doc/module/' + module,
            success: function(docs) {
                callback(docs);
            }
        });
    };

    var getDocModules = function(callback) {
        $.ajax({
            url: '/api/doc/modules',
            success: function(modules) {
                callback(modules);
            }
        });
    };

    /**
     * Initializes the admin UI
     */
    var doInit = function() {
        getDocModules(function(modules) {
            getDocsForModule(modules[0], function(docs) {
                renderDocs(docs, modules[0]);
            })
        });
    };

    $(document).ready(doInit);

})();
