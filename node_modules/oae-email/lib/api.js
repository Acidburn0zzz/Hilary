/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');
var path = require('path');
var util = require('util');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-email');
var OaeModules = require('oae-util/lib/modules');

var compiledTemplates = {};

var refreshTemplates = module.exports.refreshTemplates = function(callback) {
    var modules = OaeModules.getAvailableModules();

    _refreshTemplates(modules, function(err, newCompiledTemplates) {
        if (err) {
            return callback(err);
        }

        compiledTemplates = newCompiledTemplates;
        return callback();
    });
};

var _refreshTemplates = function(modules, callback, _compiledTemplates) {
    _compiledTemplates = _compiledTemplates || {};
    if (modules.length === 0) {
        return callback(null, _compiledTemplates);
    }

    var module = modules.shift();
    var emailTemplatesPath = _templatesPath(module);
    IO.getFileListForFolder(emailTemplatesPath, function(err, locales) {
        if (err) {
            return callback(err);
        } else if (locales.length === 0) {
            return _refreshTemplates(modules, callback, _compiledTemplates);
        }

        _compiledTemplates[module] = _compiledTemplates[module] || {};

        _refreshTemplatesForModule(module, locales, _compiledTemplates, function(err) {
            if (err) {
                return callback(err);
            }

            return _refreshTemplates(modules, callback, _compiledTemplates);
        });
    });
};

var _refreshTemplatesForModule = function(module, locales, compiledTemplates, callback) {
    if (locales.length === 0) {
        return callback();
    }

    var locale = locales.shift();
    var localePath = _templatesPath(module, locale);

    compiledTemplates[module][locale] = compiledTemplates[module][locale] || {};

    IO.getFileListForFolder(localePath, function(err, templates) {
        if (err) {
            return callback(err);
        }

        // Trim down to just JST files
        var templateIds = {};
        _.each(templates, function(template) {
            if (template.slice(-9) === '.html.jst' || template.slice(-8) === '.txt.jst') {
                templateIds[template.split('.').slice(0, -2)] = true;
            }
        });
        templateIds = _.keys(templateIds);

        if (templateIds.length === 0) {
            return _refreshTemplatesForModule(module, locales, compiledTemplates, callback);
        }

        _refreshTemplatesForLocale(module, locale, templateIds, compiledTemplates, function(err) {
            if (err) {
                return callback(err);
            }

            return _refreshTemplatesForModule(module, locales, compiledTemplates, callback);
        });
    });
};

var _refreshTemplatesForLocale = function(module, locale, templateIds, compiledTemplates, callback) {
    if (templateIds.length === 0) {
        return callback();
    }

    var templateId = templateIds.shift();
    var templateHtmlPath = _templatesPath(module, locale, templateId + '.html.jst');
    var templateTxtPath = _templatesPath(module, locale, templateId + '.txt.jst');

    log().info({
        'module': module,
        'locale': locale,
        'templateId': templateId
    }, 'Compiling e-mail template');

    _compileTemplate(templateHtmlPath, function(err, compiledHtmlTemplate) {
        if (err) {
            return callback(err);
        }

        _compileTemplate(templateTxtPath, function(err, compiledTxtTemplate) {
            if (err) {
                return callback(err);
            }

            compiledTemplates[module][locale][templateId] = {'html': compiledHtmlTemplate, 'txt': compiledTxtTemplate};

            return _refreshTemplatesForLocale(module, locale, templateIds, compiledTemplates, callback);
        });
    });
};

var _compileTemplate = function(templatePath, callback) {
    IO.readFile(templatePath, function(err, templateContent) {
        if (templateContent) {
            var compiledTemplate = null;
            try {
                compiledTemplate = _.template(templateContent);
            } catch (ex) {
                return callback(err);
            }

            return callback(null, compiledTemplate);
        } else {
            return callback();
        }
    });
};

var _templatesPath = function(module, locale, template) {
    var templatePath = util.format('%s/../../%s/emailTemplates', __dirname, module);

    if (locale) {
        templatePath += '/' + locale;
        if (template) {
            templatePath += '/' + template;
        }
    }

    return templatePath;
};