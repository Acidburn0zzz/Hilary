/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');
var nodemailer = require('nodemailer');
var path = require('path');
var util = require('util');

var IO = require('oae-util/lib/io');
var log = require('oae-logger').logger('oae-email');
var OaeModules = require('oae-util/lib/modules');

var baseCompiledTemplates = {};
var overrideCompiledTemplates = {};

var customEmailTemplatesDir = null;
var debug = true;
var smtpTransport = null;

var init = module.exports.init = function(emailSystemConfig, callback) {
    customEmailTemplatesDir = emailSystemConfig.customEmailTemplatesDir;
    debug = (emailSystemConfig.debug === false);

    if (debug && smtpTransport) {
        // Close the smtp transport if we're in debug mode
        smtpTransport.close();
        smtpTransport = null;
    } else if (!debug && !smtpTransport) {
        // Open an smtp transport if we're not in debug
        smtpTransport = nodemailer.createTransport('SMTP', emailSystemConfig.smtpTransport);
    }

    return callback();
};

var refreshTemplates = module.exports.refreshTemplates = function(callback) {
    _refreshBaseTemplates(function(err) {
        if (err) {
            return callback(err);
        }

        return _refreshOverrideTemplates(customEmailTemplatesDir, callback);
    });
};

var sendEmail = module.exports.sendEmail = function(templateModule, templateId, toUser, data, opts, callback) {
    data = data || {};
    opts = opts || {};
    callback = callback || function(err) {
        if (err && err.code === 400) {
            log().error({'err': err}, 'Failed to deliver due to validation error');
        }
    };

    var validator = new Validator();
    validator.check(null, {'code': 400, 'msg': 'Must specify a user when sending an email'}).isObject(toUser);
    validator.check(toUser.email, {'code': 400, 'msg': 'User must have a valid email address to receive email'}).isEmail();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    log().trace({
        'templateModule': templateModule,
        'templateId': templateId,
        'toUser': toUser,
        'data': data,
        'opts': opts
    }, 'Preparing template for mail to be sent.');

    var renderedTemplates = {};

    var templateCtx = {'user': user, 'data': data};
    var metaTemplate = _resolveTemplate(toUser.tenant, templateModule, toUser.locale, templateId, 'meta.json');
    var htmlTemplate = _resolveTemplate(toUser.tenant, templateModule, toUser.locale, templateId, 'html');
    var txtTemplate = _resolveTemplate(toUser.tenant, templateModule, toUser.locale, templateId, 'txt');

    // Verify the user templates have enough data to send an email
    if (!metaTemplate) {
        var noMetaTemplateErr = {'code': 500, 'msg': 'No email metadata template existed for user'};
        log().error({
            'err': noMetaTemplateErr,
            'templateModule': templateModule,
            'templateId': templateId,
            'toUser': {
                'id': toUser.id,
                'locale': toUser.locale
            }}, noMetaTemplateErr.msg);
        return callback(noMetaTemplateErr);
    } else if (!htmlTemplate && !txtTemplate) {
        var noContentTemplateErr = {'code': 500, 'msg': 'No email content (text or html) template existed for user'};
        log().error({
            'err': noContentTemplateErr,
            'templateModule': templateModule,
            'templateId': templateId,
            'toUser': {
                'id': toUser.id,
                'locale': toUser.locale
        }}, noContentTemplateErr.msg);
        return callback(noContentTemplateErr);
    }

    renderedTemplates = {};
    var metaContent = null;
    var htmlContent = null;
    var txtContent = null;

    try {
        // Parse the template into JSON
        metaContent = JSON.parse(metaTemplate(templateCtx));
    } catch (metaErr) {
        log().error({
            'err': metaErr,
            'templateModule': templateModule,
            'templateId': templateId,
            'toUser': {
                'id': toUser.id,
                'locale': toUser.locale
            }
        }, 'Error parsing email metadata template for user');
        return callback({'code': 500, 'msg': 'Error parsing email metadata template for user'});
    }

    // Try and render the html template
    if (htmlTemplate) {
        try {
            htmlContent = htmlTemplate(templateCtx);
        } catch (htmlErr) {
            log().error({
                'err': metaErr,
                'templateModule': templateModule,
                'templateId': templateId,
                'toUser': {
                    'id': toUser.id,
                    'locale': toUser.locale
                }
            }, 'Error parsing email html template for user');
        }
    }

    // Try and render the text template
    if (txtTemplate) {
        try {
            txtContent = txtTemplate(templateCtx);
        } catch (txtErr) {
            log().error({
                'err': metaErr,
                'templateModule': templateModule,
                'templateId': templateId,
                'toUser': {
                    'id': toUser.id,
                    'locale': toUser.locale
                }
            }, 'Error parsing email html template for user');
        }
    }

    if (htmlContent || txtContent) {
        // If one of HTML or TXT templates managed to render, we will send the email with the content we have
        renderedTemplates['meta.json'] = metaContent;
        renderedTemplates['html'] = htmlContent;
        renderedTemplates['txt'] = txtContent;
    } else {
        return callback({'code': 500, 'msg': 'Could not parse a suitable content template for user'});
    }

    // Build the email object that will be sent through nodemailer
    var emailInfo = {
        'from': emailData['meta.json'].from,
        'to': toUser.email,
        'subject': emailData['meta.json'].subject
    };

    if (emailData['txt']) {
        emailInfo.text = emailData['txt'];
    }

    if (emailData['html']) {
        emailInfo.html = emailData['html'];
    }

    if (debug) {

        // Create the low-level mail object
        var mailObj = new nodemailer.Nodemailer(emailInfo);
        mailObj.generateMailObj();

        log().info({
            'emailInfo': emailInfo,
            'mailObj': mailObj.mailcomposer
        }, 'Sending email to %s', emailInfo.to);
        return callback();
    } else {
        smtpTransport.sendMail(emailInfo, function(err, response) {
            if (err) {
                log().error({'err': err}, 'Error sending email to recipient.');
                return callback(err);
            }

            return callback();
        });
    }
};

var _refreshBaseTemplates = function(callback) {
    var modules = OaeModules.getAvailableModules();

    // Refresh the base templates (from the oae source code repository)
    _refreshTemplates(__dirname + '/../..', modules, function(err, newCompiledTemplates) {
        if (err) {
            return callback(err);
        }

        baseCompiledTemplates = newCompiledTemplates;
        return callback();
    });
};

var _refreshOverrideTemplates = function(basedir, callback) {
    if (!basedir) {
        return callback();
    }

    var modules = OaeModules.getAvailableModules();

    // Refresh the templates for each tenant
    IO.getFileListForFolder(basedir, function(err, tenantAliases) {
        if (err) {
            return callback(err);
        }

        _refreshTemplatesForTenants(basedir, tenantAliases, modules, function(err, newCompiledTemplates) {
            if (err) {
                return callback(err);
            }

            overrideCompiledTemplates = newCompiledTemplates;
            return callback();
        });
    });
};

var _refreshTemplatesForTenants = function(basedir, tenantAliases, modules, callback, _compiledTemplates) {
    _compiledTemplates = _compiledTemplates || {};
    if (tenantAliases.length === 0) {
        return callback(null, _compiledTemplates);
    }

    var tenantAlias = tenantAliases.shift();
    var tenantDir = util.format('%s/%s', basedir, tenantAlias);
    _refreshTemplates(tenantDir, modules.slice(), function(err, newCompiledTemplates) {
        // Save the templates compiled from this tenant directory for the tenant
        _compiledTemplates[tenantAlias] = newCompiledTemplates;
        _refreshTemplatesForTenants(basedir, tenantAliases, modules, callback, _compiledTemplates);
    });
};

var _refreshTemplates = function(basedir, modules, callback, _compiledTemplates) {
    _compiledTemplates = _compiledTemplates || {};
    if (modules.length === 0) {
        return callback(null, _compiledTemplates);
    }

    var module = modules.shift();
    var emailTemplatesPath = _templatesPath(basedir, module);
    IO.getFileListForFolder(emailTemplatesPath, function(err, locales) {
        if (err) {
            return callback(err);
        } else if (locales.length === 0) {
            return _refreshTemplates(basedir, modules, callback, _compiledTemplates);
        }

        _compiledTemplates[module] = _compiledTemplates[module] || {};
        _refreshTemplatesForModule(basedir, module, locales, _compiledTemplates, function(err) {
            if (err) {
                return callback(err);
            }

            return _refreshTemplates(basedir, modules, callback, _compiledTemplates);
        });
    });
};

var _refreshTemplatesForModule = function(basedir, module, locales, compiledTemplates, callback) {
    if (locales.length === 0) {
        return callback();
    }

    var locale = locales.shift();
    var localePath = _templatesPath(basedir, module, locale);

    compiledTemplates[module][locale] = compiledTemplates[module][locale] || {};

    IO.getFileListForFolder(localePath, function(err, templates) {
        if (err) {
            return callback(err);
        }

        // Identify a valid template by it having a *.meta.json.jst file
        var templateIds = {};
        _.each(templates, function(template) {
            var re = /^(.*)\.meta\.json\.jst$/;
            if (re.test(template)) {
                templateIds[template.replace(re, '$1')] = true;
            }
        });
        templateIds = _.keys(templateIds);

        if (templateIds.length === 0) {
            return _refreshTemplatesForModule(basedir, module, locales, compiledTemplates, callback);
        }

        _refreshTemplatesForLocale(basedir, module, locale, templateIds, compiledTemplates, function(err) {
            if (err) {
                return callback(err);
            }

            return _refreshTemplatesForModule(basedir, module, locales, compiledTemplates, callback);
        });
    });
};

var _refreshTemplatesForLocale = function(basedir, module, locale, templateIds, compiledTemplates, callback) {
    if (templateIds.length === 0) {
        return callback();
    }

    var templateId = templateIds.shift();
    var templateMetaPath = _templatesPath(basedir, module, locale, templateId + '.meta.json.jst');
    var templateHtmlPath = _templatesPath(basedir, module, locale, templateId + '.html.jst');
    var templateTxtPath = _templatesPath(basedir, module, locale, templateId + '.txt.jst');

    log().info({
        'module': module,
        'locale': locale,
        'templateId': templateId
    }, 'Compiling e-mail template');

    _compileTemplate(templateMetaPath, function(err, compiledMetaTemplate) {
        if (err) {
            return callback(err);
        }

        _compileTemplate(templateHtmlPath, function(err, compiledHtmlTemplate) {
            if (err) {
                return callback(err);
            }

            _compileTemplate(templateTxtPath, function(err, compiledTxtTemplate) {
                if (err) {
                    return callback(err);
                }

                compiledTemplates[module][locale][templateId] = {
                    'meta.json': compiledMetaTemplate,
                    'html': compiledHtmlTemplate,
                    'txt': compiledTxtTemplate
                };

                return _refreshTemplatesForLocale(basedir, module, locale, templateIds, compiledTemplates, callback);
            });
        });
    });
};

var _compileTemplate = function(templatePath, callback) {
    IO.readFile(templatePath, function(err, templateContent) {
        if (templateContent) {
            var compiledTemplate = null;
            try {
                compiledTemplate = _.template(templateContent);
            } catch (ex) {
                return callback(err);
            }

            return callback(null, compiledTemplate);
        } else {
            return callback();
        }
    });
};

var _templatesPath = function(basedir, module, locale, template) {
    var templatePath = util.format('%s/%s/emailTemplates', basedir, module);

    log().info('Looking for templates: %s', templatePath);

    if (locale) {
        templatePath += '/' + locale;
        if (template) {
            templatePath += '/' + template;
        }
    }

    return templatePath;
};

var _resolveTemplate = function(tenantAlias, templateModule, templateLocale, templateId, templateType) {
    // Try the override first, falling back to the base template if necessary
    return _getTemplate(overrideCompiledTemplates[tenantAlias], templateModule, templateLocale, templateId, templateType) ||
        _getTemplate(baseCompiledTemplates, templateModule, templateLocale, templateId, templateType);
};

var _getTemplate = function(compiledTemplates, templateModule, templateLocale, templateId, templateType) {
    var template =
        compiledTemplates &&
        compiledTemplates[templateModule] &&
        compiledTemplates[templateModule][templateLocale] &&
        compiledTemplates[templateModule][templateLocale][templateId] &&
        compiledTemplates[templateModule][templateLocale][templateId][templateType];

    // If we couldn't find the requested template, fall back to the default template
    return template || _getDefaultTemplate(compiledTemplates, templateModule, templateId, templateType);
};

var _getDefaultTemplate = function(compiledTemplates, templateModule, templateId, templateType) {
    var template =
        compiledTemplates &&
        compiledTemplates[templateModule] &&
        compiledTemplates[templateModule]['default'] &&
        compiledTemplates[templateModule]['default'][templateId] &&
        compiledTemplates[templateModule]['default'][templateId][templateType];

    // If we couldn't find the default template, we return null;
    return template || null;
};
