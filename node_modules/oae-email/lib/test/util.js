/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var ActivityAggregator = require('oae-activity/lib/internal/aggregator');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var MQ = require('oae-util/lib/mq');
var RestAPI = require('oae-rest');

var EmailAPI = require('oae-email');

/**
 * Send and return a single email message. This helper utility will ensure that the activity / notifications queue
 * is cleaned out to avoid a different email being triggered and the wrong message being inspected.
 *
 * For parameters, @see EmailAPI#sendEmail
 */
var sendEmail = module.exports.sendEmail = function(templateModule, templateId, toUser, data, opts, callback) {
    MQ.whenTasksEmpty(ActivityConstants.mq.TASK_ACTIVITY, function() {
        ActivityAggregator.collectAllBuckets(function() {
            var returned = false;

            /*!
             * Takes care of invoking the callback when the email is "successfully sent".
             *
             * @see EmailAPI events
             */
            var _handleDebugSent = function(message) {
                if (!returned) {
                    returned = true;
                    return callback(null, message);
                }
            };

            EmailAPI.once('debugSent', _handleDebugSent);

            // Send the email, and return the error if one occurs, otherwise the mailcomposer message will be
            // returned by _handleDebugSent
            EmailAPI.sendEmail(templateModule, templateId, toUser, data, opts, function(err) {
                if (!returned && err) {
                    // We errored, the debugSent event *probably* won't be invoked. Unbind it and reply with the error
                    returned = true;
                    EmailAPI.removeListener('debugSent', _handleDebugSent);
                    return callback(err);
                }
            });
        });
    });
};