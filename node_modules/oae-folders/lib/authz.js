/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzPermissions = require('oae-authz/lib/permissions');
var AuthzUtil = require('oae-authz/lib/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var TenantsUtil = require('oae-tenants/lib/util');

var FoldersConstants = require('./constants').FoldersConstants;
var FoldersDAO = require('./internal/dao');

/**
 * Determine if the user invoking the current request is allowed to add content items to a given
 * folder, and if it is possible for the target content items to be added to the folder
 *
 * @param  {Context}    ctx                                 Standard context object containing the current user and the current tenant
 * @param  {Folder}     folder                              The folder for which to check if the current user can add items to it
 * @param  {String[]}   contentItems                        The content items being added to the folder
 * @param  {Function}   callback                            Standard callback function
 * @param  {Object}     callback.err                        An error that occurred, if any
 * @param  {String[]}   [callback.invalidContentIds]        If there was a permission issue against a target content items, the invalid content ids will be in this array
 */
var canAddItemsToFolder = module.exports.canAddItemsToFolder = function(ctx, folder, contentItems, callback) {
    // Anonymous users can never add something to a folder
    if (!ctx.user()) {
        return callback({'code': 401, 'msg': 'You must be authenticated to add items to a folder'});
    }

    // A user must be able to manage a folder to add items to it
    AuthzPermissions.canManage(ctx, folder, function(err) {
        if (err) {
            return callback(err);
        }

        // I must be able to interact with all target content items in order to add them to a folder
        // of mine. Note that this is a special case in which we allow a viewer of a private content
        // item to extend its access to others (e.g., add the private item to a folder, then share
        // the folder with someone else). This is intentional as it is a necessary feature for
        // folders to be usable
        AuthzPermissions.canInteract(ctx, contentItems, function(err) {
            if (err) {
                err.invalidContentIds = _.keys(err.invalidResources);
                return callback(err);
            }

            return callback();
        });
    });
};

/**
 * Resolve the overall access the current user in context has on the given folder
 *
 * @param  {Context}        ctx                     Standard context object containing the current user and the current tenant
 * @param  {Folder}         folder                  The folder for which to resolve the effective user access
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {Boolean}        callback.canView        Whether or not the current user can view the given folder
 * @param  {Boolean}        callback.canManage      Whether or not the current user can manage the given folder
 * @param  {Boolean}        callback.canAddItem     Whether or not the current user can add a content item to the given folder
 */
var resolveEffectiveFolderAccess = module.exports.resolveEffectiveFolderAccess = function(ctx, folder, callback) {
    AuthzPermissions.resolveEffectivePermissions(ctx, folder, function(err, permissions) {
        if (err) {
            return callback(err);
        }

        return callback(null, permissions.canView, permissions.canManage, permissions.canShare, permissions.canManage);
    });
};

/**
 * Given a content item, get the folders that it resides in.
 *
 * @param  {String}     contentId           The content id for which to retrieve the folders it resides in
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Folder[]}   callback.folders    The folders that contain the content item
 */
var getFoldersForContent = module.exports.getFoldersForContent = function(contentId, callback) {
    AuthzAPI.getAuthzMembers(contentId, null, 10000, function(err, members) {
        if (err) {
            log().error({'err': err, 'contentId': contentId}, 'Unable to get the members of a piece of content');
            return callback(err);
        }

        var groupIds = AuthzUtil.getGroupIds(members);
        FoldersDAO.getFoldersByGroupIds(groupIds, callback);
    });
};

/**
 * Given a folder, get all the ids of content items that are in it. Note that
 * this function does not perform any access-checks or visibility scoping.
 *
 * @param  {Folder}         folder                  The folder for which to retrieve the content ids
 * @param  {Function}       callback                Standard callback funciton
 * @param  {Object}         callback.err            An error object, if any
 * @param  {String[]}       callback.contentIds     The ids of the content items that are in the folder
 * @api private
 */
var getContentInFolder = module.exports.getContentInFolder = function(folder, callback, _start, _contentIds) {
    _contentIds = _contentIds || [];

    // Get the content items in this folder from the canonical source
    AuthzAPI.getRolesForPrincipalAndResourceType(folder.groupId, 'c', _start, 1000, function(err, roles, nextToken) {
        if (err) {
            return callback(err);
        }

        // Keep track of the retrieved content items
        var contentIds = _.pluck(roles, 'id');
        _contentIds = _contentIds.concat(contentIds);

        // If there are more items to retrieve, pull them in
        if (nextToken) {
            _getContentInFolder(folder, callback, nextToken, _contentIds);

        // Otherwise we can return to the caller
        } else {
            return callback(null, _contentIds);
        }
    });
};
