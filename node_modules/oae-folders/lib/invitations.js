/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzUtil = require('oae-authz/lib/util');
var ResourceActions = require('oae-resource/lib/actions');
var ResourceConstants = require('oae-resource/lib/constants').ResourceConstants;

var FoldersConstants = require('oae-folders/lib/constants').FoldersConstants;
var FoldersDAO = require('oae-folders/lib/internal/dao');

var log = require('oae-logger').logger('oae-folders-invitations')

ResourceActions.on(ResourceConstants.events.INVITATION_ACCEPTED, function(ctx, invitationHashes, memberChangeInfosByResourceId) {
    var memberChangeInfosByFolderId = {};
    _.chain(memberChangeInfosByResourceId)
        .keys()
        .filter(_isFolderId)
        .each(function(folderId) {
            memberChangeInfosByFolderId[folderId] = memberChangeInfosByResourceId[folderId];
        })
        .value();
    if (_.isEmpty(memberChangeInfosByFolderId)) {
        return;
    }

    var folderIds = _.keys(memberChangeInfosByFolderId);
    FoldersDAO.getFoldersByIds(folderIds, function(err, folders) {
        if (err) {
            return log().warn({
                'err': err,
                'folderIds': folderIds
            }, 'An error occurred while getting folders to update folder libraries after an invitation was accepted');
        }

        // Fire members update tasks for each folder
        _.each(folders, function(folder) {
            var memberChangeInfo = memberChangeInfosByFolderId[folder.id];
            return DiscussionsAPI.emit(FoldersConstants.events.UPDATED_FOLDER_MEMBERS, ctx, folder, memberChangeInfo);
        });
    });
});

var _isFolderId = function(folderId) {
    return (AuthzUtil.isResourceId(folderId) && folderId.indexOf('f:') === 0);
};
