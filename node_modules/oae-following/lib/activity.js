/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityModel = require('oae-activity/lib/model');
var AuthzUtil = require('oae-authz/lib/util');

var FollowingAPI = require('oae-following');
var FollowingConstants = require('oae-following/lib/constants').FollowingConstants;
var FollowingDAO = require('oae-following/lib/internal/dao');

////////////
// FOLLOW //
////////////

ActivityAPI.registerActivityType(FollowingConstants.activity.ACTIVITY_FOLLOW, {
    'groupBy': [
        {
            'actor': true
        },
        {
            'object': true
        }
    ],
    'notifications': {
        'email': true,
        'emailTemplateModule': 'oae-following',
        'emailTemplateId': 'notify-follow'
    },
    'routers': {
        'activity': {
            'actor': ['self', 'followers'],
            'object': ['self']
        },
        'notification': {
            'object': ['self']
        }
    }
});

/*!
 * Post a content-create activity when a user creates a content item.
 */
FollowingAPI.on(FollowingConstants.events.FOLLOW, function(ctx, followingUser, followedUser) {
    var millis = Date.now();
    var actorResource = new ActivityModel.ActivitySeedResource('user', followingUser.id, {'user': followingUser});
    var objectResource = new ActivityModel.ActivitySeedResource('user', followedUser.id, {'user': followedUser});
    var activitySeed = new ActivityModel.ActivitySeed(FollowingConstants.activity.ACTIVITY_FOLLOW, millis, ActivityConstants.verbs.FOLLOW, actorResource, objectResource);
    ActivityAPI.postActivity(ctx, activitySeed);
});

/*!
 * Register a user association that presents all the followers of a user
 */
ActivityAPI.registerActivityEntityAssociation('user', 'followers', function(associationsCtx, entity, callback) {
    // When a user is private, their followers should no longer be informed of what is going on with them
    if (entity.visibility === 'private') {
        return callback(null, []);
    }

    var userId = entity[ActivityConstants.properties.OAE_ID];
    FollowingDAO.getFollowers(userId, null, 10000, function(err, followers) {
        if (err) {
            return callback(err);
        }

        // If the user is loggedin, only route activity to followers that are within the user's tenant
        if (entity.visibility === 'loggedin') {
            followers = _.filter(followers, function(follower) {
                return (AuthzUtil.getPrincipalFromId(userId).tenantAlias === AuthzUtil.getPrincipalFromId(follower).tenantAlias);
            });
        }

        return callback(null, followers);
    });
});
