/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');

var FollowingAPI = require('oae-following');

/**
 * @REST getFollowingUserIdFollowers
 *
 * Get all the followers of the user identified by the given `userId`
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /following/{userId}/followers
 * @PathParam   {string}                userId              Unique identifier for user whose followers are requested
 * @QueryParam  {number}                [limit]             Maximum number of users to return (defaults to 10, limited to between 1 and 25)
 * @QueryParam  {string}                [start]             Marker for continuing search (starts at beginning by default)
 * @Return      {FollowingResults}                          Returns an object containing followers of user
 */
OAE.tenantRouter.on('get', '/api/following/:userId/followers', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    FollowingAPI.getFollowers(req.ctx, req.params.userId, req.query.start, limit, function(err, followers, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': followers, 'nextToken': nextToken});
    });
});

/**
 * @REST getFollowingUserIdFollowing
 *
 * Get all the users that the user identified by the given `userId` follows
 *
 * @Server      tenant
 * @Method      GET
 * @Path        /following/{userId}/following
 * @PathParam   {string}                userId              Unique identifier for user to retrieve following information
 * @QueryParam  {number}                [limit]             Maximum number of users to return (defaults to 10, limited to between 1 and 25)
 * @QueryParam  {string}                [start]             Marker for continuing search (starts at beginning by default)
 * @Return      {FollowingResults}                          Returns an object containing followers of user
 */
OAE.tenantRouter.on('get', '/api/following/:userId/following', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    FollowingAPI.getFollowing(req.ctx, req.params.userId, req.query.start, limit, function(err, following, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': following, 'nextToken': nextToken});
    });
});

/**
 * @REST postFollowingUserIdFollow
 *
 * Make the currently authenticated user start following the user identified by the given `userId`
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /following/{userId}/follow
 * @PathParam   {string}                userId              Unique identifier for user to follow
 * @Return      {void}                                      Returns HTTP response status to indicate success or error
 */
OAE.tenantRouter.on('post', '/api/following/:userId/follow', function(req, res) {
    FollowingAPI.follow(req.ctx, req.params.userId, function(err, followers) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

/**
 * @REST postFollowingUserIdUnfollow
 *
 * Make the currently authenticated user stop following the user identified by the given `userId`
 *
 * @Server      tenant
 * @Method      POST
 * @Path        /following/{userId}/unfollow
 * @PathParam   {string}                userId              Unique identifier for user to unfollow
 * @Return      {void}                                      Returns HTTP response status to indicate success or error
 */
OAE.tenantRouter.on('post', '/api/following/:userId/unfollow', function(req, res) {
    FollowingAPI.unfollow(req.ctx, req.params.userId, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
});

// Add the REST models for Following

/**
 * @RESTModel FollowingResults
 *
 * @Required  [nextToken,results]
 * @Property  {string}              nextToken           Marker to allow continuation of search
 * @Property  {FollowingUser[]}     results             Array of following or followed users
 */

/**
 * @RESTModel FollowingUser
 *
 * @Required  [displayName,id,lastModified,picture,resourceType,tenant,visibility]
 * @Property    {string}            displayName         Name to display for user
 * @Property    {string}            id                  Unique identifier for user
 * @Property    {string}            lastModified        Time resource last modified (epoch format)
 * @Property    {PictureInfo}       picture             Thumbnails and pictures for user
 * @Property    {string}            resourceType        Type of resource (user)
 * @Property    {TenantInfo}        tenant              Tenant information for user
 * @Property    {string}            visibility          Visibility of user (public,...)
 */
