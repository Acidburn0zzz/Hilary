/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityTestsUtil = require('oae-activity/lib/test/util');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;
var DiscussionsConstants = require('oae-discussions/lib/constants').DiscussionsConstants;
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var RestUtil = require('oae-rest/lib/util');
var TestsUtil = require('oae-tests/lib/util');

var FollowingConstants = require('oae-following/lib/constants').FollowingConstants;
var FollowingTestUtil = require('oae-following/lib/test/util');

var globalAdminOnTenantRestContext = null;
var camAnonymousRestContext = null;
var camAdminRestContext = null;
var gtAdminRestContext = null;

/**
 * Function that will fill up the anonymous and admin REST context
 */
before(function(callback) {
    camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    return callback();
});

describe('Following Activity', function() {

    /*!
     * Verify basic properties on an activity object
     *
     * @param  {Activity}   activity            The activity whose content to verify
     * @param  {String}     activityType        The activity type that should be associated to the activity
     * @param  {String}     verb                The verb that should be associated to the activity
     * @param  {String}     actorEntityId       The id of the user that should be the actor
     * @param  {String}     objectEntityId      The id of the user that should be the object
     * @param  {String}     [targetEntityId]    The id of the user taht should be the target
     */
    var _assertGenericActivity = function(activity, activityType, verb, actorEntityId, objectEntityId, targetEntityId) {
        assert.ok(activity);
        assert.equal(activity[ActivityConstants.properties.OAE_ACTIVITY_TYPE], activityType);
        assert.equal(activity.verb, verb);
        assert.equal(activity.actor[ActivityConstants.properties.OAE_ID], actorEntityId);
        assert.equal(activity.object[ActivityConstants.properties.OAE_ID], objectEntityId);
        if (targetEntityId) {
            assert.equal(activity.target[ActivityConstants.properties.OAE_ID], targetEntityId);
        }
    };

    /*!
     * Verify the contents of the follow activity
     *
     * @param  {Activity}   followActivity      The activity whose content to verify
     * @param  {String}     actorUserId         The id of the user that should be the actor
     * @param  {String}     objectUserId        The id of the user that should be the object
     */
    var _assertFollowActivity = function(followActivity, actorUserId, objectUserId) {
        _assertGenericActivity(followActivity, FollowingConstants.activity.ACTIVITY_FOLLOW, ActivityConstants.verbs.FOLLOW, actorUserId, objectUserId);
    };

    /**
     * Test that verifies following a user results in both the follower and following lists getting updated
     */
    it('verify following user and followed user get a follow activity', function(callback) {
        // Create 2 users, one following the other
        FollowingTestUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {

            // Get the follower's activity stream and ensure the activity is there
            ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                assert.ok(!err);
                _assertFollowActivity(response.items[0], follower.user.id, followed.user.id);

                // Get the followed user's activity stream and ensure the activity is there
                ActivityTestsUtil.collectAndGetActivityStream(followed.restContext, followed.user.id, null, function(err, response) {
                    assert.ok(!err);
                    _assertFollowActivity(response.items[0], follower.user.id, followed.user.id);
                    return callback();
                });
            });
        });
    });

    /**
     * Test that verifies when a followed user performs a "create" action (create content, create discussion, create
     * group), the activities are delivered to users that follow the user. Those activities are identified as:
     *
     *  * Create content item
     *  * Create group
     *  * Create discussion
     */
    it('verify followers get create activities performed by the followed user', function(callback) {
        // Create 2 users, one following the other
        FollowingTestUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {

            // Create a group with the followed user and make sure the follower gets it
            RestAPI.Group.createGroup(followed.restContext, 'Im being followed', null, 'public', 'yes', [], [], function(err, group) {
                assert.ok(!err);

                // Ensure the follower user got the activity
                ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                    assert.ok(!err);
                    _assertGenericActivity(response.items[0], PrincipalsConstants.activity.ACTIVITY_GROUP_CREATE, ActivityConstants.verbs.CREATE, followed.user.id, group.id);

                    // Create a content item with the followed user and make sure the follower gets it
                    RestAPI.Content.createLink(followed.restContext, 'Im being followed', null, 'public', 'http://www.google.ca', [], [], function(err, link) {
                        assert.ok(!err);

                        // Ensure the follower user got the activity
                        ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                            assert.ok(!err);
                            _assertGenericActivity(response.items[0], ContentConstants.activity.ACTIVITY_CONTENT_CREATE, ActivityConstants.verbs.CREATE, followed.user.id, link.id);

                            // Create a discussion with the followed user and make sure the follower gets it
                            RestAPI.Discussions.createDiscussion(followed.restContext, 'Im being followed', 'no seriously', 'public', [], [], function(err, discussion) {
                                assert.ok(!err);

                                // Ensure the follower user got the activity
                                ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                                    assert.ok(!err);
                                    _assertGenericActivity(response.items[0], DiscussionsConstants.activity.ACTIVITY_DISCUSSION_CREATE, ActivityConstants.verbs.CREATE, followed.user.id, discussion.id);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies when a followed user performs a "share" or "add to group" action, the followers receive
     * an activity for it. Those activities are identified as:
     *
     *  * Share content item (if the followed user is either the actor or the target)
     *  * Share discussion (if the followed user is either the actor or the target)
     *  * Add member to group (if the followed user is either the actor or the target)
     */
    it('verify followers get share/add activities destined for the followed user', function(callback) {
        // Create 2 users, one following the other, as well as 2 more that will be used for sharing
        FollowingTestUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, testUsers) {
                assert.ok(!err);
                var nico = _.values(testUsers)[0];

                // Create 2 groups, one the followed user will add a member, one the followed user will be added as a member
                RestAPI.Group.createGroup(followed.restContext, 'test group 0', null, 'public', 'yes', [], [], function(err, group0) {
                    assert.ok(!err);
                    RestAPI.Group.createGroup(nico.restContext, 'test group 1', null, 'public', 'yes', [], [], function(err, group1) {
                        assert.ok(!err);

                        // Create 2 content items, one the followed user will share, one the followed user will have shared with them
                        RestAPI.Content.createLink(followed.restContext, 'test content 0', null, 'public', 'http://www.google.ca', [], [], function(err, link0) {
                            assert.ok(!err);
                            RestAPI.Content.createLink(nico.restContext, 'test content 1', null, 'public', 'http://www.yahoo.ca', [], [], function(err, link1) {
                                assert.ok(!err);

                                // Create 2 discussions, one the followed user will share, one the followed user will have shared with them
                                RestAPI.Discussions.createDiscussion(followed.restContext, 'test discussion 0', 'test discussion 0', 'public', [], [], function(err, discussion0) {
                                    assert.ok(!err);
                                    RestAPI.Discussions.createDiscussion(nico.restContext, 'test discussion 1', 'test discussion 1', 'public', [], [], function(err, discussion1) {
                                        assert.ok(!err);

                                        // Followed user adds nico to the first group
                                        var updateMembers = {};
                                        updateMembers[nico.user.id] = 'member';
                                        RestAPI.Group.setGroupMembers(followed.restContext, group0.id, updateMembers, function(err) {
                                            assert.ok(!err);

                                            // Ensure the following user **does not** get this activity. To do this, we ensure the latest activity is still the discussion they created earlier
                                            ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                                                assert.ok(!err);
                                                _assertGenericActivity(response.items[0], DiscussionsConstants.activity.ACTIVITY_DISCUSSION_CREATE, ActivityConstants.verbs.CREATE, followed.user.id, discussion0.id);

                                                // Nico adds the followed user to the second group
                                                updateMembers = {};
                                                updateMembers[followed.user.id] = 'member';
                                                RestAPI.Group.setGroupMembers(nico.restContext, group1.id, updateMembers, function(err) {
                                                    assert.ok(!err);

                                                    // Ensure the following user got this activity
                                                    ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                                                        assert.ok(!err);
                                                        _assertGenericActivity(response.items[0], PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, ActivityConstants.verbs.ADD, nico.user.id, followed.user.id, group1.id);

                                                        // Followed user shares the first link with nico
                                                        RestAPI.Content.shareContent(followed.restContext, link0.id, [nico.user.id], function(err) {
                                                            assert.ok(!err);

                                                            // Ensure the follower **does not** get this activity in their feed. To do this, we ensure the latest activity is still the add group member activity from before
                                                            ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                                                                assert.ok(!err);
                                                                _assertGenericActivity(response.items[0], PrincipalsConstants.activity.ACTIVITY_GROUP_ADD_MEMBER, ActivityConstants.verbs.ADD, nico.user.id, followed.user.id, group1.id);

                                                                // Nico shares the second link with the followed user
                                                                RestAPI.Content.shareContent(nico.restContext, link1.id, [followed.user.id], function(err) {
                                                                    assert.ok(!err);

                                                                    // Ensure the follower gets this activity in their feed
                                                                    ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                                                                        assert.ok(!err);
                                                                        _assertGenericActivity(response.items[0], ContentConstants.activity.ACTIVITY_CONTENT_SHARE, ActivityConstants.verbs.SHARE, nico.user.id, link1.id, followed.user.id);

                                                                        // Followed user shares the first discussion with nico
                                                                        RestAPI.Discussions.shareDiscussion(followed.restContext, discussion0.id, [nico.user.id], function(err) {
                                                                            assert.ok(!err);

                                                                            // Ensure the follower **does not** get this activity in their feed. To do this, we ensure the latest activity is still the content share activity from before
                                                                            ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                                                                                assert.ok(!err);
                                                                                _assertGenericActivity(response.items[0], ContentConstants.activity.ACTIVITY_CONTENT_SHARE, ActivityConstants.verbs.SHARE, nico.user.id, link1.id, followed.user.id);

                                                                                // Nico shares the second discussion with the followed user
                                                                                RestAPI.Discussions.shareDiscussion(nico.restContext, discussion1.id, [followed.user.id], function(err) {
                                                                                    assert.ok(!err);

                                                                                    // Ensure the follower gets this activity in their feed
                                                                                    ActivityTestsUtil.collectAndGetActivityStream(follower.restContext, follower.user.id, null, function(err, response) {
                                                                                        assert.ok(!err);
                                                                                        _assertGenericActivity(response.items[0], DiscussionsConstants.activity.ACTIVITY_DISCUSSION_SHARE, ActivityConstants.verbs.SHARE, nico.user.id, discussion1.id, followed.user.id);
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});

