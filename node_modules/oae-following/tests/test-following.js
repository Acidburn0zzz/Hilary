/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests/lib/util');

var FollowingTestUtil = require('oae-following/lib/test/util');

var globalAdminOnTenantRestContext = null;
var camAnonymousRestContext = null;
var camAdminRestContext = null;
var gtAdminRestContext = null;

/**
 * Function that will fill up the anonymous and admin REST context
 */
before(function(callback) {
    camAnonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
    camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);

    // Authenticate the global admin into a tenant so we can perform user-tenant requests with a global admin to test their access
    RestAPI.Admin.loginOnTenant(TestsUtil.createGlobalAdminRestContext(), 'localhost', function(err, ctx) {
        assert.ok(!err);
        globalAdminOnTenantRestContext = ctx;
        return callback();
    });
});

describe('Following', function() {

    /**
     * Verify we get an "empty" response when there are no users in the followers or following list
     */
    it('verify with no followers or following', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, testUsers) {
            assert.ok(!err);
            var user = _.values(testUsers)[0];

            // Verify clean empty response
            RestAPI.Following.getFollowers(user.restContext, user.user.id, null, null, function(err, response) {
                assert.ok(!err);
                assert.ok(response);
                assert.ok(response.results);
                assert.strictEqual(response.results.length, 0);
                assert.ok(!response.nextToken);

                // Verify clean empty response again
                RestAPI.Following.getFollowing(user.restContext, user.user.id, null, null, function(err, response) {
                    assert.ok(!err);
                    assert.ok(response);
                    assert.ok(response.results);
                    assert.strictEqual(response.results.length, 0);
                    assert.ok(!response.nextToken);
                    return callback();
                });
            });
        });
    });

    /**
     * Test that verifies following a user results in both the follower and following lists getting updated
     */
    it('verify following and unfollowing', function(callback) {
        // Create 2 users, one following the other
        FollowingTestUtil.createFollowerAndFollowed(camAdminRestContext, function(follower, followed) {

            // Ensure the follower and following feeds indicate they are indeed following
            FollowingTestUtil.assertFollows(follower.user.id, follower.restContext, followed.user.id, followed.restContext, function() {

                // Unfollow the user and verify that they are no longer in the following and followers lists
                RestAPI.Following.unfollow(follower.restContext, followed.user.id, function(err) {
                    assert.ok(!err);

                    // Ensure the follower and following feeds indicate they are no longer following
                    FollowingTestUtil.assertDoesNotFollow(follower.user.id, follower.restContext, followed.user.id, followed.restContext, callback);
                });
            });
        });
    });

    /**
     * Test that verifies the privacy rules on follow lists (followers and following)
     */
    it('verify following list privacy', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 4, function(err, testUsers) {
            var privateUser = _.values(testUsers)[0];
            var loggedinUser = _.values(testUsers)[1];
            var publicUser = _.values(testUsers)[2];
            var bert = _.values(testUsers)[3];

            RestAPI.User.updateUser(privateUser.restContext, privateUser.user.id, {'visibility': 'private'}, function(err) {
                assert.ok(!err);

                RestAPI.User.updateUser(loggedinUser.restContext, loggedinUser.user.id, {'visibility': 'loggedin'}, function(err) {
                    assert.ok(!err);

                    // Verify anonymous can only see public user feeds
                    FollowingTestUtil.assertNoFollowFeedAccess(camAnonymousRestContext, [privateUser.user.id, loggedinUser.user.id], function() {
                        FollowingTestUtil.assertHasFollowFeedAccess(camAnonymousRestContext, [publicUser.user.id], function() {
                            
                            // Verify gt admin can only see public user feeds
                           FollowingTestUtil.assertNoFollowFeedAccess(gtAdminRestContext, [privateUser.user.id, loggedinUser.user.id], function() {
                                FollowingTestUtil.assertHasFollowFeedAccess(gtAdminRestContext, [publicUser.user.id], function() {

                                    // Verify bert can see only public and loggedin user feeds
                                    FollowingTestUtil.assertNoFollowFeedAccess(bert.restContext, [privateUser.user.id], function() {
                                        FollowingTestUtil.assertHasFollowFeedAccess(bert.restContext, [publicUser.user.id, loggedinUser.user.id], function() {

                                            // Verify private user can see all feeds
                                            FollowingTestUtil.assertHasFollowFeedAccess(privateUser.restContext, [publicUser.user.id, loggedinUser.user.id, privateUser.user.id], function() {

                                                // Verify cam admin can see all feeds
                                                FollowingTestUtil.assertHasFollowFeedAccess(camAdminRestContext, [publicUser.user.id, loggedinUser.user.id, privateUser.user.id], function() {

                                                    // Verify global admin can see all feeds
                                                    FollowingTestUtil.assertHasFollowFeedAccess(globalAdminOnTenantRestContext, [publicUser.user.id, loggedinUser.user.id, privateUser.user.id], callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies validation of the get followers feed
     */
    it('verify get followers validation', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, testUsers) {
            var bert = _.values(testUsers)[0];

            // Verify a non-valid id
            RestAPI.Following.getFollowers(bert.restContext, 'not-a-valid-id', bert.user.id, null, function(err, response) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Verify a resource id that is not a user
                RestAPI.Following.getFollowers(bert.restContext, 'g:not-a:user-id', bert.user.id, null, function(err, response) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Verify a non-existing user
                    RestAPI.Following.getFollowers(bert.restContext, 'u:cam:nonExistentUserId', bert.user.id, null, function(err, response) {
                        assert.ok(err);
                        assert.equal(err.code, 404);

                        // Verify a start parameter that is not a valid resource id
                        RestAPI.Following.getFollowers(bert.restContext, bert.user.id, 'not-a-valid-id', null, function(err, response) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 400);

                            // Verify a start parameter that is a resource id that is not a user
                            RestAPI.Following.getFollowers(bert.restContext, bert.user.id, 'g:not-a:user-id', null, function(err, response) {
                                assert.ok(err);
                                assert.strictEqual(err.code, 400);

                                // Sanity check a valid fetch
                                RestAPI.Following.getFollowers(bert.restContext, bert.user.id, bert.user.id, null, function(err, response) {
                                    assert.ok(!err);
                                    assert.ok(response);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies validation of the get following feed
     */
    it('verify get following validation', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, testUsers) {
            var bert = _.values(testUsers)[0];

            // Verify a non-valid id
            RestAPI.Following.getFollowing(bert.restContext, 'not-a-valid-id', null, null, function(err, response) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Verify a resource id that is not a user
                RestAPI.Following.getFollowing(bert.restContext, 'g:not-a:user-id', null, null, function(err, response) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Verify a non-existing user
                    RestAPI.Following.getFollowing(bert.restContext, 'u:cam:nonExistentUserId', null, null, function(err, response) {
                        assert.ok(err);
                        assert.equal(err.code, 404);

                        // Verify a start parameter that is not a valid resource id
                        RestAPI.Following.getFollowing(bert.restContext, bert.user.id, 'not-a-valid-id', null, function(err, response) {
                            assert.ok(err);
                            assert.strictEqual(err.code, 400);

                            // Verify a start parameter that is a resource id that is not a user
                            RestAPI.Following.getFollowing(bert.restContext, bert.user.id, 'g:not-a:user-id', null, function(err, response) {
                                assert.ok(err);
                                assert.strictEqual(err.code, 400);

                                // Sanity check a valid fetch
                                RestAPI.Following.getFollowing(bert.restContext, bert.user.id, bert.user.id, null, function(err, response) {
                                    assert.ok(!err);
                                    assert.ok(response);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies validation of the follow action
     */
    it('verify follow validation', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, testUsers) {
            var bert = _.values(testUsers)[0];
            var simon = _.values(testUsers)[1];

            // Verify a non-valid id
            RestAPI.Following.follow(bert.restContext, 'not-a-valid-id', function(err) {
                assert.ok(err);
                assert.equal(err.code, 400);

                // Verify a resource id that is not a user
                RestAPI.Following.follow(bert.restContext, 'g:not-a:user-id', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Verify a non-existing user
                    RestAPI.Following.follow(bert.restContext, 'u:cam:nonExistentUserId', function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 404);

                        // Ensure no following took place
                        RestAPI.Following.getFollowing(bert.restContext, bert.user.id, null, null, function(err, response) {
                            assert.ok(response);
                            assert.ok(response.results);
                            assert.strictEqual(response.results.length, 0);

                            // Sanity check inputs
                            RestAPI.Following.follow(bert.restContext, simon.user.id, function(err) {
                                assert.ok(!err);
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

   /**
     * Test that verifies validation of the follow action
     */
    it('verify unfollow validation', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, testUsers) {
            var bert = _.values(testUsers)[0];
            var simon = _.values(testUsers)[1];

            // Verify anonymous cannot unfollow anyone
            RestAPI.Following.unfollow(camAnonymousRestContext, simon.user.id, function(err) {
                assert.ok(err);
                assert.equal(err.code, 401);

                // Verify a non-valid id
                RestAPI.Following.unfollow(bert.restContext, 'not-a-valid-id', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 400);

                    // Verify a resource id that is not a user
                    RestAPI.Following.unfollow(bert.restContext, 'g:not-a:user-id', function(err) {
                        assert.ok(err);
                        assert.equal(err.code, 400);

                        // Sanity check inputs
                        RestAPI.Following.unfollow(bert.restContext, simon.user.id, function(err) {
                            assert.ok(!err);
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
