/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * visibilitys and limitations under the License.
 */

var assert = require('assert');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Google Analytics', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Rest context for a user that will be used inside of the tests
    var johnRestContext = null;

    /**
     * Function that will create a user that will be used inside of the tests
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up tenant admin rest contexts
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Fill up the rest context for our test user
        var userId = TestsUtil.generateTestUserId('john');
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'John Doe', null, function(err, createdUser) {
            assert.ok(!err, JSON.stringify(err, null, 4));
            johnRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');
            // Add the full user id onto the REST context for use inside of this test
            johnRestContext.id = createdUser.id;
            RestAPI.User.getMe(johnRestContext, function(err, data) {
                assert.ok(!err);
                callback();
            });
        });        
    });

    /**
     * Test that verifies if the admin configuration contains properties for Google Analytics
     */
    it('verify the admin configuration contains properties for Google Analytics', function(callback) {

        // Check if `enabled` and `id` property match with the values set in the config file using the camAdminRestContext
        RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
            assert.ok(!err);
            assert.ok(config);
            assert.equal(config['oae-google-analytics']['google-analytics']['enabled'], false);
            assert.equal(config['oae-google-analytics']['google-analytics']['id'], 'UA-40243987-3');

            // Check if `enabled` and `id` property match with the values set in the config file using the anonymousRestContext
            RestAPI.Config.getTenantConfig(anonymousRestContext, null, function(err, config) {
                assert.ok(!err);
                assert.ok(config);
                assert.equal(config['oae-google-analytics']['google-analytics']['enabled'], false);
                assert.equal(config['oae-google-analytics']['google-analytics']['id'], 'UA-40243987-3');

                // Check if `enabled` and `id` property match with the values set in the config file using the johnRestContext
                RestAPI.Config.getTenantConfig(johnRestContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(config);
                    assert.equal(config['oae-google-analytics']['google-analytics']['enabled'], false);
                    assert.equal(config['oae-google-analytics']['google-analytics']['id'], 'UA-40243987-3');
                    callback();
                });
            });
        });
    });
});
