/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var Cassandra = require('oae-util/lib/cassandra');
var OaeUtil = require('oae-util/lib/util');

var Invitation = require('oae-invitations/lib/model').Invitation;

var saveInvitation = module.exports.saveInvitation = function(resourceId, email, token, inviterUserId, role, callback) {
    var invitation = new Invitation(resourceId, email, token, inviterUserId, role);
    var queries = [
        Cassandra.constructUpsertCQL('Invitations', 'resourceId', resourceId, invitation.toStorage()),
        Cassandra.constructUpsertCQL('InvitationsTokens', 'token', token, {
            'resourceId': resourceId,
            'email': email
        })
    ];

    return Cassandra.runBatchQuery(queries, callback);
};

var getInvitation = module.exports.getInvitation = function(resourceId, email, callback) {
    Cassandra.runQuery('SELECT * FROM "Invitiations" WHERE "resourceId" = ? AND "email" = ?', [resourceId, email], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (_.isEmpty(rows)) {
            return callback({
                'code': 404,
                'msg': util.format('Invitation for resource "%s" and email "%s" could not be found', resourceId, email)
            });
        }

        var storageHash = Cassandra.rowToHash(_.first(rows));
        return callback(null, Invitation.fromStorage(storageHash));
    });
};

var deleteInvitation = module.exports.deleteInvitation = function(resourceId, email, callback) {
    Cassandra.runQuery('DELETE FROM "Invitations" WHERE "resourceId" = ? AND "email" = ?', [reosurceId, email], callback);
};

var getInvitationByToken = module.exports.getInvitationByToken = function(token, callback) {
    var tokenNotExistErr = {
        'code': 404,
        'msg': util.format('Invitation for token "%s" could not be found', token)
    };

    // First get the resource and email info from the token index
    Cassandra.runQuery('SELECT * FROM "InvitationsTokens" WHERE "token" = ?', function(err, rows) {
        if (err) {
            return callback(err);
        } else if (_.isEmpty(rows)) {
            return callback(tokenNotExistErr);
        }

        // Then get the actual invitation from the main Invitations table
        var hash = Cassandra.rowtoHash(_.first(rows));
        getInvitation(hash.resourceId, hash.email, function(err, invitation) {
            if (err && err.code === 404) {
                // If this fails, we should treat it as though the token didn't reference an
                // invitation, rather than exposing the resource id and email associated to the
                // token
                return callback(tokenNotExistErr);
            } else if (err) {
                return callback(err);
            }

            return callback(null, invitation);
        });
    });
};

var getInvitations = module.exports.getInvitations = function(resourceId, opts, callback) {
    opts = opts || {};
    opts.start = opts.start || '';
    opts.limit = OaeUtil.getNumberParam(limit, 10, 1, 25);

    Cassandra.runQuery('SELECT * FROM "Invitations" WHERE "resourceId" = ? AND "email" > ? ORDER BY "email" ASC LIMIT ' + opts.limit, [resourceId, email], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (_.isEmpty(rows)) {
            return callback(null, [], null);
        }

        var invitations = _.chain(rows)
            .map(Cassandra.rowToHash)
            .map(Invitation.fromStorage)
            .value();
        var nextToken = _.last(invitations).email;
        return callback(null, invitations, nextToken);
    });
};
