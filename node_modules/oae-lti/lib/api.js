/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var oauth = require('oauth-sign');
var request = require('request');
var util = require('util');

var AuthzPermissions = require('oae-authz/lib/permissions');
var log = require('oae-logger').logger('oae-lti');
var PrincipalsApi = require('oae-principals');
var Validator = require('oae-authz/lib/validator').Validator;
var VersionAPI = require('oae-version');

var LtiDAO = require('./internal/dao');

/**
 * Get the parameters required to launch an LTI tool
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}     toolId              The id of the LTI tool to be launched
 * @param  {String}     groupId             The group linked to the LTI tool to be launched
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {User[]}     callback.params     The parameters for an LTI tool launch
 */
var getLtiTool = module.exports.getLtiTool = function(ctx, toolId, groupId, callback) {
    PrincipalsApi.getMe(ctx, function(err, principal) {
        if (err) {
            return callback(err);
        }
        PrincipalsApi.getFullGroupProfile(ctx, groupId, function(err, group) {
            if (err) {
                return callback(err);
            }
            VersionAPI.getVersion(function(err, version) {
                if (err) {
                    return callback(err);
                }
                LtiDAO.getLtiTool(toolId, groupId, function(err, tool) {
                    if (err) {
                        log().error({
                            'err': err
                        }, 'Failed to fetch existing LTI tool');
                        return callback(err);
                    }

                    var launchUrl = tool.launchUrl; // The URL under which the LTI tool reside
                    var secret = tool.secret; // the LTI oauth secret

                    var launchParams = {
                        oauth_consumer_key: tool.consumerKey,
                        oauth_nonce: Date.now(),
                        lti_message_type: 'basic-lti-launch-request',
                        lti_version: 'LTI-1p0',
                        tool_consumer_info_product_family_code: 'OAE',
                        tool_consumer_info_version: version.hilary.version,
                        tool_consumer_instance_guid: group.tenant.alias,
                        resource_link_id: tool.toolId, // unique key for LTI producer launch
                        resource_link_title: tool.displayName, // text the user clicks on
                        resource_link_description: tool.description,
                        user_id: principal.id,
                        context_id: groupId,
                        context_label: group.displayName,
                        context_title: group.displayName,
                        context_type: 'Group',
                        lis_person_email_primary: principal.email,
                        lis_person_name_full: principal.displayName,
                        roles: group.isManager ? 'Instructor' : 'Learner',
                        launch_presentation_locale: principal.locale,
                        launch_presentation_return_url: 'about:blank',
                        launch_presentation_document_target: 'window', // or iframe
                        oauth_signature_method: 'HMAC-SHA1',
                        oauth_timestamp: Date.now(),
                        oauth_version: '1.0'
                    };

                    if (principal.picture && principal.picture.smallUri) {
                        launchParams.user_image = principal.picture.smallUri;
                    }

                    var accsign = oauth.hmacsign('POST', launchUrl, launchParams, secret, '');

                    launchParams.oauth_signature = accsign;

                    // Scrub out OAUTH parameters from tool
                    delete tool.secret;
                    delete tool.consumerKey;

                    // Add isManager and owner
                    tool.isManager = group.isManager;
                    tool.owner = group;
                    return callback(null, {tool, launchParams});
                });
            });
        });
    });
};

/**
 * Create a new LTI tool linked to a group
 *
 * @param  {Context}    ctx                  Standard context object containing the current user and the current tenant
 * @param  {String}     toolId               The id of the LTI tool to be created
 * @param  {String}     groupId              The id of the group the LTI tool will be linked to
 * @param  {String}     launchUrl            The URL from which the LTI tool will launch
 * @param  {String}     secret               The OAUTH secret for the LTI tool
 * @param  {String}     consumerKey          The OAUTH consumer key for the LTI tool
 * @param  {Object}     [opts]               Additional optional LTI tool attributes
 * @param  {String}     [opts.displayName]   The name of the new LTI tool
 * @param  {String}     [opts.description]   A description of the new LTI tool
 * @param  {Function}   [callback]           Standard callback function
 * @param  {Object}     [callback.err]       An error that occurred, if any
 * @param  {Message}    [callback.tool]      The LTI tool model object that was persisted
 */
var addLtiTool = module.exports.addLtiTool = function(ctx, toolId, groupId, launchUrl, secret, consumerKey, opts, callback) {
    // Ensure the target group exists and has not been deleted
    PrincipalsApi.getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        } else if (group.deleted) {
            return callback({'code': 404, 'msg': util.format('Couldn\'t find group: %s', groupId)});
        }
        // Check if we can add tools to this group
        AuthzPermissions.canManage(ctx, group, function(err) {
            if (err) {
                return callback(err);
            }

            // Parameter validation
            var validator = new Validator();
            validator.check(groupId, {'code': 400, 'msg': 'A valid group id must be provided'}).isGroupId();
            validator.check(toolId, {'code': 400, 'msg': 'You need to provide a valid ID for this LTI tool'}).notEmpty();
            validator.check(launchUrl, {'code': 400, 'msg': 'You need to provide a launch URL for this LTI tool'}).notEmpty();
            validator.check(secret, {'code': 400, 'msg': 'You need to provide an OAUTH secret for this LTI tool'}).notEmpty();
            validator.check(consumerKey, {'code': 400, 'msg': 'You need to provide an OAUTH consumer key for this LTI tool'}).notEmpty();

            if (validator.hasErrors()) {
                log().error({
                    'err': validator.getFirstError()
                }, 'New LTI tool could not be validated');
                return callback(validator.getFirstError());
            }

            LtiDAO.createLtiTool(toolId, groupId, launchUrl, secret, consumerKey, opts.displayName, opts.description, function(err, tool) {
                if (err) {
                    log().error({
                        'err': err,
                        'groupId': groupId,
                        'toolId': toolId
                    }, 'Error creating LTI tool');
                    return callback(err);
                }
                return callback(null, tool);
            });
        });
    });
};

/**
 * Get a list of LTI tools belonging to a group.
 *
 * @param  {Context}    ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}     groupId             The id of the group the LTI tool will be linked to
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {Message[]}  callback.tools      An array of LTI tools
 */
var getLtiTools = module.exports.getLtiTools = function(ctx, groupId, callback) {
    // Ensure the target group exists and has not been deleted
    PrincipalsApi.getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        } else if (group.deleted) {
            return callback({'code': 404, 'msg': util.format('Couldn\'t find group: %s', groupId)});
        }
        LtiDAO.getLtiToolsByGroupId(groupId, function(err, tools) {
            if (err) {
                log().error({
                    'err': err
                }, 'Failed to fetch existing LTI tools');
                return callback(err);
            }
            return callback(null, tools);
        });
    });
};

/**
 * Delete an LTI tool from storage.
 *
 * @param  {Context}     ctx                 Standard context object containing the current user and the current tenant
 * @param  {String}      toolId              The id of the LTI tool to be created
 * @param  {String}      groupId             The id of the group the LTI tool will be linked to
 * @param  {Function}    callback            Standard callback function
 * @param  {Object}      callback.err        An error that occurred, if any
 */
var deleteLtiTool = module.exports.deleteLtiTool = function(ctx, toolId, groupId, callback) {
    // Ensure the target group exists and has not been deleted
    PrincipalsApi.getGroup(ctx, groupId, function(err, group) {
        if (err) {
            return callback(err);
        } else if (group.deleted) {
            return callback({'code': 404, 'msg': util.format('Couldn\'t find group: %s', groupId)});
        }
        // Check if we can delete tools in this group
        AuthzPermissions.canManage(ctx, group, function(err) {
            if (err) {
                return callback(err);
            }

            LtiDAO.deleteLtiTool(toolId, groupId, function(err) {
                if (err) {
                    log().error({
                        'err': err
                    }, 'Could not delete new LTI tool');
                    return callback(err);
                }
                return callback();
            });
        });
    });
};
