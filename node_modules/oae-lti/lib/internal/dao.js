/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var Cassandra = require('oae-util/lib/cassandra');

var LtiTool = require('oae-lti/lib/model').LtiTool;

/**
 * Create a LTI tool
 *
 * @param  {String}         toolId                 The id for the LTI tool
 * @param  {String}         groupId                The globally unique id for the group that owns the tool
 * @param  {String}         launchUrl              The launchUrl for the LTI tool
 * @param  {String}         secret                 The OAUTH secret for the LTI tool
 * @param  {String}         consumerKey            The consumerKey for the LTI tool
 * @param  {String}         displayName            The displayName of the LTI tool
 * @param  {String}         description            A description of the LTI tool
 * @param  {Function}       callback               Standard callback function
 * @param  {Object}         callback.err           An error that occurred, if any
 * @param  {LtiTool}        callback.ltiTool       The LTI tool that was created
 */
var createLtiTool = module.exports.createLtiTool = function(toolId, groupId, launchUrl, secret, consumerKey, displayName, description, callback) {
    displayName = displayName || 'LTI tool';
    description = description || '';

    var query = 'INSERT INTO "LtiTools" ("toolId", "groupId", "launchUrl", "secret", "oauthConsumerKey", "displayName", "description") VALUES (?, ?, ?, ?, ?, ?, ?)';
    var parameters = [toolId, groupId, launchUrl, secret, consumerKey, displayName, description];
    Cassandra.runQuery(query, parameters, function (err) {
        if (err) {
            return callback(err);
        }

        var ltiTool = new LtiTool(toolId, groupId, launchUrl, secret,  consumerKey, {
            'displayName': displayName,
            'description': description
        });

        return callback(null, ltiTool);
    });
};

/**
 * Get a LTI tool by its id and group id
 *
 * @param  {String}     toolId              The id of the LTI tool to retrieve
 * @param  {String}     groupId             The id of the group LTI tools are fetched for
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {LtiTool}    callback.ltiTool    The request LTI tool object
 */
var getLtiTool = module.exports.getLtiTool = function(toolId, groupId, callback) {
    Cassandra.runQuery('SELECT * FROM "LtiTools" WHERE "groupId" = ? AND "toolId" = ?', [groupId, toolId], function(err, rows) {
        if (err) {
            return callback(err);
        } else if (_.isEmpty(rows)) {
            return callback({'code': 404, 'msg': 'Could not find item ' + toolId + ' for group ' + groupId});
        }

        return callback(null, _rowToLtiTool(rows[0]));
    });
};

/**
 * Get a list of LTI tools by their group
 *
 * @param  {String}         groupId             The id of the group LTI tools are fetched for
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error that occurred, if any
 * @param  {LtiTool[]}      callback.ltiTools   The LtiTools that are identified by the given group.
 */
var getLtiToolsByGroupId = module.exports.getLtiToolsByGroupId = function(groupId, callback) {
    Cassandra.runQuery('SELECT * FROM "LtiTools" WHERE "groupId" = ?', [groupId], function(err, rows) {
        if (err) {
            return callback(err);
        }

        var tools = _.map(rows, function(row) {
            var ltiTool = _rowToLtiTool(row);

            // Scrub out OAUTH parameters - they are only needed for tool launches
            delete ltiTool.secret;
            delete ltiTool.consumerKey;
            return ltiTool;
        });



        return callback(null, tools);
    });
};

/**
 * Delete a LTI tool
 *
 * @param  {String}     toolId              The id of the LTI tool to delete
 * @param  {String}     groupId             The id of the group for which LTI tool should be deleted
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 */
var deleteLtiTool = module.exports.deleteLtiTool = function(toolId, groupId, callback) {
    Cassandra.runQuery('DELETE FROM "LtiTools" WHERE "groupId" = ? AND "toolId" = ?', [groupId, toolId], callback);
};

/**
 * Given a simple row, convert it into a LtiTool object
 *
 * @param  {Object}         row           The simple key-value pair representing the fields of the LTI tool
 * @return {LtiTool}                      The LTI tool represented by the provided data
 * @api private
 */
var _rowToLtiTool = function(row) {
    var hash = Cassandra.rowToHash(row);
    var tool = new LtiTool(hash.toolId, hash.groupId, hash.launchUrl,
        hash.secret, hash.oauthConsumerKey, {
        'displayName': hash.displayName,
        'description': hash.description
    });
    return tool;
};
