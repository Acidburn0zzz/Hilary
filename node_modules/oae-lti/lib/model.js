/*!
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var oauth = require('oauth-sign');
var util = require('util');

/**
 * The LTI tool model.
 *
 * @param  {String}     id                     The id for the LTI tool
 * @param  {String}     groupId                The globally unique id for the group that owns the tool
 * @param  {String}     launchUrl              The launch UTL for the LTI tool
 * @param  {String}     secret                 The OAUTH secret for the LTI tool
 * @param  {Date}       consumerKey            The LTI tool OAUTH consumer key
 * @param  {Object}     [opts]                 Optional additional LTI tool properties
 * @param  {Number}     [opts.displayName]     The name of the LTI tool
 * @param  {Number}     [opts.description]     A description of the LTI tool
*/
module.exports.LtiTool = function(id, groupId, launchUrl, secret, consumerKey, opts) {
    opts = opts || {};

    var that = {};
    that.id = id;
    that.groupId = groupId;
    that.launchUrl = launchUrl;
    that.secret = secret;
    that.consumerKey = consumerKey;
    that.displayName = opts.displayName;
    that.description = opts.description;

    // The profilePath is in format `/lti/{tenantAlias}/{resourceId}/{id}`
    var split = groupId.split(':');
    that.profilePath = util.format('/lti/%s/%s/%s', split[1], split[2], id);
    that.resourceType = 'ltitool';

    return that;
};

/**
 * The LtiLaunchParams model
 *
 * @param  {Object} tool           TODO
 * @param  {Object} version        TODO
 * @param  {Object} group          TODO
 * @param  {String} groupId        The globally unique id for the group that owns the tool
 * @param  {Object} principal      TODO
*/
module.exports.LtiLaunchParams = function (tool, version, group, groupId, principal) {

    var that = {};
    that.oauth_consumer_key = tool.consumerKey;
    that.oauth_nonce = Date.now();
    that.lti_message_type = 'basic-lti-launch-request';
    that.lti_version = 'LTI-1p0';
    that.tool_consumer_info_product_family_code = 'OAE';
    that.tool_consumer_info_version = version.hilary.version;
    that.tool_consumer_instance_guid = group.tenant.alias;
    that.resource_link_id = tool.id; // unique key for LTI producer launch
    that.resource_link_title = tool.displayName; // text the user clicks on
    that.resource_link_description = tool.description;

    // using a combination of groupId and user.id ensures that if the same user
    // has access to the tool through another group, that data will be kept separate
    that.user_id = groupId + ':' + principal.id;
    that.context_id = groupId;
    that.context_label = group.displayName;
    that.context_title = group.displayName;
    that.context_type = 'Group';
    that.lis_person_email_primary = principal.email;
    that.lis_person_name_full = principal.displayName;
    that.roles = group.isManager ? 'Instructor' : 'Learner';
    that.launch_presentation_locale = principal.locale;
    that.launch_presentation_return_url = 'about:blank';
    that.launch_presentation_document_target = 'window'; // or iframe
    that.oauth_signature_method = 'HMAC-SHA1';
    that.oauth_timestamp = Date.now();
    that.oauth_version = '1.0';


    if (principal.picture && principal.picture.smallUri) {
        that.user_image = principal.picture.smallUri;
    }

    that.oauth_signature = oauth.hmacsign('POST', tool.launchUrl, launchParams, tool.secret, '');

    return that;
};


/**
 * A pseudo-model that includes all the information to launch an LTI tool
 *
 * @param  {LtiTool}         tool           An LtiTool object
 * @param  {LtiLaunchParams} launchParams   An LtiLaunchParams object
*/
module.exports.ToolLaunchParams = function(tool, launchParams) {
    launchParams = launchParams || {};

    var that = {};
    that.tool = tool;
    that.launchParams = launchParams;

    return that;
};
