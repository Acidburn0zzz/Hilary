/*
 * Copyright 2017 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var util = require('util');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model.user').User;


describe('LTI tools', function() {

    // Rest context that can be used to perform requests as different types of users
    var anonymousRestContext = null;
    var camAdminRestContext = null;
    var johnRestContext = null;

    /**
     * Function that will create a user that will be used inside of the tests
     */
    before(function(callback) {
        // Create all the REST contexts before each test
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Create the REST context for our test user
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users, john) {
            assert.ok(!err);
            johnRestContext = john.restContext;

            // Add the full user id onto the REST context for use inside of this test
            johnRestContext.user = john.user;
            return callback();
        });
    });

    describe('Create LTI tool', function() {

        /**
         * Test that verifies that LTI tool creation is successful when all of the parameters have been provided
         */
        it('verify that LTI tool creation succeeds given a valid request', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                var launchUrl = 'http://lti.launch.url';
                var secret = 'secret';
                var key = '12345';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, launchUrl, secret, key, 'LTI tool title', 'LTI tool description', function(err, ltiTool) {
                    assert.ok(!err);
                    assert.equal(ltiTool.toolId, toolId);
                    assert.equal(ltiTool.groupId, group.id);
                    assert.equal(ltiTool.launchUrl, launchUrl);
                    assert.equal(ltiTool.secret, secret);
                    assert.equal(ltiTool.consumerKey, key);
                    assert.equal(ltiTool.displayName, 'LTI tool title');
                    assert.equal(ltiTool.description, 'LTI tool description');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that a LTI tool can be created without a description
         */
        it('verify that missing description is accepted', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                var launchUrl = 'http://lti.launch.url';
                var secret = 'secret';
                var key = '12345';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, launchUrl, secret, key, 'LTI tool title', null, function(err, toolObject) {
                    assert.ok(!err);
                    assert.equal(toolObject.description, '');

                    // Verify that an empty description is acceptable as well
                    RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, launchUrl, secret, key, 'LTI tool title', '', function(err, toolObject) {
                        assert.ok(!err);
                        assert.equal(toolObject.description, '');
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that creating a LTI tool with no toolId is not possible
         */
        it('verify that missing toolId is not accepted', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var launchUrl = 'http://lti.launch.url';
                var secret = 'secret';
                var key = '12345';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, null, launchUrl, secret, key, 'LTI tool title', null, function(err, toolObject) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'You need to provide a valid ID for this LTI tool');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that creating a LTI tool with no launchUrl is not possible
         */
        it('verify that missing launchUrl is not accepted', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                var secret = 'secret';
                var key = '12345';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, '', secret, key, 'LTI tool title', null, function(err, toolObject) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'You need to provide a launch URL for this LTI tool');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that creating a LTI tool with no OAUTH secret is not possible
         */
        it('verify that missing OAUTH secret is not accepted', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                var launchUrl = 'http://lti.launch.url';
                var key = '12345';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, launchUrl, null, key, 'LTI tool title', null, function(err, toolObject) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'You need to provide an OAUTH secret for this LTI tool');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that creating a LTI tool with no OAUTH consumer key is not possible
         */
        it('verify that missing OAUTH consumer key is not accepted', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                var launchUrl = 'http://lti.launch.url';
                var secret = 'secret';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, launchUrl, secret, null, 'LTI tool title', null, function(err, toolObject) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    assert.equal(err.msg, 'You need to provide an OAUTH consumer key for this LTI tool');
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that a non-manager of a group can not create a LTI tool
         */
        it('verify that a non-manager can not create LTI tool', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                var launchUrl = 'http://lti.launch.url';
                var secret = 'secret';
                var key = '12345';
                RestAPI.LtiTool.createLtiTool(anonymousRestContext, group.id, toolId, launchUrl, secret, key, 'LTI tool title', 'LTI tool description', function(err, toolObject) {
                    assert.ok(err);
                    assert.equal(err.code, 401);
                    assert.equal(err.msg, 'The current user does not have access to manage this resource');
                    return callback();
                });
            });
        });
    });


    describe('Get LTI tool', function() {

        /**
         * Test that verifies that an existing LTI tool can be successfully retrieved and launch data
         * created
         */
        it('verify retrieved LTI tool launch data', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                var launchUrl = 'http://lti.launch.url';
                var secret = 'secret';
                var key = '12345';
                var title = 'LTI tool title';
                var description = 'LTI tool description';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, launchUrl, secret, key, title, description, function(err, toolObject) {
                    assert.ok(!err);
                    // Get the LTI tool and verify its model
                    RestAPI.LtiTool.getLtiTool(johnRestContext, group.id, toolId, function(err, ltiLaunchData) {
                        assert.ok(!err);
                        assert.equal(ltiLaunchData['oauth_consumer_key'], key);
                        assert.equal(ltiLaunchData['lti_message_type'], 'basic-lti-launch-request');
                        assert.equal(ltiLaunchData['lti_version'], 'LTI-1p0');
                        assert.equal(ltiLaunchData['tool_consumer_info_product_family_code'], 'OAE');
                        assert.equal(ltiLaunchData['resource_link_id'], toolId);
                        assert.equal(ltiLaunchData['resource_link_title'], title);
                        assert.equal(ltiLaunchData['resource_link_description'], description);
                        assert.equal(ltiLaunchData['user_id'], johnRestContext.user.id);
                        assert.equal(ltiLaunchData['context_id'], group.id);
                        assert.equal(ltiLaunchData['lis_person_email_primary'], johnRestContext.user.email);
                        assert.equal(ltiLaunchData['roles'], 'Instructor');
                        assert.equal(ltiLaunchData['launchUrl'], launchUrl);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that non-managers are given role 'Learner'
         */
        it('verify retrieved LTI tool launch data', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                var toolId = '12345';
                RestAPI.LtiTool.createLtiTool(johnRestContext, group.id, toolId, 'http://lti.launch.url', 'secret', '12345', 'LTI tool title', 'LTI tool description', function(err, toolObject) {
                    assert.ok(!err);
                    // Get the LTI tool and verify its model
                    RestAPI.LtiTool.getLtiTool(anonymousRestContext, group.id, toolId, function(err, ltiLaunchData) {
                        assert.ok(!err);
                        assert.equal(ltiLaunchData['roles'], 'Learner');
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a non-existing LTI tool cannot be retrieved
         */
        it('verify non existing LTI tool can not be retrieved', function(callback) {
            // Invalid group identifier
            RestAPI.LtiTool.getLtiTool(johnRestContext, 'g:camtest:totally-unknown', '12345', function(err, ltiTool) {
                assert.ok(err);
                assert.equal(err.code, 404);
                assert.ok(!ltiTool);

                RestAPI.Group.createGroup(johnRestContext, 'This is a group', null, 'public', 'yes', [], [], function(err, group) {
                    // Non existing tool
                    RestAPI.LtiTool.getLtiTool(johnRestContext, group.id, 'not-a-tool', function(err, ltiTool) {
                        assert.ok(err);
                        assert.equal(err.code, 404);
                        assert.ok(!ltiTool);
                        return callback();
                    });
                });
            });
        });
    });
});
