/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var crypto = require('crypto');
var fs = require('fs');
var request = require('request');

var log = require('oae-logger').logger('oae-mediacore');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PreviewUtil = require('oae-preview-processor/lib/util');

var MediaCoreConfig = require('oae-config').config('oae-mediacore');
var MediaCoreDAO = require('./internal/dao');
var MediaCoreUtil = require('./internal/util');

/**
 * @borrows Interface.test as Videos.test
 */
var test = module.exports.test = function(ctx, contentObj, callback) {
    if (contentObj.resourceSubType === 'file' && MediaCoreConfig.getValue('admin', 'mediacore', 'enabled')) {
        if (_isVideo(contentObj.mime) || _isAudio(contentObj.mime)) {
            return callback(null, 20);
        }
    }

    return callback(null, -1);
};

/**
 * @borrows Interface.generatePreviews as Videos.generatePreviews
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, contentObj, callback) {
    // If this revision has already been sent to mediacore and processed, do not re-upload it. Instead just
    // regenerate the thumbnail images from the mediacore API
    var revision = ctx.revision;
    if (revision.previews && revision.previews.mediaCoreId) {
        return _addMetadata(ctx, revision.previews.mediaCoreId, callback);
    }

    // Download the video file
    ctx.download(function(err, path) {
        if (err) {
            log().error({'err': err}, 'Error downloading previews');
            return callback(err);
        }

        var mediaCoreConfig = MediaCoreUtil.getConfig();

        // Create a media item
        var createMediaUrl = MediaCoreUtil.getSignedUrl(mediaCoreConfig.url + '/api2/media', null, mediaCoreConfig.keyId, mediaCoreConfig.secret);
        request.post({
            'url': createMediaUrl,
            'json': {
                'collection_id': mediaCoreConfig.collectionId,
                'title': contentObj.displayName,
                'byline': contentObj.createdBy.displayName,
                'description': null,
                'tags': null
            }
        }, function(err, res, body) {
            if (_checkError(err, 'Error POSTing to create the mediacore video item', res, body, callback)) {
                return;
            }

            var mediaId = body.id;

            // Save the mediaId to Cassandra so we can use it to refresh thumbnails later
            MediaCoreDAO.saveContentRevisionId(mediaId, ctx.contentId, ctx.revisionId, function(err) {
                if (err) {
                    return callback(err);
                }

                var uploadType = (_isVideo(contentObj.mime)) ? 'video' : 'audio';
                
                // Ask mediacore to let us upload a file to the media item
                var createMediaFileUrl = MediaCoreUtil.getSignedUrl(mediaCoreConfig.url + '/api2/media/' + mediaId + '/files', null, mediaCoreConfig.keyId, mediaCoreConfig.secret);
                request.post({
                    'url': createMediaFileUrl,
                    'json': {
                        'upload_type': uploadType,
                        'upload_name': contentObj.displayName,
                        'upload_size': contentObj.size
                    }
                }, function(err, res, body) {
                    if (_checkError(err, 'Error POSTing to create the mediacore video file', res, body, callback)) {
                        return;
                    }

                    var uploadProtocol = body.upload.protocols.form_data;

                    // Tell mediacore to "publish" the media item
                    var publishMediaUrl =  MediaCoreUtil.getSignedUrl(mediaCoreConfig.url + '/api2/media/' + mediaId + '/publish', null, mediaCoreConfig.keyId, mediaCoreConfig.secret);
                    request.post({'url': publishMediaUrl}, function(err, res, body) {
                        if (_checkError(err, 'Error POSTing to publish the mediacore item', res, body, callback)) {
                            return;
                        }

                        // Upload the file as multipart/form-data
                        var uploadReq = request.post(uploadProtocol.upload_url, function(err, res, body) {
                            if (_checkError(err, 'Error uploading the mediacore video file to mediacore', res, body, callback)) {
                                return;
                            }

                            // Notify mediacore that we're done uploading the file
                            if (uploadProtocol.postprocess_url) {
                                var postprocessUrl = MediaCoreUtil.getSignedUrl(mediaCoreConfig.url + uploadProtocol.postprocess_url, null, mediaCoreConfig.keyId, mediaCoreConfig.secret);
                                request.post({
                                    'url': postprocessUrl,
                                    'json': {
                                        'response_status': res.statusCode,
                                        'response_body': body
                                    }
                                }, function(err, res, body) {
                                    if (_checkError(err, 'Error POSTing to notify mediacore the file has completed uploading', res, body, callback)) {
                                        return;
                                    }

                                    _addMetadata(ctx, mediaId, callback);
                                });
                            } else {
                                _addMetadata(ctx, mediaId, callback);
                            }
                        });

                        // Add the body parameters to the multi-part upload form
                        var form = uploadReq.form();
                        _.each(uploadProtocol.upload_post_params, function(value, key) {
                            form.append(key, value);
                        });

                        form.append(uploadProtocol.upload_file_param, fs.createReadStream(path));
                    });
                });
            });
        });
    });
};

/**
 * Determine whether or not the given mimeType is that of a video
 *
 * @param  {String}     mimeType        The mimetype to test
 * @return {Boolean}                    `true` or `false`, indicating whether or not the given mime type indicates a video file
 * @api private
 */
var _isVideo = function(mimeType) {
    return (PreviewConstants.TYPES.VIDEO.indexOf(mimeType) !== -1);
};

/**
 * Determine whether or not the given mimeType is that of an audio
 *
 * @param  {String}     mimeType        The mimetype to test
 * @return {Boolean}                    `true` or `false`, indicating whether or not the given mime type indicates an audio file
 * @api private
 */
var _isAudio = function(mimeType) {
    return (PreviewConstants.TYPES.AUDIO.indexOf(mimeType) !== -1);
};

/**
 * Fetch and apply the preview metadata (image uris and mediaCoreId) to the preview context.
 *
 * @param  {PreviewContext}     ctx                 The preview context on which to set the thumbnails
 * @param  {String}             mediaCoreId         The id of the mediacore item that maps to the revision
 * @param  {Function}           callback            The method to invoke if there is an error
 * @param  {Object}             callback.err        The standard err object to return in the callback
 * @api private
 */
var _addMetadata = function(ctx, mediaCoreId, callback) {
    var mediaCoreConfig = MediaCoreUtil.getConfig();

    ctx.addPreviewMetadata('mediaCoreId', mediaCoreId);

    // Get thumbnail urls
    var thumbUrl = MediaCoreUtil.getSignedUrl(mediaCoreConfig.url + '/api2/media/' + mediaCoreId + '/thumbs', null, mediaCoreConfig.keyId, mediaCoreConfig.secret);
    request.get(thumbUrl, function(err, res, body) {
        if(_checkError(err, 'Error getting the thumbnail urls', res, body, callback)) {
            return;
        }

        try {
            body = JSON.parse(body);
        } catch (ex) {
            log().error({'err': ex}, 'Received invalid response from MediaCore when getting thumbnail urls');
            return callback({'code': 500, 'msg': ex.message});
        }

        ctx.addPreview(body.sizes.l, 'thumbnail');
        ctx.addPreview(body.sizes.l, 'small');
        ctx.addPreview(body.sizes['720p'], 'medium');
        ctx.addPreview(body.sizes['720p'], 'large');
        ctx.addPreview(body.sizes['720p'], 'wide');

        return callback();
    });
};

/**
 * Check if the given response indicates an error that occurred. If so, this method will invoke the callback and
 * return `true`. Otherwise, `false` will be returned without invoking the callback.
 *
 * @param  {Object}     err             An error that occurred, if any
 * @param  {Response}   response        The ExpressJS response to check for errors
 * @param  {String}     body            The body of the response
 * @param  {String}     message         The log message for the log entry if this is an error
 * @param  {Function}   callback        The method to invoke if there is an error
 * @param  {Object}     callback.err    The standard err object to return in the callback
 * @return {Boolean}                    `true` if the input represents an error, `false` otherwise
 * @api private
 */
var _checkError = function(err, message, res, body, callback) {
    if (err) {
        log().error({'err': err}, message);
        callback(err);
        return true;
    } else if (res.statusCode >= 400) {
        var responseErr = {'code': res.statusCode, 'msg': message, 'body': body};
        log().error({'err': responseErr}, message);
        callback(responseErr);
        return true;
    }

    return false;
};
