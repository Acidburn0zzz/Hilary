/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');

var MQTestUtil = require('oae-util/lib/test/mq-util');
var PreviewAPI = require('oae-preview-processor');
var PreviewConstants = require('oae-preview-processor/lib/constants');
var PreviewTestUtil = require('oae-preview-processor/lib/test/util');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

var MediaCoreProcessor = require('oae-mediacore/lib/processor');

describe('MediaCore Processor', function() {

    var globalAdminRestContext = null;
    var camAdminRestContext = null;

    var app = null;
    var server = null;
    var port = null;

    /*!
     * Set up a mock web server and rest contexts before each test
     */
    beforeEach(function(callback) {
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);

        // Start the express server
        TestsUtil.createTestServer(function(_app, _server, _port) {
            app = _app;
            server = _server;
            port = _port;

            // Enable the mediacore preview processor and configuring it to talk to our new web server
            var update = {
                'oae-mediacore/mediacore/enabled': true,
                'oae-mediacore/mediacore/url': util.format('http://localhost:%s', port),
                'oae-mediacore/mediacore/keyId': 'key',
                'oae-mediacore/mediacore/secret': 'secret',
                'oae-mediacore/mediacore/collectionId': 12345
            };
            RestAPI.Config.updateConfig(globalAdminRestContext, null, update, function(err) {
                assert.ok(!err);
                return callback();
            });
        });
    });

    /*!
     * Shut down the mock web server after each test
     */
    afterEach(function(callback) {
        server.close(callback);
    });

    /*!
     * @return a stream to a video file
     */
    var _getVideoStream = function() {
        return fs.createReadStream(__dirname + '/data/video.mp4');
    };

    /*!
     * @return a stream to an audio file
     */
    var _getAudioStream = function() {
        return fs.createReadStream(__dirname + '/data/music.mp3');
    };

    describe('#test', function() {

        /**
         * Test that verifies the mediacore processor will claim an mp4 file
         */
        it('verify the mediacore processor will pick up an mp4 file', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, function(err, content) {
                    assert.ok(!err);
                    MediaCoreProcessor.test(null, content, function(err, rank) {
                        assert.strictEqual(rank, 20);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies the mediacore processor will claim an mp3 file
         */
        it('verify the mediacore processor will pick up an mp3 file', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                RestAPI.Content.createFile(user.restContext, 'test song', null, 'public', _getAudioStream, null, null, function(err, content) {
                    assert.ok(!err);
                    MediaCoreProcessor.test(null, content, function(err, rank) {
                        assert.strictEqual(rank, 20);
                        return callback();
                    });
                });
            });
        });
    });

    describe('#generatePreviews', function() {

        /*!
         * Verify that the mediacore video processor executes the necessary web requests to mediacore without the
         * post-process url
         */
        it('verify video file is posted properly to mediacore', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var createdMediaItem = false;
                var createdFile = false;
                var publishedFile = false;
                var uploadedFile = false;
                var gotThumbnails = false;

                // Endpoint for creating a media item. Respond with a mock media id
                app.post('/api2/media', function(req, res) {
                    createdMediaItem = true;
                    res.send(200, {'id': 67890});
                });

                // Handle the request to create the file stub on the mediacore server
                app.post('/api2/media/:mediaId/files', function(req, res) {
                    createdFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    // Return this mock structure to validate
                    res.send(200, {
                        'upload': {
                            'protocols': {
                                'form_data': {
                                    // The subsequent upload request will go to this url
                                    'upload_url': 'http://localhost:' + port + '/api2/media/67890/upload',

                                    // The upload request should contain these post params
                                    'upload_post_params': {
                                        'key': 'value'
                                    }
                                }
                            }
                        }
                    });
                });

                // Handle the request to publish the upload
                app.post('/api2/media/:mediaId/publish', function(req, res) {
                    publishedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {});
                });

                // Handle the request to upload the file body
                app.post('/api2/media/:mediaId/upload', function(req, res) {
                    uploadedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    assert.equal(req.body.key, 'value');
                    res.send(200);
                });

                // Handle the request to fetch the thumbnails
                app.get('/api2/media/:mediaId/thumbs', function(req, res) {
                    gotThumbnails = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {
                        'sizes': {
                            'l': 'http://path/to/large/image',
                            '720p': 'http://path/to/720p/image'
                        }
                    });
                });

                // Create a video item and wait for the preview processor to invoke all our endpoints
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, function(err, content) {
                    assert.ok(!err);

                    var numLargePreviews = 0;
                    var num720pPreviews = 0;
                    var hadMediaCoreIdPreview = false;

                    var mockPreviewContext = {
                        'contentId': content.id,
                        'revisionId': content.latestRevisionId,
                        'revision': {'previews': {}},
                        'download': function(callback) {
                            // We'll give a reference to the file, but we're not actually going to use it
                            return callback(null, __dirname + '/data/video.mp4');
                        },
                        'addPreview': function(name, value) {
                            // Ensure the preview references apply to the proper preview sizes
                            if (name === 'http://path/to/large/image') {
                                numLargePreviews++;
                                assert.ok(_.contains(['thumbnail', 'small'], value));
                            } else if (name === 'http://path/to/720p/image') {
                                num720pPreviews++;
                                assert.ok(_.contains(['medium', 'large', 'wide'], value));
                            }
                        },
                        'addPreviewMetadata': function(name, value) {
                            // Ensure the mediaCoreId that gets set is correct
                            if (name === 'mediaCoreId') {
                                hadMediaCoreIdPreview = true;
                                assert.equal(value, 67890);
                            }
                        }
                    };

                    // Generate the previews to invoke the mock endpoints and assert the data set on the mock preview context
                    MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                        assert.ok(!err);
                        assert.ok(createdMediaItem);
                        assert.ok(createdFile);
                        assert.ok(publishedFile);
                        assert.ok(uploadedFile);
                        assert.ok(gotThumbnails);

                        assert.ok(hadMediaCoreIdPreview);
                        assert.equal(numLargePreviews, 2);
                        assert.equal(num720pPreviews, 3);

                        return callback();
                    });
                });
            });
        });

        /*!
         * Verify that the mediacore video processor only uploads to mediacore once
         */
        it('verify video file is not uploaded to mediacore if it already has a media id', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var gotThumbnails = false;

                // Endpoint for creating a media item. Respond with a mock media id
                app.post('/api2/media', function(req, res) {
                    assert.fail('Should not have tried to create a media item');
                });

                // Handle the request to create the file stub on the mediacore server
                app.post('/api2/media/:mediaId/files', function(req, res) {
                    assert.fail('Should not have tried to create a media file');
                });

                // Handle the request to publish the upload
                app.post('/api2/media/:mediaId/publish', function(req, res) {
                    assert.fail('Should not have tried to publish a media item');
                });

                // Handle the request to upload the file body
                app.post('/api2/media/:mediaId/upload', function(req, res) {
                    assert.fail('Should not have tried to upload a file');
                });

                // Handle the request to fetch the thumbnails
                app.get('/api2/media/:mediaId/thumbs', function(req, res) {
                    gotThumbnails = true;
                    assert.equal(req.params.mediaId, 12345);
                    res.send(200, {
                        'sizes': {
                            'l': 'http://path/to/large/image',
                            '720p': 'http://path/to/720p/image'
                        }
                    });
                });

                // Create a video item and wait for the preview processor to invoke all our endpoints
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, function(err, content) {
                    assert.ok(!err);

                    var numLargePreviews = 0;
                    var num720pPreviews = 0;
                    var hadMediaCoreIdPreview = false;

                    var mockPreviewContext = {
                        'contentId': content.id,
                        'revisionId': content.latestRevisionId,
                        'revision': {'previews': {'mediaCoreId': 12345}},
                        'download': function(callback) {
                            // We should not download the file body because our revision has a mediaCoreId already
                            assert.fail('Should not have tried to download the video file to the PP');
                        },
                        'addPreview': function(name, value) {
                            // Ensure the preview references apply to the proper preview sizes
                            if (name === 'http://path/to/large/image') {
                                numLargePreviews++;
                                assert.ok(_.contains(['thumbnail', 'small'], value));
                            } else if (name === 'http://path/to/720p/image') {
                                num720pPreviews++;
                                assert.ok(_.contains(['medium', 'large', 'wide'], value));
                            }
                        },
                        'addPreviewMetadata': function(name, value) {
                            // Ensure the mediaCoreId that gets set is correct
                            if (name === 'mediaCoreId') {
                                hadMediaCoreIdPreview = true;
                                assert.equal(value, 12345);
                            }
                        }
                    };

                    // Generate the previews to invoke the test and ensure we only fetch the existing thumbnails
                    MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                        assert.ok(!err);
                        assert.ok(gotThumbnails);

                        assert.ok(hadMediaCoreIdPreview);
                        assert.equal(numLargePreviews, 2);
                        assert.equal(num720pPreviews, 3);

                        return callback();
                    });
                });
            });
        });

        /*!
         * Verify that the mediacore video processor executes the necessary web requests to mediacore with a
         * post-process url
         */
        it('verify video file is posted properly with post-process url', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, user) {
                assert.ok(!err);
                user = _.values(user)[0];

                var createdMediaItem = false;
                var createdFile = false;
                var publishedFile = false;
                var uploadedFile = false;
                var postProcessed = false;
                var gotThumbnails = false;

                // Endpoint for creating a media item. Respond with a mock media id
                app.post('/api2/media', function(req, res) {
                    createdMediaItem = true;
                    res.send(200, {'id': 67890});
                });

                // Handle the request to create the file stub on the mediacore server
                app.post('/api2/media/:mediaId/files', function(req, res) {
                    createdFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    // Return this mock structure to validate
                    res.send(200, {
                        'upload': {
                            'protocols': {
                                'form_data': {
                                    // The subsequent upload request will go to this url
                                    'upload_url': 'http://localhost:' + port + '/api2/media/67890/upload',

                                    // Add a post-process url so we can ensure it gets invoked
                                    'postprocess_url': '/api2/media/67890/postProcess',

                                    // The upload request should contain these post params
                                    'upload_post_params': {
                                        'key': 'value'
                                    }
                                }
                            }
                        }
                    });
                });

                // Handle the request to publish the upload
                app.post('/api2/media/:mediaId/publish', function(req, res) {
                    publishedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {});
                });

                // Handle the request to upload the file body
                app.post('/api2/media/:mediaId/upload', function(req, res) {
                    uploadedFile = true;
                    assert.equal(req.params.mediaId, 67890);
                    assert.equal(req.body.key, 'value');
                    res.send(200);
                });

                // Handle the request to fetch the thumbnails
                app.get('/api2/media/:mediaId/thumbs', function(req, res) {
                    gotThumbnails = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {
                        'sizes': {
                            'l': 'http://path/to/large/image',
                            '720p': 'http://path/to/720p/image'
                        }
                    });
                });

                // Handle the request to fetch the thumbnails
                app.post('/api2/media/:mediaId/postProcess', function(req, res) {
                    postProcessed = true;
                    assert.equal(req.params.mediaId, 67890);
                    res.send(200, {});
                });

                // Create a video item and wait for the preview processor to invoke all our endpoints
                RestAPI.Content.createFile(user.restContext, 'test video', null, 'public', _getVideoStream, null, null, function(err, content) {
                    assert.ok(!err);

                    var numLargePreviews = 0;
                    var num720pPreviews = 0;
                    var hadMediaCoreIdPreview = false;

                    var mockPreviewContext = {
                        'contentId': content.id,
                        'revisionId': content.latestRevisionId,
                        'revision': {'previews': {}},
                        'download': function(callback) {
                            // We'll give a reference to the file, but we're not actually going to use it
                            return callback(null, __dirname + '/data/video.mp4');
                        },
                        'addPreview': function(name, value) {
                            // Ensure the preview references apply to the proper preview sizes
                            if (name === 'http://path/to/large/image') {
                                numLargePreviews++;
                                assert.ok(_.contains(['thumbnail', 'small'], value));
                            } else if (name === 'http://path/to/720p/image') {
                                num720pPreviews++;
                                assert.ok(_.contains(['medium', 'large', 'wide'], value));
                            }
                        },
                        'addPreviewMetadata': function(name, value) {
                            // Ensure the mediaCoreId that gets set is correct
                            if (name === 'mediaCoreId') {
                                hadMediaCoreIdPreview = true;
                                assert.equal(value, 67890);
                            }
                        }
                    };

                    // Generate the previews to invoke the mock endpoints and assert the data set on the mock preview context
                    MediaCoreProcessor.generatePreviews(mockPreviewContext, content, function(err) {
                        assert.ok(!err, JSON.stringify(err, null, 2));
                        assert.ok(createdMediaItem);
                        assert.ok(createdFile);
                        assert.ok(publishedFile);
                        assert.ok(uploadedFile);
                        assert.ok(gotThumbnails);
                        assert.ok(postProcessed);

                        assert.ok(hadMediaCoreIdPreview);
                        assert.equal(numLargePreviews, 2);
                        assert.equal(num720pPreviews, 3);

                        return callback();
                    });
                });
            });
        });

    });
});