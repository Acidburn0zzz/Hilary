/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var MessageBoxAPI = require('oae-messagebox');

var registerMessageSearchDocument = module.exports.registerMessageSearchDocument = function(name, producer, callback) {
    var messagesChildSearchDocumentOptions = {
        'schema': require('./search/schema/resourceMessagesSchema'),
        'producer': producer
    };

    return SearchAPI.registerChildSearchDocument(name, messagesChildSearchDocumentOptions, callback);
};

var createAllMessageSearchDocuments = module.exports.createAllMessageSearchDocuments = function(name, resourceId, messageBoxId, callback) {
    _getAllMessages(messageBoxId, null, 100, function(err, messages) {
        if (err) {
            return callback(err);
        }

        return callback(null, createMessageSearchDocuments(name, resourceId, messages));
    });
};

var createMessageSearchDocuments = module.exports.createMessageSearchDocuments = function(name, resourceId, messages) {
    return _.chain(messages)
        .filter(function(message) {
            // Do not convert deleted messages into search documents
            return (!message.deleted);
        })
        .map(function(message) {
            return SearchUtil.createChildSearchDocument(name, resourceId, {'id': message.id, 'body': message.body});
        })
        .value();
};

var deleteMessageSearchDocument = module.exports.deleteMessageSearchDocument = function(name, message) {
    var children = {};
    children[name] = [message.id];
    return MQ.submit(SearchConstants.mq.TASK_DELETE_DOCUMENT, {'children': children});
};

/**
 * Get all the messages of a message box, up to a hard-coded limit of 10,000.
 *
 * @param  {String}     messageBoxId            The id of the messagebox whose messages to fetch
 * @param  {String}     start                   Where to start scanning messages
 * @param  {Number}     chunkSize               The maximum number of messages to fetch
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error that occurred, if any
 * @param  {Message[]}  callback.messages       The messages in the message box
 */
var _getAllMessages = function(messageBoxId, start, chunkSize, callback, _messages) {
    _messages = _messages || [];
    MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, start, chunkSize, null, function(err, messages, nextToken) {
        if (err) {
            return callback(err);
        }

        _messages = _.union(_messages, messages);
        if (!nextToken) {
            return callback(null, _messages);
        } else {
            return _getAllMessages(messageBoxId, nextToken, chunkSize, callback, _messages);
        }
    });
};
