/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var MessageBoxAPI = require('oae-messagebox');

describe('Messagebox', function() {

    /**
     * Verifies that the message with `id` is present in the messages list.
     *
     * @param  {String}     id          The id of the message to look for.
     * @param  {String}     body        The body of the message to match.
     * @param  {Number}     replyTo     The timestamp this message is a reply to, leave null if the message is not a reply to another message.
     * @param  {Message[]}  messages    An array of messages that should contain the message with the specified `id`.
     * @return {Message}                Returns the found message. If the message is not found, an exception will be thrown by assert.
     */
    var verifyMessage = function(id, body, replyTo, messages) {
        var message = _.find(messages, function(message) { return message.id === id; });
        assert.ok(message);
        assert.equal(message.body, body);
        assert.equal(message.replyTo, replyTo);
        return message;
    };

    describe('#createMessage', function() {

        /**
         * Verifies that the parameters for the `createMessage` function get validated.
         */
        it('verify parameter validation', function(callback) {
            // Missing messagebox.
            MessageBoxAPI.createMessage(null, 'u:camtest:foo', 'body', {}, function(err, message) {
                assert.equal(err.code, 400);
                assert.ok(!message);

                MessageBoxAPI.createMessage('boxId', null, 'body', {}, function(err, message) {
                    assert.equal(err.code, 400);
                    assert.ok(!message);
                    MessageBoxAPI.createMessage('boxId', 'not a principal id', 'body', {}, function(err, message) {
                        assert.equal(err.code, 400);
                        assert.ok(!message);
                        // Messages come from users, not groups
                        MessageBoxAPI.createMessage('boxId', 'g:camtest:bleh', 'body', {}, function(err, message) {
                            assert.equal(err.code, 400);
                            assert.ok(!message);

                            // Missing body
                            MessageBoxAPI.createMessage('boxId', 'g:camtest:bleh', null, {}, function(err, message) {
                                assert.equal(err.code, 400);
                                assert.ok(!message);

                                // If we add a reply, it should be a timestamp.
                                MessageBoxAPI.createMessage('boxId', 'g:camtest:bleh', null, {'replyToCreated': null}, function(err, message) {
                                    assert.equal(err.code, 400);
                                    assert.ok(!message);
                                    MessageBoxAPI.createMessage('boxId', 'g:camtest:bleh', null, {'replyToCreated': 'no int'}, function(err, message) {
                                        assert.equal(err.code, 400);
                                        assert.ok(!message);
                                        MessageBoxAPI.createMessage('boxId', 'g:camtest:bleh', null, {'replyToCreated': Date.now() + 3000}, function(err, message) {
                                            assert.equal(err.code, 400);
                                            assert.ok(!message);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * A test that creates a message and retrieves it.
         */
        it('verify creating a message', function(callback) {
            var messageBoxId = 'msg-box-test-' + Math.random();
            MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'body', {}, function(err, message) {
                assert.ok(!err);

                // Sanity check: retrieve it back
                MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, null, function(err, messages) {
                    assert.ok(!err);
                    verifyMessage(message.id, 'body', null, messages);
                    callback();
                });
            });
        });

        /**
         * A test that verifies the replying mechanisme.
         */
        it('verify replying on a message', function(callback) {
            var messageBoxId = 'msg-box-test-' + Math.random();

            // First check that you cannot reply to a non-existant message.
            MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'body', {'replyToCreated': Date.now() - 1000}, function(err, message) {
                assert.equal(err.code, 400);

                MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'body', {}, function(err, message) {
                    assert.ok(!err);
                    assert.ok(message);

                    MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'body', {'replyToCreated': message.created}, function(err, reply) {
                        assert.ok(!err);
                        assert.ok(reply);
                        assert.equal(reply.replyTo, message.created);

                        // Sanity check: retrieve them back
                        MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, null, function(err, messages) {
                            assert.ok(!err);
                            verifyMessage(message.id, 'body', null, messages);
                            verifyMessage(reply.id, 'body', message.created, messages);
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('#updateMessageBody', function() {

        /**
         * Verifies that the parameters of the `updateMessageBody` function get validated.
         */
        it('verify parameter validation', function(callback) {
            var messageBoxId = 'msg-box-test-' + Math.random();
            MessageBoxAPI.updateMessageBody(null, Date.now() - 1000, 'newBody', function(err) {
                assert.equal(err.code, 400);

                // Created timestamp
                MessageBoxAPI.updateMessageBody(messageBoxId, null, 'newBody', function(err) {
                    assert.equal(err.code, 400);
                    MessageBoxAPI.updateMessageBody(messageBoxId, 'Not a timestamp', 'newBody', function(err) {
                        assert.equal(err.code, 400);
                        MessageBoxAPI.updateMessageBody(messageBoxId, Date.now() + 1000, 'newBody', function(err) {
                            assert.equal(err.code, 400);

                            // The body
                            MessageBoxAPI.updateMessageBody(messageBoxId, Date.now() - 1000, null, function(err) {
                                assert.equal(err.code, 400);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * A test that updates a message.
         */
        it('verify updating a message', function(callback) {
            var messageBoxId = 'msg-box-test-' + Math.random();
            MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'alfa', {}, function(err, message) {
                assert.ok(!err);
                assert.ok(message);
                // Sanity check
                MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, null, function(err, messages) {
                    assert.ok(!err);
                    verifyMessage(message.id, 'alfa', null, messages);

                    // Update the message.
                    MessageBoxAPI.updateMessageBody(messageBoxId, message.created, 'beta', function(err) {
                        assert.ok(!err);
                        MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, null, function(err, messages) {
                            assert.ok(!err);
                            // There should still only be 1 message.
                            assert.equal(messages.length, 1);
                            // Verify the body has changed.
                            verifyMessage(message.id, 'beta', null, messages);
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('#getMessagesFromMessageBox', function() {

        /**
         * Simple parameter validation test case.
         */
        it('verify parameter validation', function(callback) {
            var messageBoxId = 'msg-box-test-' + Math.random();

            // No messageboxId should result in a 400
            MessageBoxAPI.getMessagesFromMessageBox(null, null, null, null, function(err, messages) {
                assert.equal(err.code, 400);
                assert.ok(!messages);
                callback();
            });
        });

        /**
         * Simple test that creates a couple of messages and then retrieves them.
         */
        it('verify retrieving messages', function(callback) {
            var messageBoxId = 'msg-box-test-' + Math.random();
            // If there are no messages in a box, `getMessagesFromMessageBox` should return an empty array.
            MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, null, function(err, messages) {
                assert.ok(!err);
                assert.equal(messages.length, 0);

                // Create some messages and verify they end up in the box.
                MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'alfa', {}, function(err, message1) {
                    assert.ok(!err);
                    assert.ok(message1);
                    MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'alfa', {}, function(err, message2) {
                        assert.ok(!err);
                        assert.ok(message2);
                        MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, null, function(err, messages) {
                            assert.ok(!err);
                            verifyMessage(message1.id, 'alfa', null, messages);
                            verifyMessage(message2.id, 'alfa', null, messages);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Verifies that the optional `scrubDeleted` parameter actually scrubs 'soft' deleted messages.
         */
        it('verify deleted messages can be scrubbed', function(callback) {
            var messageBoxId = 'msg-box-test-' + Math.random();

            // Create three messages and delete the middle one.
            MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'alfa', {}, function(err, message1) {
                assert.ok(!err);
                assert.ok(message1);
                MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'beta', {}, function(err, message2) {
                    assert.ok(!err);
                    assert.ok(message2);
                    MessageBoxAPI.createMessage(messageBoxId, 'u:camtest:foo', 'charly', {}, function(err, message3) {
                        assert.ok(!err);
                        assert.ok(message3);
                        // Sanity check that the three messages are there
                        MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, null, function(err, messages) {
                            assert.ok(!err);
                            verifyMessage(message1.id, 'alfa', null, messages);
                            verifyMessage(message2.id, 'beta', null, messages);
                            verifyMessage(message3.id, 'charly', null, messages);

                            // Soft delete message2, this should remove the body
                            MessageBoxAPI.deleteMessage(messageBoxId, message2.created, {'deleteType': 'soft'}, function(err) {
                                assert.ok(!err);

                                MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, {'scrubDeleted': true}, function(err, messages) {
                                    assert.ok(!err);

                                    // deletedMessage's body should be null and it's deleted flag should be set to true.
                                    var deletedMessage = _.find(messages, function(message) { return message.id === message2.id; });
                                    assert.ok(deletedMessage.deleted);
                                    assert.ok(!deletedMessage.body);

                                    // The other messages should still be there though.
                                    verifyMessage(message1.id, 'alfa', null, messages);
                                    verifyMessage(message3.id, 'charly', null, messages);

                                    // Sanity check that using no scrubDeleted flag returns the message.
                                    MessageBoxAPI.getMessagesFromMessageBox(messageBoxId, null, null, {'scrubDeleted': false}, function(err, messages) {
                                        assert.ok(!err);

                                        verifyMessage(message1.id, 'alfa', null, messages);
                                        verifyMessage(message2.id, 'beta', null, messages);
                                        verifyMessage(message3.id, 'charly', null, messages);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

});