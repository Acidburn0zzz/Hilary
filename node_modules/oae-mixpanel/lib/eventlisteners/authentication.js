/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var AuthzUtil = require('oae-authz/lib/util');

var MixpanelUtil = require('oae-mixpanel/lib/util');

module.exports = function(client) {

    /*!
     * A user logs into the system
     */
    MixpanelUtil.listen(AuthenticationAPI, AuthenticationConstants.events.USER_LOGGED_IN, function(user, strategyId) {
        // The value in strategyId is of the form `tenantAlias-authenticationStrategy`,
        // we're only interested in the authentication strategy
        var strategy = strategyId.split('-')[1];

        // Get the tenant alias from the user id
        var tenantAlias = AuthzUtil.getPrincipalFromId(user.id).tenantAlias;
        var params = {
            'distinct_id': user.id,
            'tenant': tenantAlias,
            'strategy': strategy
        };
        client.track(AuthenticationConstants.events.USER_LOGGED_IN, params);

        client.people.increment(params.distinct_id, AuthenticationConstants.events.USER_LOGGED_IN);
    });

    /*!
     * A user logs out of the system
     */
    MixpanelUtil.listen(AuthenticationAPI, AuthenticationConstants.events.USER_LOGGED_OUT, function(user) {
        // Get the tenant alias from the user id
        var tenantAlias = AuthzUtil.getPrincipalFromId(user.id).tenantAlias;
        var params = {
            'distinct_id': user.id,
            'tenant': tenantAlias
        };
        client.track(AuthenticationConstants.events.USER_LOGGED_OUT, params);

        client.people.increment(params.distinct_id, AuthenticationConstants.events.USER_LOGGED_OUT);
    });

    /*!
     * A user imposters another user
     */
    MixpanelUtil.listen(AuthenticationAPI, AuthenticationConstants.events.USER_IMPOSTERED, function(imposter, user) {
        // Get the tenant alias from the user id
        var tenantAlias = AuthzUtil.getPrincipalFromId(imposter.id).tenantAlias;
        var params = {
            'distinct_id': imposter.id,
            'impostered': user.id,
            'tenant': tenantAlias
        };
        client.track(AuthenticationConstants.events.USER_IMPOSTERED, params);

        client.people.increment(params.distinct_id, AuthenticationConstants.events.USER_IMPOSTERED);
    });
};
