/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var ContentAPI = require('oae-content');
var ContentConstants = require('oae-content/lib/constants').ContentConstants;

var MixpanelUtil = require('oae-mixpanel/lib/util');

module.exports = function(client) {

    /*!
     * Retrieving a piece of content
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.RETRIEVED_CONTENT_PROFILE, function(ctx, content) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.visibility = content.visibility;
        params.previewStatus = content.previews.status;
        if (content.resourceSubType === 'file') {
            params.filesize = content.size;
            params.fileType = content.mime;
        }
        client.track(ContentConstants.events.RETRIEVED_CONTENT_PROFILE, params);
        client.people.increment(params.distinct_id, ContentConstants.events.RETRIEVED_CONTENT_PROFILE);
    });

    /*!
     * Creating content
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.CREATED_CONTENT, function(ctx, content, revision, members, folderIds) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.visibility = content.visibility;
        params.nrOfMembers = _.values(members).length;
        params.nrOfFolders = _.values(folderIds).length;
        params.previewStatus = content.previews.status;
        if (content.resourceSubType === 'file') {
            params.filesize = content.size;
            params.fileType = content.mime;
        }
        client.track(ContentConstants.events.CREATED_CONTENT, params);
        client.people.increment(params.distinct_id, ContentConstants.events.CREATED_CONTENT);
    });

    /*!
     * Updating content
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.UPDATED_CONTENT, function(ctx, newContent, oldContent) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = newContent.id;
        params.resourceSubType = newContent.resourceSubType;
        params.newVisibility = newContent.visibility;
        params.oldVisibility = oldContent.oldVisibility;
        params.previewStatus = oldContent.previews.status;
        client.track(ContentConstants.events.UPDATED_CONTENT, params);
        client.people.increment(params.distinct_id, ContentConstants.events.UPDATED_CONTENT);
    });

    /*!
     * Upload a new file body
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.UPDATED_CONTENT_BODY, function(ctx, newContent, oldContent, revision) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = newContent.id;
        params.resourceSubType = newContent.resourceSubType;
        params.newVisibility = newContent.visibility;
        params.previewStatus = newContent.previews.status;
        params.filesize = newContent.size;
        params.fileType = newContent.mime;
        client.track(ContentConstants.events.UPDATED_CONTENT_BODY, params);
        client.people.increment(params.distinct_id, ContentConstants.events.UPDATED_CONTENT_BODY);
    });

    /*!
     * Editing a collaborative document
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.EDITED_COLLABDOC, function(ctx, content) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.newVisibility = content.visibility;
        params.previewStatus = content.previews.status;
        client.track(ContentConstants.events.EDITED_COLLABDOC, params);
        client.people.increment(params.distinct_id, ContentConstants.events.EDITED_COLLABDOC);
    });

    /*!
     * Restoring a revision
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.RESTORED_REVISION, function(ctx, newContent, oldContent, revision) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = newContent.id;
        params.resourceSubType = newContent.resourceSubType;
        params.visibility = newContent.visibility;
        params.previewStatus = newContent.previews.status;
        client.track(ContentConstants.events.RESTORED_REVISION, params);
        client.people.increment(params.distinct_id, ContentConstants.events.RESTORED_REVISION);
    });

    /*!
     * Sharing content / Updating members
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.UPDATED_CONTENT_MEMBERS, function(ctx, content, permissionChanges, newMemberIds, updatedMemberIds, removedMemberIds) {
        newMemberIds = newMemberIds || [];
        updatedMemberIds = updatedMemberIds || [];
        removedMemberIds = removedMemberIds || [];

        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.visibility = content.visibility;
        params.previewStatus = content.previews.status;
        params.newMembers = newMemberIds.length;
        params.updatedMembers = updatedMemberIds.length;
        params.removedMembers = removedMemberIds.length;
        client.track(ContentConstants.events.UPDATED_CONTENT_MEMBERS, params);
        client.people.increment(params.distinct_id, ContentConstants.events.UPDATED_CONTENT_MEMBERS);
    });

    /*!
     * Deleting content
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.DELETED_CONTENT, function(ctx, content) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.visibility = content.visibility;
        params.previewStatus = content.previews.status;
        client.track(ContentConstants.events.DELETED_CONTENT, params);
        client.people.increment(params.distinct_id, ContentConstants.events.DELETED_CONTENT);
    });

    /*!
     * The previews were stored for an item
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.UPDATED_CONTENT_PREVIEW, function(content) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.visibility = content.visibility;
        params.previewStatus = content.previews.status;
        client.track(ContentConstants.events.UPDATED_CONTENT_PREVIEW, params);
    });

    /*!
     * Creating a comment
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.CREATED_COMMENT, function(ctx, message, content) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.visibility = content.visibility;
        params.messageLength = message.body.length;
        params.isReply = _.isString(message.replyTo);
        client.track(ContentConstants.events.CREATED_COMMENT, params);
        client.people.increment(params.distinct_id, ContentConstants.events.CREATED_COMMENT);
    });

    /*!
     * Deleting a comment
     */
    MixpanelUtil.listen(ContentAPI, ContentConstants.events.DELETED_COMMENT, function(ctx, message, content, deleteType) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = content.id;
        params.resourceSubType = content.resourceSubType;
        params.visibility = content.visibility;
        params.deleteType = content.deleteType;
        params.isReply = _.isString(message.replyTo);
        client.track(ContentConstants.events.DELETED_COMMENT, params);
        client.people.increment(params.distinct_id, ContentConstants.events.DELETED_COMMENT);
    });
};
