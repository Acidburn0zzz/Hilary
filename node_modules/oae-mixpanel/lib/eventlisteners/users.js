/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var PrincipalsAPI = require('oae-principals');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;

var MixpanelUtil = require('oae-mixpanel/lib/util');

module.exports = function(client) {

    /*!
     * Retrieving a user
     */
    MixpanelUtil.listen(PrincipalsAPI, PrincipalsConstants.events.RETRIEVED_USER_PROFILE, function(ctx, user) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = user.id;
        params.visibility = user.visibility;
        client.track(PrincipalsConstants.events.RETRIEVED_USER_PROFILE, params);
        client.people.increment(params.distinct_id, PrincipalsConstants.events.RETRIEVED_USER_PROFILE);
    });

    /*!
     * Creating a user
     */
    MixpanelUtil.listen(PrincipalsAPI, PrincipalsConstants.events.CREATED_USER, function(ctx, user) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = user.id;
        params.visibility = user.visibility;
        client.track(PrincipalsConstants.events.CREATED_GROUP, params);
        client.people.set(user.id, {
            '$created': new Date().toISOString()
        });
    });

    /*!
     * Updating a user
     */
    MixpanelUtil.listen(PrincipalsAPI, PrincipalsConstants.events.UPDATED_USER, function(ctx, newUser, oldUser) {
        var params = MixpanelUtil.getBasicParameters(ctx);
        params.id = newUser.id;
        params.newVisibility = newUser.visibility;
        params.oldVisibility = oldUser.oldVisibility;
        client.track(PrincipalsConstants.events.UPDATED_USER, params);
        client.people.increment(params.distinct_id, PrincipalsConstants.events.UPDATED_USER);
    });
};
