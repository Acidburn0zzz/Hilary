/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var exec = require('child_process').exec;
var fs = require('fs');
var Path = require('path');
var util = require('util');

var log = require('oae-logger').logger('oae-preview-processor');

var PreviewPDF = require('./api.pdf.js');

var _sofficeBinary = 'soffice.bin';
var _timeout = 120000;

/**
 * Inits the Office parser.
 * This method will check if the Libre Office binary can be executed.
 *
 * @param  {Object} config                                   The main config object.
 * @param  {Object} config.previews                          The namespace for all preview related configuration.
 * @param  {Object} config.previews.binaries                 The namespace for all binaries associated with preview processing.
 * @param  {String} config.previews.binaries.sofficeBinary   The path to the Libre Office executable. This should either be a direct path or the filename that's on the `PATH` environment.
 */
var init = module.exports.init = function(config, callback) {
    if (config && config.previews && config.previews.office) {
        if (config.previews.office.binary) {
            _sofficeBinary = config.previews.office.binary;
        }
        if (config.previews.office.timeout) {
            _timeout = config.previews.office.timeout;
        }
    }

    // Try to execute `soffice.bin --help`.
    var cmd = util.format('%s --help', _sofficeBinary);
    log().trace('Executing %s to verify if the path to the office binary is correct.');
    exec(cmd, { 'timeout': 10000 }, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err, 'stdout': stdout, 'stderr': stderr}, 'Could not properly execute the office binary.');
            return callback({'code': 500, 'msg': 'The path for the office binary is misconfigured'});
        }
        callback();
    });
};

/**
 * Generates previews for an office file.
 * This method will download the file, convert it to PDF and then hand it over to the PDF api.
 *
 * @param {PreviewContext}      ctx             The preview context associated to this file.
 * @param {Function}            callback        Standard callback method.
 * @param {Object}              callback.err    Standard error object (if any.)
 */
var generatePreviews = module.exports.generatePreviews = function(ctx, callback) {
    log().trace('%s - Processing as office file.', ctx.contentId);

    // Download the file.
    ctx.download(function(err, path) {
        if (err) {
            return callback(err);
        }

        // Convert it to PDF.
        _convertToPdf(ctx, path, function(err, path) {
            if (err) {
                return callback(err);
            }

            // Let the PDF API handle the actual splitting.
            PreviewPDF.previewPDF(ctx, path, callback);
        });
    });
};

/**
 * Convert an Office document to PDF.
 *
 * @param  {PreviewContext}     ctx             The preview context associated to this file.
 * @param  {String}             path            The path to the file that needs to be converted to a PDF.
 * @param  {Function}           callback        Standard callback method.
 * @param  {Object}             callback.err    Standard error object (if any.)
 * @api private
 */
var _convertToPdf = function(ctx, path, callback) {
    var cmd = util.format('%s --headless --invisible --nologo --nolockcheck --convert-to pdf "%s" --outdir "%s"', _sofficeBinary, path, ctx.dirs.base);
    // Execute the command.
    log().trace('%s - executing %s', ctx.contentId, cmd);
    exec(cmd, { 'timeout': _timeout }, function (err, stdout, stderr) {
        if (err) {
            log().error({'err': err}, '%s - Could not convert the file to PDF: %s - %s', ctx.contentId, stdout, stderr);
            return callback({'code': 500, 'msg': 'Could not convert the file to PDF.'});
        }

        var filename = Path.basename(path);
        var pdfFilename = filename.substr(0, filename.lastIndexOf('.')) + '.pdf';
        var pdfPath = ctx.dirs.base + '/' + pdfFilename;

        // Sometimes office does not convert the file but returns no errorcode
        // or any other of indication that the process failed.
        // To ensure that the PDF was actually generated, we check if it exists.
        fs.exists(pdfPath, function(exists) {
            if (!exists) {
                log().error('%s - Could not convert the file to PDF. Office failed silently', ctx.contentId);
                return callback({'code': 500, 'msg': 'Unable to convert the office file to pdf. Office failed silently.'});
            }

            callback(null, pdfPath);
        });
    });
};
