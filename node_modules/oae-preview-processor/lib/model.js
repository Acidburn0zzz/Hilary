/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var Path = require('path');
var shell = require('shelljs');

var log = require('oae-logger').logger('oae-preview-processor');
var IO = require('oae-util/lib/io');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;

// A hash of RestContexts keyed by tenant alias.
// This will be lazy loaded as the preview requests come in.
var tenantContexts = {};

var extensionRegex = /^[a-zA-Z]+$/;

var PreviewContext = module.exports.PreviewContext = function(config, contentId) {
    var globalRestContext = new RestContext('http://' + config.servers.globalAdminHost, config.previews.credentials.username, config.previews.credentials.password, config.servers.globalAdminHost);

    var _thumbnailPath = null;
    var _previews = [];

    var that = {};
    that.contentId = contentId;

    // Should be filled in by the caller.
    that.content = {};

    that.tenantRestContext = null; // Will be filled in by the login method.

    // Some file systems don't like : in filenames.
    var safeContentId = contentId.replace(/:/g, '-');
    var baseDir = config.previews.dir + '/' + safeContentId;
    // A set of directories that can be used to store intermediate files in.
    that.dirs = {
        // The base directory for anything related to this piece of content.
        // When all the processing is done, this should contain a file called 'thumbnail.png' which can be used as
        // the piece of content's thumbnail image.
        'base': baseDir,

        // The directory where any preview images that will be uploaded, can be stored in.
        'previews': baseDir + '/previews'
    };

    // Create the actual directory.
    shell.mkdir('-p', that.dirs.previews);

    /**
     * Removes the directory where all images should be stored in.
     */
    that.cleanup = function() {
        log().trace('%s - Removing %s', that.contentId, that.dirs.base);
        shell.rm('-rf', that.dirs.base);
    };

    /**
     * Logs into the the tenant where this piece of content resides. If we already have a running
     * session for this tenant, it will be re-used.
     *
     * @param {Function}    callback        Standard callback method
     * @param {Object}      callback.err    Standard error object (if any)
     */
    that.login = function(callback) {
        var tenantAlias = that.contentId.split(':')[1];
        log().trace('%s - Logging into %s', contentId, tenantAlias);
        if (tenantContexts[tenantAlias]) {
            // We already logged into this tenant, re-use that RestContext.
            that.tenantRestContext = tenantContexts[tenantAlias];
            callback();
        } else {
            // We've not dealt with this tenant before.
            // Log in via signed auth, and get a new RestContext.
            RestAPI.Authentication.loginOnTenant(globalRestContext, tenantAlias, function(err, restContext) {
                if (err) {
                    log().error({'err': err}, 'We could not log in on the the tenant. The status of the content item will not be set.');
                    return callback(err);
                }
                // Use this context
                that.tenantRestContext = restContext;

                // Remember it for subsequent preview requests.
                tenantContexts[tenantAlias] = restContext;

                callback();
            });
        }
    };

    /**
     * Downloads a file content to disk.
     * A temporary file will be created. It will only be removed on errors.
     *
     * @param {Function}    callback        Called when the file has been downloaded
     * @param {Object}      callback.err    Standard error object (if any)
     * @param {String}      callback.path   The path on disk where the file has been downloaded to.
     */
    that.download = function(callback) {
        // For security reasons we will *NOT*use the actual filename
        // as this path could end up in commands that need to be executed.
        // We will tack on the extension if-and-only-if that extension only exists out of a-zA-Z characters.
        var extension = 'unknown';
        var name = that.content.filename;
        if (name.lastIndexOf('.') !== -1) {
            var ext = name.substr(name.lastIndexOf('.') + 1);
            if (ext !== '' && extensionRegex.test(ext)) {
                extension = ext;
            }
        }

        var path = that.dirs.base + '/' + safeContentId + '.' + extension;
        log().trace('%s - Downloading %s to %s', contentId, that.content.filename, path);

        RestAPI.Content.download(that.tenantRestContext, contentId, null, path, function(err) {
            if (err) {
                log().error({'err': err}, '%s - Error trying to download the file.', contentId);
                fs.unlink(path, function(unlinkErr) {
                    if (unlinkErr) {
                        log().error({'err': unlinkErr}, 'Could not remove the downloaded file on download error.');
                    }
                    callback(err);
                });
                return;
            } else {
                callback(null, path);
            }
        });
    };

    /**
     * Sets the path to the thumbnail image.
     *
     * @param {String} path The path where the thumbnail image is located.
     */
    that.setThumbnail = function(path) {
        _thumbnailPath = path;
    };

    /**
     * Adds a preview image.
     *
     * @param {String} path The path where a preview image is located.
     * @param {String} size The size of this file. One of 'small', 'medium', 'large' or 'thumbnail'.
     */
    that.addPreview = function(path, size) {
        _previews.push({'path': path, 'size': size});
    };

    /**
     * @return  {Object[]}  An array of preview objects. Each object has a 'path' key that specifies where the preview is stored and a 'size' key that specifies which type of preview this is.
     */
    that.getPreviews = function() {
        return _previews;
    };

    /**
     * @return  {String}    The path to the thumbnail.
     */
    that.getThumbnail = function() {
        return _thumbnailPath;
    }

    /**
     * Saves the preview and thumbnail images.
     * This will also set the preview status to 'done'.
     *
     * @param {Function}    callback        Standard callback method
     * @param {Object}      callback.err    Standard error object (if any.)
     */
    that.savePreviews = function(callback) {
        log().trace('%s - Saving previews', contentId);
        var files = {};
        var sizes = {};
        // The thumbnail (if any)
        if (_thumbnailPath) {
            files['thumbnail.png'] = function() { return fs.createReadStream(_thumbnailPath); }
            sizes['thumbnail.png'] = 'thumbnail';
        }

        // The preview images.
        _previews.forEach(function(preview) {
            var filename = Path.basename(preview.path);
            files[filename] = function() { return fs.createReadStream(preview.path); },
            sizes[filename] = preview.size;
        });

        RestAPI.Content.addPreviewItems(that.tenantRestContext, contentId, 'done', files, sizes, {}, callback);
    };

    /**
     * Sets the processing status on the piece of content.
     *
     * @param {String}   status   The status that should be set. One of ContentConstants.previews .
     * @param {Function} callback Standard callback method.
     */
    that.setStatus = function(status, callback) {
        log().trace('%s - Setting status to %s', contentId, status);
        RestAPI.Content.addPreviewItems(that.tenantRestContext, contentId, status, {}, {}, {}, callback);
    };

    return that;
};
