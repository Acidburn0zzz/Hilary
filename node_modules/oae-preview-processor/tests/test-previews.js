/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var ShortId = require('shortid');

var PreviewAPI = require('oae-preview-processor/lib/api');
var PreviewContext = require('oae-preview-processor/lib/model').PreviewContext;
var PreviewImages = require('oae-preview-processor/lib/api.images');
var PreviewOffice = require('oae-preview-processor/lib/api.office');
var PreviewPDF = require('oae-preview-processor/lib/api.pdf');
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests/lib/util');

describe('Preview processor', function() {

    var config = require('../../../config').config;

    // Rest contexts that can be used every time we need to make a request as a tenant admin
    var signedAdminRestContext = null;

    before(function(callback) {
        signedAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.localhost.host);

        // Log in the admin so his cookie jar is set up appropriately
        RestAPI.User.getMe(signedAdminRestContext, function(err, meObj) {
            assert.ok(!err);
            callback();
        });

    });

    var getImageStream = function() {
        return fs.createReadStream(__dirname + '/data/image.png');
    };

    var getOfficeStream = function() {
        return fs.createReadStream(__dirname + '/data/word.docx');
    };

    var getPDFStream = function() {
        return fs.createReadStream(__dirname + '/data/pdf.pdf');
    };

    describe('Processor registration', function() {

        it('verify that processors can be unregistered', function() {
            // Register 2 processors for the same content type/mimetype.
            PreviewAPI.registerProcessor('verify-unregister-20', 'verify-unregister-contentType', ['text/plain'], 20, function() { return 20; });
            PreviewAPI.registerProcessor('verify-unregister-30', 'verify-unregister-contentType', ['text/plain'], 30, function() { return 30; });

            // Our processor '30' should be the first
            var proc = PreviewAPI.getProcessor('verify-unregister-contentType', 'text/plain');
            assert.ok(proc);
            assert.equal(proc(), 30);

            // When we remove processor '30', processor '20' should now be the top one.
            PreviewAPI.unregisterProcessor('verify-unregister-30');
            proc = PreviewAPI.getProcessor('verify-unregister-contentType', 'text/plain');
            assert.ok(proc);
            assert.equal(proc(), 20);

            // When we remove processor '20', null should be returned
            PreviewAPI.unregisterProcessor('verify-unregister-20');
            proc = PreviewAPI.getProcessor('verify-unregister-contentType', 'text/plain')
            assert.equal(proc, null);
        });

        it('verify mimetypes are optional', function() {
            PreviewAPI.registerProcessor('verify-no-mimetype', 'verify-no-mimetype-contentType', null, 20, function() { return 20; });
            var proc = PreviewAPI.getProcessor('verify-no-mimetype-contentType');
            assert.ok(proc);
            assert.equal(proc(), 20);
        });

        /**
         * Tries to register a processor with the provided parameters.
         * It expects a failure.
         */
        var registerProcessor = function(id, contentType, mimeType, ranking, processor) {
            assert.throws(function() {
                PreviewAPI.registerProcessor(id, contentType, mimeType, ranking, processor);
            }, Error, 'Registering a processor with missing parameters should throw an error');
        };

        it('verify parameter validation', function() {
            registerProcessor(null, 'verify-param-validation-contentType', ['text/plain'], 20, function() { return 20; });
            registerProcessor('verify-param-validation', null, ['text/plain'], 20, function() { return 20; });
            registerProcessor('verify-param-validation', 'verify-param-validation-contentType', ['text/plain'], null, function() { return 20; });
            registerProcessor('verify-param-validation', 'verify-param-validation-contentType', ['text/plain'], 'non numeric', function() { return 20; });
            registerProcessor('verify-param-validation', 'verify-param-validation-contentType', ['text/plain'], 20, null);

            assert.throws(function() {
                PreviewAPI.unregisterProcessor(null);
            }, Error, 'Trying to unregistering without a processor ID should fail.');
        });
    });

    describe('#setStatus', function() {
        /**
         * Verifies that the setStatus method of the PreviewContext works as expected.
         */
        it('verify that the content item gets updated', function(callback) {
            // Create a piece of content as a regular user
            TestsUtil.generateTestUsers(signedAdminRestContext, 1, function(err, response) {
                assert.ok(!err);
                var restCtx = _.values(response)[0].restContext;
                RestAPI.Content.createFile(restCtx, 'Test Content 1', 'Test content description 1', 'private', getImageStream,  [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.equal(contentObj.previewStatus, 'pending');

                    // Now try setting the preview status to error.
                    var previewContext = new PreviewContext(config, contentObj.contentId);
                    previewContext.login(function(err) {
                        assert.ok(!err);

                        previewContext.setStatus('error', function(err) {
                            assert.ok(!err);

                            RestAPI.Content.getContent(restCtx, contentObj.contentId, function(err, updatedContent) {
                                assert.ok(!err);
                                assert.equal(updatedContent.previewStatus, 'error');
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#savePreviews', function() {

        it('verify that previews can be added', function(callback) {
            // Create a piece of content as a regular user
            TestsUtil.generateTestUsers(signedAdminRestContext, 1, function(err, response) {
                assert.ok(!err);
                var restCtx = _.values(response)[0].restContext;
                RestAPI.Content.createFile(restCtx, 'Test Content 1', 'Test content description 1', 'private', getImageStream,  [], [], function(err, contentObj) {
                    assert.ok(!err);
                    assert.equal(contentObj.previewStatus, 'pending');

                    // Now try setting the preview status to error.
                    var previewContext = new PreviewContext(config, contentObj.contentId);
                    previewContext.login(function(err) {
                        assert.ok(!err);

                        // Fake a preview and thumbnail.
                        previewContext.addPreview(__dirname + '/data/image.png', 'medium');
                        previewContext.setThumbnail(__dirname + '/data/image.png');

                        previewContext.savePreviews(function(err) {
                            assert.ok(!err);

                            // Ensure they were stored.
                            RestAPI.Content.getPreviewItems(restCtx, contentObj.contentId, function(err, previews, response) {
                                assert.ok(!err);
                                assert.equal(previews.files.length, 1);

                                // Ensure there is a thumbnail.
                                RestAPI.Content.getContent(restCtx, contentObj.contentId, function(err, updatedContent) {
                                    assert.ok(!err);
                                    assert.ok(updatedContent.thumbnailUrl);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    // The following set of tests require that the preview processor has been configured fully.
    // We only run the tests if the PP is enabled. (By default, it's not)
    if (config.previews.enabled) {
        describe('Preview generation', function() {

            var ctx = null;

            before(function(callback) {
                PreviewAPI.init(config, callback);
            });

            /**
             * Clean up after each test.
             */
            afterEach(function() {
                ctx.cleanup();
            });

            var getPreviewContext = function(path) {
                var contentId = 'c:foo:' + ShortId.generate();
                var ctx = new PreviewContext(config, contentId);

                // Mock the download method.
                ctx.download = function(callback) {
                    callback(null, path);
                };
                return ctx;
            };

            /**
             * Verifies the image processor.
             */
            it('verify image processing works', function(callback) {
                ctx = getPreviewContext(__dirname + '/data/image.png');

                PreviewImages.generatePreviews(ctx, function(err) {
                    assert.ok(!err);

                    // Verify it generates 2 previews and 1 thumbnail.
                    var previews = ctx.getPreviews();
                    assert.equal(previews.length, 2);
                    assert.notEqual(ctx.getThumbnail(), null);

                    callback();
                });
            });

            /**
             * Verifies the office processor.
             */
            it('verify office processing works', function(callback) {
                ctx = getPreviewContext(__dirname + '/data/word.docx');

                PreviewOffice.generatePreviews(ctx, function(err) {
                    assert.ok(!err);

                    // Verify it generates 6 previews and 1 thumbnail.
                    var previews = ctx.getPreviews();
                    assert.equal(previews.length, 6);
                    assert.notEqual(ctx.getThumbnail(), null);

                    callback();
                });
            });

            /**
             * Verifies the PDF processor.
             */
            it('verify pdf processing works', function(callback) {
                ctx = getPreviewContext(__dirname + '/data/pdf.pdf');

                PreviewPDF.generatePreviews(ctx, function(err) {
                    assert.ok(!err);

                    // Verify it generates 2 previews and 1 thumbnail.
                    var previews = ctx.getPreviews();
                    assert.equal(previews.length, 3);
                    assert.notEqual(ctx.getThumbnail(), null);

                    callback();
                });
            });
        });
    }
});
