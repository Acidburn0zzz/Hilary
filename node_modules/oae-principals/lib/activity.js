/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityObject = require('oae-activity/lib/model').ActivityObject;
var AuthzAPI = require('oae-authz');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

ActivityAPI.registerActivityObjectProducer(ActivityConstants.activityTypes.ALL, 'user', function(activityType, entityType, resource, callback) {
    // TODO: don't sudo, use internal methods
    PrincipalsAPI.getUser(adminCtx(), resource.resourceId, function(err, user) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(user.tenant, function(err, userTenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + userTenant.host;
            var globalId = httpHost + '/api/user/' + user.id;
            var profileUrl = httpHost + '/~' + user.id;
            var isPrivate = (!user.visibility || user.visibility === 'private');

            var opts = {};
            opts.displayName = (isPrivate) ? user.publicAlias : user.displayname;
            opts.url = (isPrivate) ? undefined : profileUrl;
            opts.image = (isPrivate) ? undefined : {
                'internalUri': 'local://2012/11/28/17/image/to/come.png',
                'width': 35,
                'height': 35
            };

            opts.ext = {};
            // since activities always go to authenticated users, and we've scrubbed when the user is private, we can
            // propagate this object to all feeds.
            opts.ext[ActivityConstants.properties.OAE_PROPAGATION] = ActivityConstants.entityPropagation.ALL;
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = user.visibility;

            return callback(null, new ActivityObject('user', globalId, opts));
        });
    });
});

ActivityAPI.registerActivityObjectProducer(ActivityConstants.activityTypes.ALL, 'group', function(activityType, entityType, resource, callback) {
    // TODO: don't sudo, use internal methods
    PrincipalsAPI.getGroup(adminCtx(), resource.resourceId, function(err, group) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(group.tenant, function(err, groupTenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + groupTenant.host;
            var globalId = httpHost + '/api/group/' + group.id;
            var profileUrl = httpHost + '/~' + group.id;
            var isPrivate = (!group.visibility || group.visibility === 'private');
            var isJoinable = (group.joinable && group.joinable !== 'no');

            var opts = {};
            opts.displayName = group.name;
            opts.url = profileUrl;
            opts.image = {
                'internalUri': 'local://2012/11/28/17/image/to/come.png',
                'width': 35,
                'height': 35
            };

            // extension properties
            opts.ext = {};
            // only show this group info in extended feeds if it is public, loggedin, or somehow joinable. otherwise, only distribute
            // in its own routes.
            var propagation = (!isPrivate || isJoinable) ? ActivityConstants.entityPropagation.ALL : ActivityConstants.entityPropagation.OWN;
            opts.ext[ActivityConstants.properties.OAE_PROPAGATION] = propagation;
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = group.visibility;

            return callback(null, new ActivityObject('group', globalId, opts));
        });
    });
});

ActivityAPI.registerActivityRouter(ActivityConstants.activityTypes.ALL, 'user', function(activityType, entityType, userActivityObject, callback) {
    // we don't route activities to any private user networks
    var visibility = userActivityObject[ActivityConstants.properties.OAE_VISIBILITY];
    if (!visibility || visibility === 'private') {
        return callback(null, []);
    }

    var userId = userActivityObject[ActivityConstants.properties.OAE_ID];
    AuthzAPI.getRolesForPrincipalsAndResourceType([userId], 'g', 10000, function(err, directRoles) {
        if (err) {
            return callback(err);
        }

        var memberships = _.keys(directRoles);
        _getAllMembers(memberships.slice(0), function(err, members) {
            if (err) {
                return callback(err);
            }

            // user routes activities to all their member groups and their members
            return callback(null, _.uniq(_.union(memberships, members)));
        });
    });
});

ActivityAPI.registerActivityRouter(ActivityConstants.activityTypes.ALL, 'group', function(activityType, entityType, groupActivityObject, callback) {
    // deliver to the group's members
    _getAllMembers([groupActivityObject[ActivityConstants.properties.OAE_ID]], callback);
});

var _getAllMembers = function(groupIds, callback, currentMembers) {
    currentMembers = currentMembers || {};
    if (groupIds.length === 0) {
        return callback(null, _.keys(currentMembers));
    }

    var groupId = groupIds.shift();
    AuthzAPI.getAuthzMembers(groupId, null, 10000, function(err, members) {
        if (err) {
            return callback(err);
        }

        for (var i = 0; i < members.length; i++) {
            currentMembers[members[i].id] = true;
        }

        return _getAllMembers(groupIds, callback, currentMembers);
    });
};

var adminCtx = function() {
    return new Context(new Tenant('admin', 'admin', 'adminhost', true), new User('global', 'admin', 'admin', { isGlobalAdmin: true }));
}
