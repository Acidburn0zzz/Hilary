/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var ActivityObject = require('oae-activity/lib/model').ActivityObject;
var ActivityUtil = require('oae-activity/lib/util');
var AuthzAPI = require('oae-authz');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');
var PrincipalsDAO = require('./internal/dao');
var Tenant = require('oae-tenants/lib/model').Tenant;
var TenantsAPI = require('oae-tenants');
var User = require('oae-principals/lib/model').User;

ActivityAPI.registerActivityObjectProducer('user', function(activityType, entityType, resource, callback) {
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, user) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(user.tenant, function(err, userTenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + userTenant.host;
            var globalId = httpHost + '/api/user/' + user.id;
            var profileUrl = httpHost + '/~' + user.id;
            var isPrivate = (!user.visibility || user.visibility === 'private');

            var opts = {};
            opts.displayName = (isPrivate) ? user.publicAlias : user.displayname;
            opts.url = (isPrivate) ? undefined : profileUrl;
            opts.image = (isPrivate) ? undefined : {
                'internalUri': 'local://2012/11/28/17/image/to/come.png',
                'width': 35,
                'height': 35
            };

            opts.ext = {};
            // since activities always go to authenticated users, and we've scrubbed when the user is private, we can
            // propagate this object to all feeds.
            opts.ext[ActivityConstants.properties.OAE_PROPAGATION] = ActivityConstants.entityPropagation.ALL;
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = user.visibility;

            return callback(null, new ActivityObject('user', globalId, opts));
        });
    });
});

ActivityAPI.registerActivityObjectProducer('group', function(activityType, entityType, resource, callback) {
    PrincipalsDAO.getPrincipal(resource.resourceId, function(err, group) {
        if (err) {
            return callback(err);
        }

        TenantsAPI.getTenantByAlias(group.tenant, function(err, groupTenant) {
            if (err) {
                return callback(err);
            }

            var httpHost = 'http://' + groupTenant.host;
            var globalId = httpHost + '/api/group/' + group.id;
            var profileUrl = httpHost + '/~' + group.id;
            var isPrivate = (!group.visibility || group.visibility === 'private');
            var isJoinable = (group.joinable && group.joinable !== 'no');

            var opts = {};
            opts.displayName = group.name;
            opts.url = profileUrl;
            opts.image = {
                'internalUri': 'local://2012/11/28/17/image/to/come.png',
                'width': 35,
                'height': 35
            };

            // Extension properties
            opts.ext = {};
            // Only show this group info in extended feeds if it is public, loggedin, or somehow joinable. otherwise, only distribute in its own routes.
            var propagation = (!isPrivate || isJoinable) ? ActivityConstants.entityPropagation.ALL : ActivityConstants.entityPropagation.OWN;
            opts.ext[ActivityConstants.properties.OAE_PROPAGATION] = propagation;
            opts.ext[ActivityConstants.properties.OAE_VISIBILITY] = group.visibility;

            return callback(null, new ActivityObject('group', globalId, opts));
        });
    });
});

ActivityAPI.registerActivityRouter('group', function(activityType, entityType, groupActivityObject, callback) {
    // Deliver to all the group members, direct or indirect
    ActivityUtil.getAllAuthzMembersByRole(groupActivityObject[ActivityConstants.properties.OAE_ID], function(err, membersByRole) {
        if (err) {
            return callback(err);
        }
        
        var routes = _.uniq(_.flatten(_.values(membersByRole)));
        return callback(null, routes);
    });
});
