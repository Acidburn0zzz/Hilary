/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var Cassandra = require('oae-util/lib/cassandra');
var Validator = require('oae-util/lib/validator').Validator;
var AuthzAPI = require('oae-authz');
var AuthzUtil = require('oae-authz/lib/util');
require('oae-authz/lib/validator');

var PrincipalsUtil = require('./util');
var Visibility = require('./model').VISIBILITY_OPTIONS;
var Joinable = require('./model').JOINABLE_OPTIONS;

var Constants = {

    // role and permission management constants
    PRINCIPAL_TYPE_GROUP: 'g',
    roles: {
        MEMBER: 'member',
        MANAGER: 'manager'
    }
};

/**
 * Get the basic profile for a group.
 *
 * @param  {Context}  context   The current context.
 * @param  {String}   group_id  An identifier for a group. ex: g:cam:oae-team
 * @param  {Function} callback  Standard callback method where the first argument is an error object
 *                              that contains a code suitable as http statuscode and a corresponding message.
 *                              The second argument holds the group information.
 */
var getGroup = module.exports.getGroup = function(context, group_id, callback) {
    if (!PrincipalsUtil.isGroup(group_id)) {
        return callback({'code': 400, 'msg': 'The provided group_id is not a group identifier.'});
    }
    PrincipalsUtil.getPrincipal(context, group_id, callback);
};

/**
 * Get all the members of a group.
 *
 * @param  {Context}                context                 The current execution context.
 * @param  {String}                 group_id                An identifier for a group. ex: g:cam-oae-team
 * @param  {String}                 start                   The principal_id that comes just before the first principal you wish to have in your results.
 * @param  {Number}                 limit                   The number of members you wish to retrieve.
 * @param  {Function(err, members)} callback                Standard callback method that has an array of the direct members of a group.
 */
var getGroupMembers = module.exports.getGroupMembers = function(context, group_id, start, limit, callback) {
    callback = callback || function(err, members) {};
    limit = limit || 100;

    var validator = new Validator();
    validator.check(group_id, {'code': 400,'msg': 'An invalid group id was specified'}).isGroupPrincipal();
    validator.check(limit, {'code': 400, 'msg': 'limit should be a positive integer'}).isInt();
    validator.check(limit, {'code': 400, 'msg': 'limit should be a positive integer'}).min(1);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure that this group exists.
    getGroup(context, group_id, function(err, group) {
        if (err) {
            return callback(err);
        }

        AuthzAPI.getGroupMembers(group_id, start, limit, function(err, members) {
            if (err) {
                return callback(err);
            }

            var principalids = [];
            for (var i = 0; i < members.length;i++) {
                principalids.push(members[i].uuid);
            }

            PrincipalsUtil.getPrincipals(context, principalids, function(err, membersObject, missingMembers) {
                if (err) {
                    return callback(err);
                }

                var memberList = [];
                for (var i = 0, j = members.length; i < j; i++) {
                    if (membersObject[members[i].uuid]) {
                        var res = {
                            'profile': membersObject[members[i].uuid],
                            'role': members[i].role
                        };
                        memberList.push(res);
                    }
                }
                callback(false, memberList);
            });
        });
    });
};

/**
 * Gets all the groups a principal (both user or groups) is a member of. This includes all group ancestors to which the user is indicrectly
 * a member.
 *
 * @param {Context}                 context                 The current exectution context.
 * @param {String}                  principalId             The principal to retrieve all the groups for
 * @param {String}                  start (NOT IMPLEMENTED) The principal_id that comes just before the first principal you wish to have in your results.
 * @param {Number}                  limit (NOT IMPLEMENTED) The number of parent principals you wish to retrieve (default: 10)
 * @param {Function(err, groups)}   callback                Standard callback method invoked when the process completes
 * @param {Object}                  callback.err            An error that occured, if any
 * @param {Array<String>}           callback.groups         An (inconsistently ordered) array of groups to which the user belongs, either directly or indirectly
 */
var memberOf = module.exports.memberOf = function(context, principalId, start, limit, callback) {
    // Anonymous isn't member of any groups.
    if (principalId === null) {
        return callback(false, []);
    }

    AuthzAPI.getMemberOf(principalId, function(err, groups) {
        if (err) {
            return callback(err);
        }
        PrincipalsUtil.getPrincipals(context, groups, function(err, principalHash, missingPrincipals) {
            if (err) {
                return callback(err);
            }
            var ids = _.keys(principalHash);
            var results = [];
            for (var i = 0, j = ids.length; i < j; i++) {
                results.push(principalHash[ids[i]]);
            }
            callback(false, results);
        });
    });
};

/**
 * Set, update or remove the role for group members.
 *
 * @param {Context}                 ctx             The current execution context
 * @param {String}                  groupUuid       The identifier of a group. ex: g:cam:oae-team
 * @param {Object}                  members         Object where the keys represent the principal ids which should
 *                                                  be updated/added/removed. The value is a string representing the new role. If
 *                                                  false is passed in, the membership for that principal will be removed
 *                                                  e.g. {'user1': 'manager', 'user2': 'viewer', 'user3': false}
 * @param {Function(err, added)}    callback        A function executed when the process has completed
 * @param {Object}                  callback.err    The error that occured, if any
 */
var setGroupMembers = module.exports.setGroupMembers = function(ctx, groupUuid, members, callback) {
    callback = callback || function() {};
    members = members || {};

    // Validation
    var principals = _.keys(members);
    var validator = new Validator();
    validator.check(groupUuid, {'code': 400, 'msg': 'Invalid groupUuid specified'}).isGroupPrincipal();
    validator.check(principals.length, {'code': 400, 'msg': 'You should specify at least 1 user/group to set content permissions on'}).min(1);
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to create a group'}).isLoggedInUser(ctx);
    for (var i = 0; i < principals.length;i++) {
        validator.check(principals[i], {'code': 400, 'msg': 'You cannot make the group a member of itself'}).not(groupUuid);
        validator.check(principals[i], {'code': 400, 'msg': 'Invalid principal specified as member for this group.'}).isPrincipal();
        // Account for 'false'
        if (members[principals[i]] === 'false') {
            members[principals[i]] = false;
        }
        validator.check(members[principals[i]], {'code': 400, 'msg': 'Invalid principal specified as member for this group.'}).isValidRoleChange();
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if the group exists and whether or not we have access to edit.
    canManage(ctx, groupUuid, function(err) {
        if (!err) {
            _setGroupMembers(ctx, groupUuid, members, callback);
        } else {
            callback(err);
        }
    });
};

/**
 * Create a new group within this tenant.
 *
 * @param {Context}             ctx             The current execution context
 * @param {String}              name            The name for this group. This will be stemmed down to something that we can use in
 *                                              Cassandra and prefixed with g:tenant.alias:
 * @param {String}              description     A description for this group.
 * @param {String}              visibility      The visibility that should be set for this group. If left undefined,
 *                                              it defaults to public. Valid values are: public, loggedin or private
 * @param {String}              joinable        Whether or not this group can be joined by people. One of 'yes', 'no' or 'request'.
 * @param {Object}              members         A hash where each key is a principal id and the value is one of 'manager', 'member' or false.
 *                                              If the value is set to false, the principal will be removed from the group.
 * @param {Object}              otherValues     A hash of optional other values.
 * @param {Function(err, uuid)} callback        A function invoked when the process is complete
 * @param {Object}              callback.err    An error that occured, if any. It contains a code suitable as http statuscode and a
 *                                              corresponding message.
 * @param {String}              callback.uuid   The UUID of the group created.
 */
var createGroup = module.exports.createGroup = function(ctx, name, description, visibility, joinable, members, otherValues, callback) {
    callback = callback || function() {};

    // Setting visibility to public if none is set.
    visibility = visibility || Visibility.PUBLIC;
    joinable = joinable || Joinable.YES;

    // Parameter validation
    var validator = new Validator();
    var validVis = _.values(Visibility);
    var validJoin = _.values(Joinable);
    validator.check(name, {'code': 400, 'msg': 'You need to provide a name for this group.'}).notEmpty();
    validator.check(visibility, {'code': 400, 'msg': 'The visibility setting must be one of: ' + validVis}).isIn(validVis);
    validator.check(joinable, {'code': 400, 'msg': 'The joinable setting must be one of: ' + validJoin}).isIn(validJoin);
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to create a group'}).isLoggedInUser(ctx);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Generate the group id.
    var tenant = ctx.tenant();
    var groupId = PrincipalsUtil.cleanName(name);
    var id = AuthzUtil.toUuid(Constants.PRINCIPAL_TYPE_GROUP, tenant.alias, groupId);

    canCreateGroup(ctx, id, function(err) {
        if (!err) {
            // Create the group.
            Cassandra.runQuery('INSERT INTO Principals (principal_id, tenant, name, description, visibility, joinable) VALUES (?, ?, ?, ?, ?, ?) USING CONSISTENCY QUORUM',
                [id, tenant.alias, name, description, visibility, joinable], function (err) {
                if (err) {
                    return callback(err);
                }
                var currentUserUuid = userUuid(ctx);
                // Immediately add the current user as a manager
                members[currentUserUuid] = Constants.roles.MANAGER;
                _setGroupMembers(ctx, id, members, function(err) {
                    if (err) {
                        return callback(err);
                    }
                    callback(null, id);
                });
            });
        } else {
            return callback(err);
        }
    });
};

/**
 * Update a group's metadata.
 *
 * @param {Context}         context         The current execution context.
 * @param {String}          groupId         The ID of the group
 * @param {Object}          profileFields   Object where the keys represent the profile fields that need to be updated and the
 *                                          values represent the new values for those profile fields/
 *                                          e.g. {'name': 'New group name', 'description': 'New group description', 'visibility': 'private', 'joinable': 'no'}
 * @param {Function(err)}   callback        Standard callback method
 * @param {Obect}           callback.err    An error object (if any).
 */
var updateGroup = module.exports.updateGroup = function(context, groupId, profileFields, callback) {
     // Parameter validation
    var validVis = _.values(Visibility);
    var validJoin = _.values(Joinable);
    var fieldNames = profileFields ? _.keys(profileFields) : [];
    var validator = new Validator();
    validator.check(groupId, {'code': 400, 'msg': 'A valid group id must be provided'}).isGroupPrincipal();
    validator.check(fieldNames.length, {'code': 400, 'msg': 'You should specify at least one field'}).min(1);
    fieldNames.forEach(function(fieldName) {
        validator.check(fieldName, {'code': 400, 'msg': fieldName + ' is not a recognized group profile field'}).isIn(['name', 'description', 'visibility', 'joinable']);
        if (fieldName === 'visibility') {
            validator.check(profileFields['visibility'], {'code': 400, 'msg': 'The visibility setting must be one of: ' + validVis}).isIn(validVis);
        } else if (fieldName === 'joinable') {
            validator.check(profileFields['joinable'], {'code': 400, 'msg': 'The joinable setting must be one of: ' + validJoin}).isIn(validJoin);
        }
    });
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to update a group'}).isLoggedInUser(context);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Check if we can update this group.
    canManage(context, groupId, function(err) {
        if (err) {
            return callback(err);
        }

        // Update the row in Cassandra.
        var q = Cassandra.constructUpsertCQL('Principals', 'principal_id', groupId, profileFields, 'QUORUM');
        if (!q) {
            return callback({'code': 500, 'msg': 'Couldn\'t create query.'});
        }
        Cassandra.runQuery(q.query, q.parameters, function(err) {
            if (err) {
                return callback(err);
            }
            callback();
        });
    });
};

/**
 * Determine whether or not the user in the context is allowed to create the given group.
 * 
 * @param {Context}         ctx          The current execution context
 * @param {String}          groupUuid    The group to check
 * @param {Function(err)}   callback     The function to invoke when the process completes
 * @param {Object}          callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var canCreateGroup = function(ctx, groupUuid, callback) {
    if (userUuid(ctx) !== null) {
        getGroup(ctx, groupUuid, function(err, group) {
            if (err && err.code === 404) {
                // we're expecting an error, indicating that the group does not exist  
                return callback();
            } else {
                return callback({'code': 400, 'msg': 'This name is not available.'});
            }
        });
    } else {
        return callback({code: 401, msg: 'Cannot create a group anonymously.'});
    }
};


/**
 * Determine whether or not the user in the context can manage a given group.
 *
 * @param {Context}         ctx          The current execution context
 * @param {String}          groupUuid    The group to check
 * @param {Function(err)}   callback     The function to invoke when the process completes
 * @param {Object}          callback.err If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var canManage = module.exports.canManage = function(ctx, groupUuid, callback) {
    var currentUserUuid = userUuid(ctx);

    if (currentUserUuid !== null) {
        getGroup(ctx, groupUuid, function(err, group) {
            if (err) {
                return callback(err);
            }
            _canManage(ctx, groupUuid, callback);
        });
    } else {
        return callback({code: 401, msg: 'Permission denied'});
    }
};

/**
 * Internal function that checks whether or not the current user can manage a group. This function assumes that
 * the passed in groupUuid actually exists
 *
 * @param {Context}         context         The current execution context.
 * @param {groupUuId}       groupUuid       The id of the group.
 * @param {callback}        callback        Callback method.
 * @param {Object}          callback.err    If specified, indicates that the user cannot create the group. The error 'code' property is the http response code.
 */
var _canManage = function(context, groupUuid, callback) {
    AuthzAPI.isAllowed(userUuid(context), Constants.roles.MANAGER, groupUuid, function(err, isAllowed) {
        if (err) {
            return callback(err)
        }
        if (isAllowed) {
           return callback();
        } else {
            return callback({code: 401, msg: 'Permission denied'});
        }
    });
};

/**
 * Internal function used to update, add or remove the role of a set of principals in a group.
 * This function will assume that the group exists and that the current user is a manager of the group
 *
 * @param {Context}                 ctx             The user Context
 * @param {String}                  groupUuid       The UUID of the group to which the members should be added
 * @param {Object}                  members         Object where the keys represent the principal ids which should
 *                                                  be updated/added/removed. The value is a string representing the new role. If
 *                                                  false is passed in, the membership for that principal will be removed
 *                                                  e.g. {'user1': 'manager', 'user2': 'viewer', 'user3': false}
 * @param {Function(err, added)}    callback        The Function called when the process is finished
 * @param {Object}                  callback.err    An error that occurred, if any
 */
var _setGroupMembers = function(ctx, groupUuid, members, callback) {
    // Check if all the principals exist.
    // Check if all of the provided principals exist
    PrincipalsUtil.getPrincipals(ctx, _.keys(members), function(err, principals, missingPrincipals) {
        if (err) {
            return callback(err);
        } else if (missingPrincipals.length > 0) {
            return callback({'code': 400, 'msg': 'Not all of the provided principals exists. The following could not be found: "[' + missingPrincipals.join(', ') + ']"'});
        }

        AuthzAPI.applyGroupMembershipChanges(groupUuid, members, callback);
    });
};

/**
 * Get the current user UUID from the context, if any
 * 
 * @param {Context} The user context
 * @return {String} The UUID of the user in the context. Returns null if there is no active user (i.e., anonymous)
 */
var userUuid = function(ctx) {
    var user = ctx.user();
    return user ? user.id : null;
};
