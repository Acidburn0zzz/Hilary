/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');

var AuthzUtil = require('oae-authz/lib/util');
var Cassandra = require('oae-util/lib/cassandra');
var ContentAPI = require('oae-content');
var ImageUtil = require('oae-util/lib/image');
var log = require('oae-logger').logger('oae-principals-shared');
var Validator = require('oae-util/lib/validator').Validator;

var GroupAPI = require('./api.group');
var PrincipalsUtil = require('./util');


/**
 * Store a picture for a principal that can be re-used later on.
 *
 * @param {Context}     ctx             Context that holds the current user and tenant.
 * @param {String}      principalId     The ID of the principal you wish to store a picture for.
 * @param {File}        file            The picture
 * @param {String}      file.name       The name of the file you wish to store.
 * @param {String}      file.type       The mimetype of the file. Only the following mimetypes can be stored: 'image/jpg', 'image/jpeg', 'image/png', 'image/gif' or 'image/bmp'
 * @param {String}      file.path       The path on disk where the file is stored.
 * @param {Number}      file.size       The filesize. A maximum of 5MB is imposed.
 * @param {Function}    callback        Standard callback method.
 * @param {Object}      callback.err    Standard error object (if any.)
 */
var storePicture = module.exports.storePicture = function(ctx, principalId, file, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({'err': err}, 'Unable to store picture %s for %s', file.path, principalId);
        }
    };
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to update a picture'}).isLoggedInUser(ctx);
    validator.check(principalId, {'code': 400, 'msg': 'A principal ID must be provided'}).isPrincipalId();
    validator.check(file, {'code': 400, 'msg': 'A file must be provided'}).notNull();
    if (file) {
        validator.check(file.type, {'code': 400, 'msg': 'Missing mimetype on the file object.'}).notEmpty();
        validator.check(file.type, {'code': 400, 'msg': 'Only images are accepted files.'}).isIn(['image/jpg', 'image/jpeg', 'image/png', 'image/gif', 'image/bmp']);
        validator.check(file.size, {'code': 400, 'msg': 'Missing size on the file object.'}).notEmpty();
        validator.check(file.size, {'code': 400, 'msg': 'The size of a picture has an upper limit of 5MB.'}).max(5242880);
        validator.check(file.name, {'code': 400, 'msg': 'Missing name on the file object.'}).notEmpty();
    }
    if (validator.hasErrors()) {
        // Unlink the file if the request is invalid.
        if (file && file.path) {
            fs.unlink(file.path);
        }
        return callback(validator.getFirstError());
    }

    // Check if we can edit this principal.
    _canManagePrincipal(ctx, principalId, function(err, principal) {
        if (err) {
            return callback(err);
        }

        // If this is a user, we need to invalidate the cache first.
        // If we would invalidate it last and it would fail, we'd end up
        // with stale data.
        if (PrincipalsUtil.isUser(principalId)) {
            PrincipalsUtil.invalidateCachedUser(principalId, function(err) {
                if (err) {
                    log().error({'err': err}, 'Could not invalidate the user when storing a large picture.');
                    return callback(err);
                }
                // Store it.
                _storePicture(ctx, principal, file, callback);
            });
        } else {
            // Groups don't need cache invalidation.
            _storePicture(ctx, principal, file, callback);
        }
    });
};

/**
 * Stores a large picture for a principal and attaches it too the User or Group object in Cassandra.
 *
 * @param {Context}     ctx             Context that holds the current user and tenant.
 * @param {Group|User}  principal           The principal for which we should store a file.
 * @param {File}        file                The file to store.
 * @param {Function}    callback            Standard callback method.
 * @param {Object}      callback.err        Standard error object (if any)
 * @param {Group|User}  callback.principal  The updated principal object.
 */
var _storePicture = function(ctx, principal, file, callback) {
    ContentAPI.getStorageBackend(ctx).store(ctx, file, function(err, largePictureUri) {
        if (err) {
            return callback(err);
        }

        // Save in Cassandra.
        var values = {
            'largePictureUri': largePictureUri
        };
        var q = Cassandra.constructUpsertCQL('Principals', 'principalId', principal.id, values, 'QUORUM');
        if (!q) {
            return callback({'code': 500, 'msg': 'Unable to store large picture uri'});
        }
        Cassandra.runQuery(q.query, q.parameters, function(err) {
            if (err) {
                return callback(err);
            }

            principal.setPicture('large', largePictureUri);
            callback(null, principal);
        });
    });
};

/**
 * Crops the picture attached to this principal and generates 32x32 and 256x256 versions of it.
 *
 * @param {Context}     ctx                 Context that holds the current user and tenant.
 * @param {String}      principalId         The ID of the principal to crop the large picture for.
 * @param {Number}      x                   The x coordinate of the topleft corner to start cropping
 * @param {Number}      y                   The y coordinate of the topleft corner to start cropping
 * @param {Number}      width               The width of the square that needs to be cropped out.
 * @param {Function}    callback            Standard callback method.
 * @param {Object}      callback.err        An error object (if any.)
 * @param {Group|User}  callback.principal  The updated principal object.
 */
var generateSizes = module.exports.generateSizes = function(ctx, principalId, x, y, width, callback) {
    callback = callback || function(err) {
        if (err) {
            log().error({'err': err}, 'Unable to crop picture %s for %s', fileUri, principalId);
        }
    };

    // Parameter validation
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'You have to be logged in to be able to update a picture'}).isLoggedInUser(ctx);
    validator.check(principalId, {'code': 400, 'msg': 'A principal id must be provided'}).isPrincipalId();
    validator.check(x, {'code': 400, 'msg': 'The x value must be a positive integer'}).isInt();
    validator.check(x, {'code': 400, 'msg': 'The x value must be a positive integer'}).min(0);
    validator.check(y, {'code': 400, 'msg': 'The y value must be a positive integer'}).isInt();
    validator.check(y, {'code': 400, 'msg': 'The y value must be a positive integer'}).min(0);
    validator.check(width, {'code': 400, 'msg': 'The width value must be a positive integer'}).isInt();
    validator.check(width, {'code': 400, 'msg': 'The width value must be a positive integer'}).min(10);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Make sure we can edit this principal.
    _canManagePrincipal(ctx, principalId, function(err, principal) {
        if (err) {
            return callback(err);
        } else if (!principal.largePictureUri) {
            return callback({'code': 400, 'msg': 'This principal has no large picture associated with it.'});
        }

        _generateSizes(ctx, principal, x, y, width, callback);
    });
};

/**
 * Internal method that crops the picture attached to this principal and generates 32x32 and 256x256 versions of it.
 *
 * @param {Context}     ctx                 Context that holds the current user and tenant.
 * @param {Group|User}  principal           The principal to crop the large picture for.
 * @param {Number}      x                   The x coordinate of the topleft corner to start cropping
 * @param {Number}      y                   The y coordinate of the topleft corner to start cropping
 * @param {Number}      width               The width of the square that needs to be cropped out.
 * @param {Function}    callback            Standard callback method.
 * @param {Object}      callback.err        An error object (if any.)
 * @param {Group|User}  callback.principal  The updated principal object.
 * @api private
 */
var _generateSizes = function(ctx, principal, x, y, width, callback) {
    // Retrieve the raw image.
    ContentAPI.getStorageBackend(ctx).get(ctx, principal.largePictureUri, function(err, file) {
        if (err) {
            return callback(err);
        }

        // Get the resized images.
        var selectedArea = {
            'x': x,
            'y': y,
            'width': width
        };
        var sizes = [32, 256];
        ImageUtil.cropAndResize(file.path, selectedArea, sizes, function(err, files) {
            if (err) {
                return callback(err);
            }
            _storeAndSave(ctx, principal, files, callback);
        });
    });
};

/**
 * Store the resized files and save their URIs on the principal object.
 *
 * @param {Context}     ctx                 Context that holds the current user and tenant.
 * @param {Group|User}  principal           The principal to crop the large picture for.
 * @param {File[]}      files               An array of file objects.
 * @param {Function}    callback            Standard callback method.
 * @param {Object}      callback.err        An error object (if any.)
 * @param {Group|User}  callback.principal  The updated principal object.
 */
var _storeAndSave = function(ctx, principal, files, callback) {

    var smallPictureUri = null;
    var largePictureUri = null;

    // Store the resized files.
    var backend = ContentAPI.getStorageBackend(ctx);
    backend.store(ctx, files[0], function(err, uriA) {
        if (err) {
            return callback(err);
        }
        if (files[0].width === 32) {
            smallPictureUri = uriA;
        } else {
            mediumPictureUri = uriA;
        }
        backend.store(ctx, files[1], function(err, uriB) {
            if (err) {
                return callback(err);
            }
            if (files[1].width === 32) {
                smallPictureUri = uriB;
            } else {
                mediumPictureUri = uriB;
            }

            // Files stored, save them to the DB.
            _saveUrisToCassandra(principal, smallPictureUri, mediumPictureUri, callback);
        });
    });
};

/**
 * Saves the small and medium uris to cassandra and sticks them on the Principal Object.
 * If the principal is a user, the cache gets invalidated.
 *
 * @param {Group|User}  principal           The principal object to update.
 * @param {String}      smallPictureUri     The URI for the small image.
 * @param {String}      mediumPictureUri    The URI for the large image.
 * @param {Object}      callback.err        An error object (if any.)
 * @param {Group|User}  callback.principal  The updated principal object.
 * @api private
 */
var _saveUrisToCassandra = function(principal, smallPictureUri, mediumPictureUri, callback) {
    var values = {
        'smallPictureUri': smallPictureUri,
        'mediumPictureUri': mediumPictureUri
    };
    var q = Cassandra.constructUpsertCQL('Principals', 'principalId', principal.id, values, 'QUORUM');
    if (!q) {
        return callback({'code': 500, 'msg': 'Unable to store cropped picture URIs'});
    }
    Cassandra.runQuery(q.query, q.parameters, function(err) {
        if (err) {
            return callback(err);
        }

        principal.setPicture('small', smallPictureUri);
        principal.setPicture('medium', mediumPictureUri);

        if (PrincipalsUtil.isUser(principal.id)) {
            PrincipalsUtil.invalidateCachedUser(principal.id, function(err) {
                if (err) {
                    log().error({'err': err}, 'Could not invalidate the user after cropping the large picture, the cache now contains stale data.');
                    return callback(err);
                }
                callback(null, principal);
            });
        }
        else {
            callback(null, principal);
        }
    });
};

/**
 * Checks if the current user can edit the principal.
 * If he or she cannot edit the principal, a 401 error object will be passed back.
 *
 * @param {Context}     ctx                 Context that holds the current user and tenant.
 * @param {String}      principalId         The ID of the principal to check.
 * @param {Function}    callback            Standard callback method.
 * @param {Object}      callback.err        Standard error object.
 * @param {Group|User}  callback.principal  The group or user object if the user can manage it.
 * @api private
 */
var _canManagePrincipal = function(ctx, principalId, callback) {
    // Only the current user or an admin can update a user.
    var principalResource = AuthzUtil.getResourceFromId(principalId);
    if (PrincipalsUtil.isUser(principalId) && ctx.user().id === principalId || ctx.user().isAdmin(principalResource.tenantAlias)) {
        // Get the user's information.
        PrincipalsUtil.getPrincipal(ctx, principalId, callback);

    // We'll need to check a group explicitly.
    } else if (PrincipalsUtil.isGroup(principalId)) {
        GroupAPI.canManage(ctx, principalId, function(err, canManage, group) {
            if (err) {
                return callback(err);
            } else if (!canManage) {
                return callback({'code': 401, 'msg': 'You cannot update the picture of this group.'});
            }
            GroupAPI.getGroup(ctx, principalId, callback);
        });
    } else {
        callback({'code': 401, 'msg': 'You cannot update the picture of this principal.'});
    }
};
