/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var groupDeleteLog = require('oae-logger').logger('group-delete');
var groupRestoreLog = require('oae-logger').logger('group-restore');
var userDeleteLog = require('oae-logger').logger('user-delete');
var userRestoreLog = require('oae-logger').logger('user-restore');

var PrincipalsAPI = require('./api');
var PrincipalsConstants = require('./constants');

// Manage all handlers that have been registered for performing operations when a principal has been
// deleted or restored in the system
var _groupDeleteHandlers = {};
var _groupRestoreHandlers = {};

var registerGroupDeleteHandler = module.exports.registerGroupDeleteHandler = function(name, handler) {
    if (_groupDeleteHandlers[name]) {
        throw new Error(util.format('Attempted to register multiple group delete handlers for name "%s"', name));
    } else if (!_.isFunction(handler)) {
        throw new Error(util.format('Attempted to register non-function group delete handler for name "%s"', name));
    }

    _groupDeleteHandlers[name] = handler;
};

var registerGroupRestoreHandler = module.exports.registerGroupRestoreHandler = function(name, handler) {
    if (_groupRestoreHandlers[name]) {
        throw new Error(util.format('Attempted to register multiple group restore handlers for name "%s"', name));
    } else if (!_.isFunction(handler)) {
        throw new Error(util.format('Attempted to register non-function group restore handler for name "%s"', name));
    }

    _groupRestoreHandlers[name] = handler;
};

PrincipalsAPI.on(PrincipalsConstants.events.DELETED_GROUP, function(ctx, group) {
    // Invoke all group delete handlers
    _invokeHandlers(groupDeleteLog, _groupDeleteHandlers, group);
});

PrincipalsAPI.on(PrincipalsConstants.events.RESTORED_GROUP, function(ctx, group) {
    // Invoke all group restore handlers
    _invokeHandlers(groupRestoreLog, _groupRestoreHandlers, group);
});


/*!
 * Register a delete handler that purges all memberships libraries containing a group that is
 * deleted
 */
registerGroupDeleteHandler('memberships-library', function(group, callback) {

});




/**
 * Generic operation to invoke the given handlers, reporting errors or success with the given named
 * logger
 *
 * @param  {Logger}         log         The logger to use to report progress
 * @param  {Object}         handlers    The handler functions keyed by their handler name, indicating which handlers to invoke
 * @param  {User|Group}     principal   The user or group that was the target of the operation
 */
var _invokeHandlers = function(log, handlers, principal) {
    _.each(handlers, function(handler, name) {
        handler(principal, function(errs) {
            if (!_.isEmpty(errs)) {
                return log().error({'principalId': principal.id, 'handlerName': name, 'errs': err}, 'Error(s) occurred while trying to process a handler');
            }

            log().info({'principalId': principal.id, 'handlerName': name}, 'Successfully processed handler');
        });
    });
};
