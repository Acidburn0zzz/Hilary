/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var util = require('util');

var AuthzUtil = require('oae-authz/lib/util');
var OaeUtil = require('oae-util/lib/util');
var ResourceActions = require('oae-resource/lib/actions');
var ResourceConstants = require('oae-resource/lib/constants').ResourceConstants;

var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/dao');
var PrincipalsEmitter = require('oae-principals/lib/internal/emitter');
var PrincipalsUtil = require('oae-principals/lib/util');

var log = require('oae-logger').logger('oae-principals-invitations')

ResourceActions.on(ResourceConstants.events.INVITATION_ACCEPTED, function(ctx, invitationHashes, changesByResourceId) {
    var changesByGroupId = {};
    _.chain(changesByResourceId)
        .keys()
        .filter(AuthzUtil.isGroupId)
        .each(function(groupId) {
            changesByGroupId[croupId] = changesByResourceId[groupId];
        })
        .value();
    if (_.isEmpty(changesByGroupId)) {
        return;
    }

    PrincipalsDAO.getPrincipals(_.keys(changesByGroupId), function(err, groupsById) {
        if (err) {
            return callback(err);
        }

        var newLastModified = Date.now().toString();
        _.each(groupsById, function(group, groupId) {
            var changes = changesByGroupId[groupId];
            var addedIds = _.pluck(changes.members.added, 'id');
            var updatedIds = _.pluck(changes.members.updated, 'id');

            PrincipalsDAO.updatePrincipal(group.id, {'lastModified': newLastModified}, function(err) {
                if (err) {
                    return log().warn({
                        'err': err,
                        'groupId': group.id
                    }, 'An error occurred while updating group libraries after invitation was accepted');
                }

                // Swap the old last modified with the new, but we need to keep track of both for
                // library updates
                var oldLastModified = group.lastModified;
                group.lastModified = newLastModified;

                OaeUtil.invokeIfNecessary((!_.isEmpty(addedIds)), PrincipalsUtil.touchMembershipLibraries, group, oldLastModified, addedIds, [], function(err) {
                    if (err) {
                        return log().warn({
                            'err': err,
                            'groupId': group.id,
                            'addedIds': addedIds
                        }, 'An error occurred while inserting a user into the group members library after invitation was accepted');
                    }

                    return PrincipalsEmitter.emit(PrincipalsConstants.events.UPDATED_GROUP_MEMBERS, ctx, group, changes.changes, addedIds, updatedIds, []);
                });
            });
        });
    });
