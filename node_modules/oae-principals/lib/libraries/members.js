/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzDelete = require('oae-authz/lib/delete');
var LibraryAPI = require('oae-library');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsDelete = require('oae-principals/lib/delete');
var PrincipalsUtil = require('oae-principals/lib/util');

var log = require('oae-logger').logger('principals-members-library');

/*!
 * Register a library indexer that can provide resources to reindex the members library
 */
LibraryAPI.Index.registerLibraryIndex(PrincipalsConstants.library.MEMBERS_INDEX_NAME, {
    'pageResources': function(libraryId, start, limit, callback) {
        AuthzAPI.getAuthzMembers(libraryId, start, limit, function(err, memberEntries) {
            if (err) {
                return callback(err);
            }

            PrincipalsDAO.getPrincipals(_.pluck(memberEntries, 'id'), ['principalId', 'tenantAlias', 'visibility', 'smallPictureUri'], function(err, members) {
                if (err) {
                    return callback(err);
                }

                var resources = _.map(memberEntries, function(memberEntry) {
                    var member = members[memberEntry.id];
                    var role = memberEntry.role;
                    return {'rank': _getMembersLibraryRank(member, role), 'resource': member};
                });

                return callback(null, resources);
            });
        });
    }
});

/*!
 * When a user updates their profile, we have to update their rank in the members libraries to which
 * they belong
 */
PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_USER, function(ctx, updatedUser, oldUser) {
    // If there is a change in state of their profile picture, then we update their ranks in group
    // members libraries
    if (_xor(updatedUser.smallPictureUri, oldUser.smallPictureUri)) {
        _updateMembersLibrariesForUser(updatedUser);
    }
});

var _updateMembersLibrariesForUser = function(user) {
    AuthzAPI.getAllRolesForPrincipalAndResourceType(user.id, AuthzConstants.resourceTypes.GROUP, function(err, allRoles) {
        if (err) {
            return log().error({'err': err, 'userId': user.id}, 'An error occurred while trying to update all members libraries to which a user belongs');
        }


    });
};

/**
 * Get the numeric rank of a principal given the principal and their role in the members library
 * they appear
 *
 * @param  {User|Group}     principal   The user or group for which to get their members library rank
 * @param  {String}         role        The role for the principal in the members library
 * @return {Number}                     The numeric rank to use for the principal in a members list
 * @api private
 */
var _getMembersLibraryRank = function(principal, role) {
    var rank = 2;
    if (role === PrincipalsConstants.roles.MANAGER && principal.smallPictureUri) {
        // Managers with profile pictures appear first
        rank = 0;
    } else if (principal.smallPictureUri) {
        // Secondary display preference goes to those who have a profile picture
        rank = 1;
    }

    return rank;
};

/**
 * Convenience function to do a logical xor
 *
 * @param  {Object}     one     One item to xor
 * @param  {Object}     other   The other item to xor
 * @return {Boolean}            Whether or not the exclusive OR check passed
 * @api private
 */
var _xor = function(one, other) {
    return ((one && !other) || (!one && other));
};
