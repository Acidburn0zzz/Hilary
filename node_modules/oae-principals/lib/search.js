/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

var PrincipalsAPI = require('oae-principals');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');


////////////////////
// INDEXING TASKS //
////////////////////

PrincipalsAPI.on(PrincipalsConstants.events.CREATED_USER, function(ctx, user) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'user',
        'resources': [{
            'id': user.id,
            'user': user
        }]
    });
});

PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_USER, function(ctx, userId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'user',
        'resources': [{'id': userId}]
    });
});

PrincipalsAPI.on(PrincipalsConstants.events.CREATED_GROUP, function(ctx, group, members) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'group',
        'resources': [{
            'id': group.id,
            'group': group,
            'members': members
        }]
    });
});

PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP, function(ctx, groupId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'group',
        'resources': [{'id': groupId}]
    });
});

PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP_MEMBERS, function(ctx, groupId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'group',
        'resources': [{'id': groupId}]
    });
});



////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

var _produceUserSearchDocuments = function(resources, callback, docs) {
    docs = docs || [];
    if (resources.length === 0) {
        return callback(null, docs);
    }

    var resource = resources.shift();
    var userId = resource.id;
    var user = resource.user;
    if (user) {
        docs.push(_produceUserSearchDocument(user));
        return _produceUserSearchDocuments(resources, callback, docs);
    } else {
        PrincipalsDAO.getPrincipal(userId, function(err, user) {
            if (err) {
                return callback(err);
            } else if (user) {
                docs.push(_produceUserSearchDocument(user));
            }

            return _produceUserSearchDocuments(resources, callback, docs);
        });
    }
};

var _produceGroupSearchDocuments = function(resources, callback, docs) {
    docs = docs || [];
    if (resources.length === 0) {
        return callback(null, docs);
    }

    var resource = resources.shift();
    var groupId = resource.id;
    var group = resource.group;
    var members = resource.members;
    _getGroupWithMembers(groupId, group, members, function(err, group, members) {
        if (err) {
            return callback(err);
        } else if (group) {
            docs.push(_produceGroupSearchDocument(group, members));
        }

        _produceGroupSearchDocuments(resources, callback, docs);
    });
};

SearchAPI.registerDocumentProducer('user', _produceUserSearchDocuments);
SearchAPI.registerDocumentProducer('group', _produceGroupSearchDocuments);


///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

var _transformUserDocument = function(ctx, docs, callback) {
    var transformedDocs = _.map(docs, function(doc) {
        var fields = doc.fields
        var user = new User(fields.tenantId, fields.id, fields.title, {
            'visibility': fields.visibility,
            'publicAlias': fields.extra.publicAlias
        });

        // hide information that is sensitive to the current session, then transform it back into a the search document
        PrincipalsUtil.hidePrincipalData(ctx, user);
        var result = _produceUserSearchDocument(user);
        delete result.general;
        delete result.sort;
        delete result.extra;

        return result;
    });

    return transformedDocs;
}

SearchAPI.registerDocumentTransformer('user', _transformUserDocument);

///////////////////////
// UTILITY FUNCTIONS //
///////////////////////

var _produceUserSearchDocument = function(user) {
    var general = _.compact([user.displayName, user.username, user.publicAlias]).join(' ');
    return {
        'id': user.id,
        'tenantId': user.tenant,
        'title': user.displayName,
        'visibility': user.visibility,
        'general': general,
        'sort': general,
        'extra': {
            'displayName': user.publicAlias
        }
    };
}

var _produceGroupSearchDocument = function(group, members) {
    var general = _.compact([group.name, group.alias, group.description]).join(' ');

    return {
        id: group.id,
        tenantId: group.tenant,
        title: group.name,
        visibility: group.visibility,
        general: general,
        sort: general,
        access: _.keys(members)
    };
}

var _getGroupWithMembers = function(groupId, group, members, callback) {
    _getGroupIfNecessary(groupId, group, function(err, group) {
        if (err) {
            return callback(err);
        }

        _getMembersIfNecessary(groupId, members, function(err, members) {
            if (err) {
                return callback(err);
            }

            return callback(null, group, members);
        });
    });
}

var _getGroupIfNecessary = function(groupId, group, callback) {
    if (group) {
        return callback(null, group);
    }
    PrincipalsDAO.getPrincipal(groupId, callback);
}

var _getMembersIfNecessary = function(groupId, members, callback) {
    if (members) {
        return callback(null, members);
    }

    AuthzAPI.getAuthzMembers(groupId, 0, 10000, function(err, members) {
        // flatten the { id: ..., role: ... } object into just an array of ids
        membersHash = {};
        for (var i = 0; i < members; i++) {
            var member = members[i];
            membersHash[member.id] = member.role;
        }

        return callback(null, membersHash);
    });
}
