/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

var PrincipalsAPI = require('oae-principals');
var PrincipalsConstants = require('oae-principals/lib/constants').PrincipalsConstants;
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var PrincipalsUtil = require('oae-principals/lib/util');

var User = require('oae-principals/lib/model').User;

////////////////////
// INDEXING TASKS //
////////////////////

PrincipalsAPI.on(PrincipalsConstants.events.CREATED_USER, function(ctx, user) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'user',
        'resources': [{
            'id': user.id,
            'user': user,
            'opts': {
                'indexResource': true,
                'indexMemberships': false
            }
        }]
    });
});

PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_USER, function(ctx, userId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'user',
        'resources': [{
            'id': userId,
            'opts': {
                'indexResource': true,
                'indexMemberships': false
            }
        }]
    });
});

PrincipalsAPI.on(PrincipalsConstants.events.CREATED_GROUP, function(ctx, group, members) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'group',
        'resources': [{
            'id': group.id,
            'group': group,
            'members': members,
            'opts': {
                'indexResource': true,
                'indexMembers': true,
                'indexMemberships': false
            }
        }]
    });

    // fire additional tasks to update the memberships of the members
    _fireMembershipUpdateTasks(members);
});

PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP, function(ctx, groupId) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'group',
        'resources': [{
            'id': groupId,
            'opts': {
                'indexResource': true,
                'indexMembers': false,
                'indexMemberships': false
            }
        }]
    });
});

PrincipalsAPI.on(PrincipalsConstants.events.UPDATED_GROUP_MEMBERS, function(ctx, groupId, memberUpdates) {
    MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
        'resourceType': 'group',
        'resources': [{
            'id': groupId,
            'opts': {
                'indexResource': false,
                'indexMembers': true,
                'indexMemberships': false
            }
        }]
    });

    // fire additional tasks to update the memberships of the members
    _fireMembershipUpdateTasks(memberUpdates);
});

var _fireMembershipUpdateTasks = function(members) {
    // aggregate resource updates for members, to update their memberships
    if (members) {
        var userUpdates = [];
        var groupUpdates = [];

        for(var memberId in members) { 
            if (PrincipalsUtil.isGroup(memberId)) {
                groupUpdates.push({
                    'id': memberId,
                    'opts': {
                        'indexResource': false,
                        'indexMembers': false,
                        'indexMemberships': true
                    }
                });
            } else {
                userUpdates.push({
                    'id': memberId,
                    'opts': {
                        'indexResource': false,
                        'indexMemberships': true
                    }
                });
            }
        }

        if (userUpdates.length > 0) {
            MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
                'resourceType': 'user',
                'resources': userUpdates
            });
        }

        if (groupUpdates.length > 0) {
            MQ.submit(SearchConstants.mq.TASK_INDEX_DOCUMENT, {
                'resourceType': 'group',
                'resources': groupUpdates
            });
        }
    }
};

/////////////////////
// CUSTOM SEARCHES //
/////////////////////

SearchAPI.registerSearch('members', require('./searches/members'));
SearchAPI.registerSearch('memberships', require('./searches/memberships'));

////////////////////////
// DOCUMENT PRODUCERS //
////////////////////////

var _produceUserSearchDocuments = function(resources, callback, docs) {
    docs = docs || [];
    if (resources.length === 0) {
        return callback(null, docs);
    }

    var resource = resources.shift();
    var userId = resource.id;
    var opts = resource.opts;
    var user = resource.user;
    if (user) {
        docs.push(_produceUserSearchDocument(user));
        return _produceUserSearchDocuments(resources, callback, docs);
    } else {
        PrincipalsDAO.getPrincipal(userId, function(err, user) {
            if (err) {
                return callback(err);
            } else if (user) {
                docs.push(_produceUserSearchDocument(user));
            }

            return _produceUserSearchDocuments(resources, callback, docs);
        });
    }
};

var _produceUserSearchDocument = function(user) {
    var general = _.compact([user.displayName, user.publicAlias]).join(' ');
    return {
        'id': user.id,
        'tenantId': user.tenant,
        'title': user.displayName,
        'visibility': user.visibility,
        'general': general,
        'sort': general,
        'extra': {
            'publicAlias': user.publicAlias
        }
    };
};

var _produceGroupSearchDocuments = function(resources, callback, docs) {
    docs = docs || [];
    if (resources.length === 0) {
        return callback(null, docs);
    }

    var resource = resources.shift();
    var groupId = resource.id;
    var group = resource.group;

    if (group) {
        docs.push(_produceGroupSearchDocument(group));
        return _produceGroupSearchDocuments(resources, callback, docs);
    }

    PrincipalsDAO.getPrincipal(groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        docs.push(_produceGroupSearchDocument(group));
        return _produceGroupSearchDocuments(resources, callback, docs);
    });
};

var _produceGroupSearchDocument = function(group) {
    var general = _.compact([group.name, group.alias, group.description]).join(' ');

    return {
        'id': group.id,
        'tenantId': group.tenant,
        'title': group.name,
        'visibility': group.visibility,
        'joinable': group.joinable,
        'general': general,
        'sort': general
    };
};

// bind the document producers
SearchAPI.registerDocumentProducer('user', _produceUserSearchDocuments);
SearchAPI.registerDocumentProducer('group', _produceGroupSearchDocuments);


///////////////////////////
// DOCUMENT TRANSFORMERS //
///////////////////////////

var _transformUserDocuments = function(ctx, docs, callback) {
    var transformedDocs = {};

    for (var docId in docs) {
        var doc = docs[docId];
        var fields = doc.fields
        var user = new User(fields.tenantId, doc._id, fields.title, {
            'visibility': fields.visibility,
            'publicAlias': fields.extra.publicAlias
        });

        // hide information that is sensitive to the current session, then transform it back into a search document using the producer
        PrincipalsUtil.hidePrincipalData(ctx, user);
        var result = _produceUserSearchDocument(user);
        delete result.general;
        delete result.sort;
        delete result.extra;
        
        transformedDocs[docId] = result;
    }

    return callback(null, transformedDocs);
};

// bind the transformers
SearchAPI.registerDocumentTransformer('user', _transformUserDocuments);

