/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var fs = require('fs');
var gm = require('gm');

var RestAPI = require('oae-rest');
var RestUtil = require('oae-rest/lib/util');
var TestsUtil = require('oae-tests');


describe('Users', function() {

    // Rest context that can be used every time we need to make a request as a Cambridge tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make an anonymous request to the Cambridge tenant.
    var anonymousRestContext = null;

    before(function() {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    });

    /**
     * Create a user and return a RestContext for it.
     *
     * @param {Function}    callback        Standard callback method.
     * @param {RestContext} callback.ctx    The RestContext for the created user.
     */
    var createUser = function(callback) {
        var userId = TestsUtil.generateTestUserId();
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', {'visibility': 'public'}, function(err, createdUser) {
            assert.ok(!err);

            var ctx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');
            ctx.userObj = createdUser;
            callback(ctx);
        });
    };

    /**
     * Create 2 users.
     *
     * @param {Function}    callback            Standard callback method.
     * @param {Object}      callback.contexts   The RestContexts for the created users keyed by 'simon' and 'nicolaas'.
     */
    var createUsers = function(callback) {
        var contexts = {};
        createUser(function(ctxSimon) {
            contexts['simon'] = ctxSimon;
            createUser(function(ctxNico) {
                contexts['nicolaas'] = ctxNico;
                callback(contexts);
            });
        });
    };

    /**
     * @return {Stream} A stream to jpg image.
     */
    var getPictureStream = function() {
        var file = __dirname + '/data/restroom.jpg';
        return fs.createReadStream(file);
    };

    /**
     * @return {Stream} A stream to text file.
     */
    var getTextStream = function() {
        var file = __dirname + '/data/speech.txt';
        return fs.createReadStream(file);
    };

    /**
     * Returns an object that can be used to crop out a rectangle.
     */
    var createSelectedArea = function(x, y, width) {
        return {
            'x': x,
            'y': y,
            'width': width
        };
    };


    /*
     * Verifies the size of an image.
     */
    var verifySize = function(rootDir, uri, width, height, callback) {
        // Strip 'local:' from the uri.
        var path = rootDir + '/' + uri.substr(6);
        var imageMagick = gm.subClass({ 'imageMagick': true });
        imageMagick(path).size(function (err, size) {
            assert.ok(!err);
            assert.equal(size.width, width);
            assert.equal(size.height, height);
            callback();
        });
    };

    /*
     * Attempts to crop a picture, if it's expected to succeed the resulting file will be checked.
     */
    var verifyCropping = function(ctx, principalId, selectedArea, expectedHttpCode, callback) {
        RestAPI.Crop.cropPicture(ctx, principalId, selectedArea, function(err, data) {
            if (expectedHttpCode === 200) {
                assert.ok(!err);
            } else {
                // It was expected that this request would fail.
                assert.equal(err.code, expectedHttpCode);
                return callback();
            }

            // When the request was OK, we verify if the cropping actually happened.
            // Get the root dir:
            RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                assert.ok(!err);
                var rootDir = config['oae-content']['storage']['local-dir'];
                verifySize(rootDir, data.smallPictureUri, 32, 32, function() {
                    verifySize(rootDir, data.mediumPictureUri, 128, 128, function() {
                        callback();
                    });
                });
            });
        });
    };

    describe('Profile picture', function() {

        /*!
         * Verify that you can upload a picture.
         */
        it('verify uploading', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });

        /*!
         * Verify basic parameter requirements.
         */
        it('verify basic parameter requirements', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, null, null, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /*!
         * Verify that the picture upload endpoint only accepts pictures.
         */
        it('verify uploading bad mimetype', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getTextStream, null, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /*!
         * Verify that cropping actually occurs.
         */
        it('verify cropping', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    var selectedArea = createSelectedArea(10, 10, 200);
                    verifyCropping(ctx, ctx.userObj.id, selectedArea, 200, callback);
                });
            });
        });

        /*!
         * Verify you get an appropriate response if you haven't uploaded a picture yet.
         */
        it('verify cropping fails if the user hasn\'t uploaded a picture yet', function(callback) {
            createUser(function(ctx) {
                verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, 200), 400, callback);
            });
        });

        /*!
         * Verify you can crop and upload an image within 1 REST API call.
         */
        it('verify uploading and cropping', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200);
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });

        /*!
         * Verify that the area selection cannot be negative.
         */
        it('verify cropping validation negative coordinates', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.userObj.id, createSelectedArea(-10, 10, 200), 400, function() {
                        verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, -10, 200), 400, function() {
                            verifyCropping(ctx, ctx.userObj.id, createSelectedArea(-10, -10, 200), 400, function() {
                                verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, -200), 400, callback);
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the area selection does some type validation.
         */
        it('verify cropping validation area only takes numbers', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.userObj.id, createSelectedArea("foo", 10, 200), 400, function() {
                        verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, "foo", 200), 400, function() {
                            verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, "foo"), 400, function() {
                                verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, "NaN"), 400, callback);
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the rectangle should be completely within the image boundaries.
         */
        it('verify cropping cannot happen partially outside of the image', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, 20000), 400, callback);
                });
            });
        });

        /*!
         * Verify that you cannot crop outside the image.
         */
        it('verify cropping fails if x or y coord is outside of image.', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.userObj.id, createSelectedArea(20000, 10, 100), 400, function() {
                        verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 200000, 100), 400, callback);
                    });
                });
            });
        });

        /*!
         * Verify that you can download a picture.
         */
        it('verify downloading picture', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    // Download the different sizes.
                    RestAPI.User.downloadPicture(ctx, ctx.userObj.id, 'small', function(err, body, request) {
                        assert.ok(!err);
                        assert.ok(request.statusCode, 204);
                        RestAPI.User.downloadPicture(ctx, ctx.userObj.id, 'medium', function(err, body, request) {
                            assert.ok(!err);
                            assert.ok(request.statusCode, 204);
                            RestAPI.User.downloadPicture(ctx, ctx.userObj.id, 'large', function(err, body, request) {
                                assert.ok(!err);
                                assert.ok(request.statusCode, 204);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that you can upload/crop pictures for groups.
         */
        it('verify uploading and cropping for groups', function(callback) {
            createUser(function(ctx) {
                TestsUtil.generateTestGroups(ctx, 1, function(err, groups) {
                    var group = groups[Object.keys(groups)[0]];
                    RestAPI.Group.uploadPicture(ctx, group.id, getPictureStream, null, function(err) {
                        assert.ok(!err);
                        verifyCropping(ctx, group.id, createSelectedArea(-10, 10, 200), 400, function() {
                            verifyCropping(ctx, group.id, createSelectedArea(10, -10, 200), 400, function() {
                                verifyCropping(ctx, group.id, createSelectedArea(-10, -10, 200), 400, function() {
                                    verifyCropping(ctx, group.id, createSelectedArea(10, 10, 200), 200, function() {
                                        // Download the different sizes.
                                        RestAPI.Group.downloadPicture(ctx, group.id, 'small', function(err, body, request) {
                                            assert.ok(!err);
                                            assert.ok(request.statusCode, 204);
                                            RestAPI.Group.downloadPicture(ctx, group.id, 'medium', function(err, body, request) {
                                                assert.ok(!err);
                                                assert.ok(request.statusCode, 204);
                                                RestAPI.Group.downloadPicture(ctx, group.id, 'large', function(err, body, request) {
                                                    assert.ok(!err);
                                                    assert.ok(request.statusCode, 204);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the endpoints don't expose profile pictures if the user has set his visibility to private/loggedin.
         */
        it('verify visibility', function(callback) {
            createUsers(function(contexts) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(contexts['simon'], contexts['simon'].userObj.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    RestAPI.User.updateUser(contexts['simon'], contexts['simon'].userObj.id, {'visibility': 'private'}, function(err) {
                        assert.ok(!err);

                        RestAPI.User.getUser(contexts['nicolaas'], contexts['simon'].userObj.id, function(err, user) {
                            assert.ok(!err);
                            assert.equal(user.smallPicture, undefined);
                            assert.equal(user.profile.smallPictureUri, undefined);
                            assert.equal(user.mediumPicture, undefined);
                            assert.equal(user.profile.mediumPictureUri, undefined);
                            assert.equal(user.largePicture, undefined);
                            assert.equal(user.profile.largePictureUri, undefined);

                            RestAPI.User.getUser(anonymousRestContext, contexts['simon'].userObj.id, function(err, user) {
                                assert.ok(!err);
                                assert.equal(user.smallPicture, undefined);
                                assert.equal(user.profile.smallPictureUri, undefined);
                                assert.equal(user.mediumPicture, undefined);
                                assert.equal(user.profile.mediumPictureUri, undefined);
                                assert.equal(user.largePicture, undefined);
                                assert.equal(user.profile.largePictureUri, undefined);

                                RestAPI.User.updateUser(contexts['simon'], contexts['simon'].userObj.id, {'visibility': 'loggedin'}, function(err) {
                                    assert.ok(!err);

                                    RestAPI.User.getUser(contexts['nicolaas'], contexts['simon'].userObj.id, function(err, user) {
                                        assert.ok(!err);
                                        assert.ok(user.smallPicture);
                                        assert.ok(user.profile.smallPictureUri);
                                        assert.ok(user.mediumPicture);
                                        assert.ok(user.profile.mediumPictureUri);
                                        assert.ok(user.largePicture);
                                        assert.ok(user.profile.largePictureUri);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that you cannot set/crop a picture for someone else.
         */
        it('verify uploading or cropping a picture for another user is not allowed.', function(callback) {
            createUsers(function(contexts) {
                RestAPI.User.uploadPicture(contexts['simon'], contexts['nicolaas'].userObj.id, getPictureStream, null, function(err) {
                    assert.equal(err.code, 401);
                    verifyCropping(contexts['simon'], contexts['nicolaas'].userObj.id, createSelectedArea(10, 10, 200), 401, callback);
                });
            });
        });

        /*!
         * Verify that you cannot set a picture for a group you have no management rights on.
         */
        it('verify uploading or cropping a picture for a non-managed group is not allowed.', function(callback) {
            createUsers(function(contexts) {
                TestsUtil.generateTestGroups(contexts['simon'], 1, function(err, groups) {
                    var group = groups[Object.keys(groups)[0]];
                    RestAPI.Group.uploadPicture(contexts['nicolaas'], group.id, getPictureStream, null, function(err) {
                        assert.equal(err.code, 401);
                        verifyCropping(contexts['nicolaas'], group.id, createSelectedArea(10, 10, 200), 401, function() {
                            // Making Nico a member should still not allow him to change the picture.
                            var members = {};
                            members[contexts['nicolaas'].userObj.id] = 'member';
                            RestAPI.Group.setGroupMembers(contexts['simon'], group.id, members, function(err) {
                                assert.ok(!err);
                                RestAPI.Group.uploadPicture(contexts['nicolaas'], group.id, getPictureStream, null, function(err) {
                                    assert.equal(err.code, 401);
                                    verifyCropping(contexts['nicolaas'], group.id, createSelectedArea(10, 10, 200), 401, function() {

                                        // Making him a manager should.
                                        members[contexts['nicolaas'].userObj.id] = 'manager';
                                        RestAPI.Group.setGroupMembers(contexts['simon'], group.id, members, function(err) {
                                            assert.ok(!err);
                                            RestAPI.Group.uploadPicture(contexts['nicolaas'], group.id, getPictureStream, null, function(err) {
                                                assert.ok(!err);
                                                verifyCropping(contexts['nicolaas'], group.id, createSelectedArea(10, 10, 200), 200, callback);
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /*!
         * Verify that the urls we generate for profile pictures are cacheable.
         */
        it('verify profile pictures are cacheable', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    // Get my data twice, the url's for the pictures shouldn't change as that would mean they aren't cacheable.
                    RestAPI.User.getUser(ctx, ctx.userObj.id, function(err, firstRequestUser) {
                        assert.ok(!err);
                        RestAPI.User.getUser(ctx, ctx.userObj.id, function(err, secondRequestUser) {
                            assert.ok(!err);
                            assert.equal(firstRequestUser.smallPicture, secondRequestUser.smallPicture);
                            assert.equal(firstRequestUser.mediumPicture, secondRequestUser.mediumPicture);
                            assert.equal(firstRequestUser.largePicture, secondRequestUser.largePicture);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user with a profile picture has a thumbnailUrl in search results.
         */
        it('verify the thumbnail is placed in user search results', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                // Verify we can search for the user
                var simon = _.values(users)[0];

                // Set the displayname so we can get 1 result back.
                var updateProperties = {
                    'displayName': 'Simon with thumbnail'
                };
                RestAPI.User.updateUser(simon.restContext, simon.user.id, updateProperties, function(err) {
                    assert.ok(!err);

                    var selectedArea = createSelectedArea(10, 10, 200, 200);
                    RestAPI.User.uploadPicture(simon.restContext, simon.user.id, getPictureStream, selectedArea, function(err) {
                        assert.ok(!err);

                        RestAPI.Search.search(anonymousRestContext, 'general', ['user'], { 'q': 'Simon with thumbnail' }, function(err, results) {
                            assert.ok(!err);
                            assert.equal(results.total, 1);
                            assert.equal(results.results.length, 1);
                            assert.ok(results.results[0].thumbnailUrl);

                            // Do a second request to ensure that the picture url is cacheable.
                            RestAPI.Search.search(anonymousRestContext, 'general', ['user'], { 'q': 'Simon with thumbnail' }, function(err, verifyResults) {
                                assert.ok(!err);
                                assert.equal(verifyResults.total, 1);
                                assert.equal(verifyResults.results.length, 1);
                                assert.ok(verifyResults.results[0].thumbnailUrl);
                                assert.equal(verifyResults.results[0].thumbnailUrl, results.results[0].thumbnailUrl, "The thumbailUrl is different between two search requests which means the url isn't cacheable.");
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    it('verify that the search thumbnail respects the user visibility', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
            assert.ok(!err);

            // Verify we can search for the user
            users = _.values(users);
            var simon = users[0];
            var nico = users[1];


            // Set the displayname so we can get 1 result back.
            var updateProperties = {
                'visibility': 'loggedin',
                'displayName': 'loggedin simon'
            };
            RestAPI.User.updateUser(simon.restContext, simon.user.id, updateProperties, function(err) {
                assert.ok(!err);

                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(simon.restContext, simon.user.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    // Anon cannot see even find the user.
                    RestAPI.Search.search(anonymousRestContext, 'general', ['user'], { 'q': 'loggedin simon' }, function(err, results) {
                        assert.ok(!err);
                        assert.equal(results.total, 0);
                        assert.equal(results.results.length, 0);

                        // Loggedin people can see the result.
                        RestAPI.Search.search(nico.restContext, 'general', ['user'], { 'q': 'loggedin simon' }, function(err, verifyResults) {
                            assert.ok(!err);
                            assert.equal(verifyResults.total, 1);
                            assert.equal(verifyResults.results.length, 1);
                            assert.ok(verifyResults.results[0].thumbnailUrl);

                            // I can see the my own picture in the search result
                            RestAPI.Search.search(simon.restContext, 'general', ['user'], { 'q': 'loggedin simon' }, function(err, verifyResults) {
                                assert.ok(!err);
                                assert.equal(verifyResults.total, 1);
                                assert.equal(verifyResults.results.length, 1);
                                assert.ok(verifyResults.results[0].thumbnailUrl);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that a group with a profile picture has a thumbnailUrl in search results.
     */
    it('verify the thumbnail is placed in group search results', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);

            // Verify we can search for the user
            users = _.values(users);
            var simon = users[0];

            var groupAlias = TestsUtil.generateTestUserId('some-group-alias');
            RestAPI.Group.createGroup(simon.restContext, groupAlias, groupAlias, 'a group with a cropped picture', 'public', 'yes', [], [], function(err, group) {
                assert.ok(!err);

                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.Group.uploadPicture(simon.restContext, group.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    RestAPI.Search.search(anonymousRestContext, 'general', ['group'], {'q': 'a group with a cropped picture'}, function(err, results) {
                        assert.ok(!err);
                        assert.equal(results.total, 1);
                        assert.equal(results.results.length, 1);
                        assert.ok(results.results[0].thumbnailUrl);
                        callback();
                    });
                });
            });
        });
    });
});
