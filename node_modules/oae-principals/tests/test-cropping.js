/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var fs = require('fs');

var RestAPI = require('oae-rest');
var RestUtil = require('oae-rest/lib/util');
var TestsUtil = require('oae-tests');


describe('Users', function() {

    // Rest context that can be used every time we need to make a request as a Cambridge tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to make an anonymous request to the Cambridge tenant.
    var anonymousRestContext = null;

    before(function() {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    });

    /**
     * Create a user and return a RestContext for it.
     *
     * @param {Function}    callback        Standard callback method.
     * @param {RestContext} callback.ctx    The RestContext for the created user.
     */
    var createUser = function(callback) {
        var userId = TestsUtil.generateTestUserId();
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'Test User', {'visibility': 'public'}, function(err, createdUser) {
            assert.ok(!err);

            var ctx = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, userId, 'password');
            ctx.userObj = createdUser;
            callback(ctx);
        });
    };

    /**
     * Create 2 users.
     *
     * @param {Function}    callback            Standard callback method.
     * @param {Object}      callback.contexts   The RestContexts for the created users keyed by 'simon' and 'nicolaas'.
     */
    var createUsers = function(callback) {
        var contexts = {};
        createUser(function(ctxSimon) {
            contexts['simon'] = ctxSimon;
            createUser(function(ctxNico) {
                contexts['nicolaas'] = ctxNico;
                callback(contexts);
            });
        });
    };

    /**
     * @return {Stream} A stream to jpg image.
     */
    var getPictureStream = function() {
        var file = __dirname + '/data/restroom.jpg';
        return fs.createReadStream(file);
    };

    /**
     * @return {Stream} A stream to text file.
     */
    var getTextStream = function() {
        var file = __dirname + '/data/speech.txt';
        return fs.createReadStream(file);
    };

    /**
     * Returns an object that can be used to crop out a rectangle.
     */
    var createSelectedArea = function(x, y, width, height) {
        return {
            'x': x,
            'y': y,
            'width': width,
            'height': height
        };
    }

    describe('Profile picture', function() {

        it('verify uploading', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });

        it('verify parameter validation', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, null, null, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        it('verify bad mimetype', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getTextStream, null, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        it('verify cropping', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    var selectedArea = createSelectedArea(10, 10, 200, 200);
                    RestAPI.Crop.cropPicture(ctx, ctx.userObj.id, selectedArea, function(err) {
                        assert.ok(!err);
                        callback();
                    });
                });
            });
        });

        it('verify uploading and cropping', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });

        var verifyCropping = function(ctx, principalId, selectedArea, code, callback) {
            RestAPI.Crop.cropPicture(ctx, principalId, selectedArea, function(err) {
                assert.equal(err.code, code);
                callback();
            });
        };

        it('verify cropping validation negative coordinates', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.userObj.id, createSelectedArea(-10, 10, 200, 200), 400, function() {
                        verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, -10, 200, 200), 400, function() {
                            verifyCropping(ctx, ctx.userObj.id, createSelectedArea(-10, -10, 200, 200), 400, callback);
                        });
                    });
                });
            });
        });

        it('verify cropping validation negative box sizes', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, -200, 200), 400, function() {
                        verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, 200, -200), 400, function() {
                            verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, -200, -200), 400, callback);
                        });
                    });
                });
            });
        });

        it('verify cropping can take out of bounds sizes', function(callback) {
            createUser(function(ctx) {
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, null, function(err) {
                    assert.ok(!err);
                    verifyCropping(ctx, ctx.userObj.id, createSelectedArea(10, 10, 20000, 21200), undefined, callback);
                });
            });
        });

        it('verify downloading picture', function(callback) {
            createUser(function(ctx) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(ctx, ctx.userObj.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    // Download the different sizes.
                    RestAPI.User.downloadPicture(ctx, ctx.userObj.id, 'small', function(err, body, request) {
                        assert.ok(!err);
                        assert.ok(request.statusCode, 204);
                        RestAPI.User.downloadPicture(ctx, ctx.userObj.id, 'medium', function(err, body, request) {
                            assert.ok(!err);
                            assert.ok(request.statusCode, 204);
                            RestAPI.User.downloadPicture(ctx, ctx.userObj.id, 'large', function(err, body, request) {
                                assert.ok(!err);
                                assert.ok(request.statusCode, 204);
                                callback();
                            });
                        });
                    });
                });
            });
        });


        it('verify uploading and cropping for groups', function(callback) {
            var name = TestsUtil.generateTestUserId();
            createUser(function(ctx) {
                RestAPI.Group.createGroup(ctx, name, name, 'description', 'public', 'request', [], [], function(err, group) {
                    RestAPI.Group.uploadPicture(ctx, group.id, getPictureStream, null, function(err) {
                        assert.ok(!err);
                        verifyCropping(ctx, group.id, createSelectedArea(-10, 10, 200, 200), 400, function() {
                            verifyCropping(ctx, group.id, createSelectedArea(10, -10, 200, 200), 400, function() {
                                verifyCropping(ctx, group.id, createSelectedArea(-10, -10, 200, 200), 400, function() {
                                    verifyCropping(ctx, group.id, createSelectedArea(10, 10, 200, 200), undefined, function() {
                                        // Download the different sizes.
                                        RestAPI.Group.downloadPicture(ctx, group.id, 'small', function(err, body, request) {
                                            assert.ok(!err);
                                            assert.ok(request.statusCode, 204);
                                            RestAPI.Group.downloadPicture(ctx, group.id, 'medium', function(err, body, request) {
                                                assert.ok(!err);
                                                assert.ok(request.statusCode, 204);
                                                RestAPI.Group.downloadPicture(ctx, group.id, 'large', function(err, body, request) {
                                                    assert.ok(!err);
                                                    assert.ok(request.statusCode, 204);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify visibility', function(callback) {
            createUsers(function(contexts) {
                var selectedArea = createSelectedArea(10, 10, 200, 200);
                RestAPI.User.uploadPicture(contexts['simon'], contexts['simon'].userObj.id, getPictureStream, selectedArea, function(err) {
                    assert.ok(!err);

                    RestAPI.User.updateUser(contexts['simon'], contexts['simon'].userObj.id, {'visibility': 'private'}, function(err) {
                        assert.ok(!err);

                        RestAPI.User.getUser(contexts['nicolaas'], contexts['simon'].userObj.id, function(err, user) {
                            assert.ok(!err);
                            assert.equal(user.smallPicture, undefined);
                            assert.equal(user.profile.smallPictureUri, undefined);
                            assert.equal(user.mediumPicture, undefined);
                            assert.equal(user.profile.mediumPictureUri, undefined);
                            assert.equal(user.largePicture, undefined);
                            assert.equal(user.profile.largePictureUri, undefined);

                            RestAPI.User.getUser(anonymousRestContext, contexts['simon'].userObj.id, function(err, user) {
                                assert.ok(!err);
                                assert.equal(user.smallPicture, undefined);
                                assert.equal(user.profile.smallPictureUri, undefined);
                                assert.equal(user.mediumPicture, undefined);
                                assert.equal(user.profile.mediumPictureUri, undefined);
                                assert.equal(user.largePicture, undefined);
                                assert.equal(user.profile.largePictureUri, undefined);

                                RestAPI.User.updateUser(contexts['simon'], contexts['simon'].userObj.id, {'visibility': 'loggedin'}, function(err) {
                                    assert.ok(!err);

                                    RestAPI.User.getUser(contexts['nicolaas'], contexts['simon'].userObj.id, function(err, user) {
                                        assert.ok(!err);
                                        assert.ok(user.smallPicture);
                                        assert.ok(user.profile.smallPictureUri);
                                        assert.ok(user.mediumPicture);
                                        assert.ok(user.profile.mediumPictureUri);
                                        assert.ok(user.largePicture);
                                        assert.ok(user.profile.largePictureUri);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});