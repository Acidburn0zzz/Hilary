/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Context = require('oae-context').Context;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;

var User = require('oae-principals/lib/model.user').User;
var PrincipalsAPI = require('oae-principals');


describe('Group REST endpoints', function() {

    var johnRestContext = null;

    /**
     * Function that will create a user that will be used inside of the tests
     */
    before(function(callback) {
        var r = Math.floor(Math.random() * 100000);
        PrincipalsAPI.createUser(new Context(global.oaeTests.tenants.cam, null), 'john-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, id) {
            johnRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, 'john-' + r, 'password');
            callback();
        });
    });

    describe('#createGroup()', function() {

        /**
         * Test that verifies that a group cannot be created when no group alias is provided
         */
        it('verify missing alias', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, undefined, 'Group name', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group cannot be created when the provided group alias contains a colon ':'
         */
        it('verify alias with colons', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'sneaky:alias', 'Group name', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a visibility setting creates the group with the default tenant
         * group visibility setting
         */
        it('verify that missing visibility uses tenant default', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', undefined, 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.visibility, 'public')
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a joinability setting creates the group with the default tenant
         * group joinability setting
         */
        it('verify that missing joinable uses tenant default', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', undefined, [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.joinable, 'yes')
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a description creates a valid group
         */
        it('verify that missing description is accepted', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', null, 'public', undefined, [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.description, '');
                callback();
            });
        });
        
        /**
         * Test that verifies that a group created with an invalid group manager does not succeed
         */
        it('verify that group creation fails if an invalid userId is specified as manager', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', ['totally-invalid'], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with an invalid group member does not succeed
         */
        it('verify that group creation fails if an invalid userId is specified as member', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', [], ['totally-invalid'], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with a non-existing group manager does not succeed
         */
        it('verify that group creation fails if an unknown user is specified as manager', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', ['u:camtest:totally-unknown'], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with a non-existing group member does not succeed
         */
        it('verify that group creation fails if an unknown user is specified as member', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', [], ['u:camtest:totally-unknown'], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a list of members and meanagers can be passed in during group creation
         */
        it('verify that members can be specified on group creation', function(callback) {
            // Create 2 users.
            // We'll make jane a group manager and jack a group member
            var r = Math.floor(Math.random() * 100000);
            PrincipalsAPI.createUser(new Context(global.oaeTests.tenants.cam, null), 'jack-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                assert.ok(!err);
                PrincipalsAPI.createUser(new Context(global.oaeTests.tenants.cam, null), 'jane-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);
                    RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', [jane], [jack], function(err, groupObj) {
                        assert.ok(!err);
                        assert.ok(groupObj.id, 'group-' + r);
                        assert.ok(groupObj.name, 'Group title');
                        callback();
                        // Get the members of this group.
                        /* RestAPI.Groups.getGroupMembers(johnCtx, data.id, undefined, undefined, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.length, 3);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(members, function(member) { return member.profile.id; })
                            assert.equal(hash[jack][0].role, 'member');
                            assert.equal(hash[jane][0].role, 'manager');
                            assert.equal(hash[johnCtx.user.id][0].role, 'manager');
                            callback();
                        }); */
                    });
                });
            });
        });

        /**
         * Test that verifies that group creation is successful when all of the parameters have been provided
         */
        it('verify that group creation succeeds given a valid request', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.ok(groupObj.id, 'group-' + r);
                assert.ok(groupObj.name, 'Group title');
                callback();
            });
        });

        /**
         * Test that verifies that a group cannot be created with an alias that is already in use
         */
        it('verify that group creation with duplicate alias fails', function(callback) {
            var r = Math.floor(Math.random() * 100000);
            RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.ok(groupObj.id, 'group-' + r);
                assert.ok(groupObj.name, 'Group title');
                // Create the same one again, should fail.
                RestAPI.Group.createGroup(johnRestContext, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

    });


/*
        




    describe('#getGroup()', function() {

        it('verify isMember and isManager', function(callback) {
            // Create 3 users.
            // We'll make jane a group manager and jack a group member
            // Joe won't be a member of the group.
            var r = Math.floor(Math.random()*100000);
            PrincipalsAPI.createUser(tenantCtx, 'jack-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                assert.ok(!err);
                var jackCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jack, 'password');

                PrincipalsAPI.createUser(tenantCtx, 'jane-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);
                    var janeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jane, 'password');

                    PrincipalsAPI.createUser(tenantCtx, 'joe-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, joe) {
                        assert.ok(!err);
                        var joeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, joe, 'password');

                        RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'public', 'yes', [jane], [jack], function(err, newGroup) {
                            assert.ok(!err);

                            RestAPI.Groups.getGroup(johnCtx, newGroup.id, function(err, groupData) {
                                assert.ok(!err);
                                assert.ok(groupData.isMember);
                                assert.ok(groupData.isManager);

                                RestAPI.Groups.getGroup(jackCtx, newGroup.id, function(err, groupData) {
                                    assert.ok(!err);
                                    assert.ok(groupData.isMember);
                                    assert.ok(!groupData.isManager);
                                    RestAPI.Groups.getGroup(janeCtx, newGroup.id, function(err, groupData) {
                                        assert.ok(!err);
                                        assert.ok(groupData.isMember);
                                        assert.ok(groupData.isManager);
                                        RestAPI.Groups.getGroup(joeCtx, newGroup.id, function(err, groupData) {
                                            assert.ok(!err);
                                            assert.ok(!groupData.isMember);
                                            assert.ok(!groupData.isManager);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify group properties', function(callback) {
            var r = Math.floor(Math.random()*100000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Groups.getGroup(johnCtx, newGroup.id, function(err, groupData) {
                    assert.ok(!err);
                    assert.ok(groupData.isMember);
                    assert.ok(groupData.isManager);
                    assert.equal(groupData.alias, 'group-' + r);
                    assert.equal(groupData.name, 'Group title');
                    assert.equal(groupData.description, 'Group description');
                    assert.equal(groupData.visibility, 'private');
                    assert.equal(groupData.joinable, 'request');
                    callback();
                });
            });
        });

        it('verify non existing group', function(callback) {
            RestAPI.Groups.getGroup(johnCtx, 'g:camtest:totally-unknown', function(err, groupData) {
                assert.equal(err.code, 404);
                callback();
            });
        });
    });

    describe('#getGroupMembers()', function() {
        it('verify paging', function(callback) {
            // Create 10 users and get pages of 4.
            var userIds = [];
            var userCreated = function(err, userId) {
                assert.ok(!err);
                userIds.push(userId);
                if (userIds.length === 10) {
                    // Add them to a group.
                    RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], userIds, function(err, newGroup) {

                        var shouldBeSortedArray = [];
                        RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, 4, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.length, 4);
                            for (var i = 0; i < 4; i++) {
                                shouldBeSortedArray.push(members[i].profile.id);
                            }
                            RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, members[3].profile.id, 4, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.length, 4);
                                for (var i = 0; i < 4; i++) {
                                    shouldBeSortedArray.push(members[i].profile.id);
                                }
                                // Get the remaining 3
                                RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, members[3].profile.id, 4, function(err, members) {
                                    assert.ok(!err);
                                    assert.equal(members.length, 3);
                                    for (var i = 0; i < 3; i++) {
                                        shouldBeSortedArray.push(members[i].profile.id);
                                    }

                                    // Make sure the shouldBeSortedArray is actually sorted.
                                    for (var i = 1; i < shouldBeSortedArray.length;i++) {
                                        if (shouldBeSortedArray[i-1] > shouldBeSortedArray[i]) {
                                            assert.fail('The members did not return in a sorted fashion.');
                                        }
                                    }
                                    callback();
                                });
                            });
                        });
                    });
                }
            };

            for (var i = 0; i < 10; i++) {
                var r = Math.floor(Math.random()*10000000);
                PrincipalsAPI.createUser(tenantCtx, 'random-user-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', userCreated);
            }
        });

        it('verify non existing group', function(callback) {
            RestAPI.Groups.getGroupMembers(johnCtx, 'g:camtest:totally-unknown', null, null, function(err, groupData) {
                assert.equal(err.code, 404);
                callback();
            });
        });

        it('verify parameter validation', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, 'totally-not-a-number', function(err, members) {
                    assert.equal(err.code, 400);
                    RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, -10, function(err, members) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        it('verify default 10 members', function(callback) {
            // Create 15 users and retrieve a single page.
            // This should contain 10 members.
            var userIds = [];
            var userCreated = function(err, userId) {
                assert.ok(!err);
                userIds.push(userId);
                if (userIds.length === 15) {
                    // Add them to a group.
                    RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], userIds, function(err, newGroup) {
                        RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, null, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.length, 10);
                            callback();
                        });
                    });
                }
            };

            for (var i = 0; i < 15; i++) {
                var r = Math.floor(Math.random() * 10000000);
                PrincipalsAPI.createUser(tenantCtx, 'random-user-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', userCreated);
            }
        });
    });

    describe('#updateGroup()', function() {
        it ('verify successful update', function(callback) {
            var r = Math.floor(Math.random() * 10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                var profileFields = {
                    'name': 'new group name',
                    'description': 'new group description',
                    'visibility': 'loggedin',
                    'joinable': 'yes'
                };
                RestAPI.Groups.updateGroup(johnCtx, newGroup.id, profileFields, function(err) {
                    assert.ok(!err);
                    RestAPI.Groups.getGroup(johnCtx, newGroup.id, function(err, group) {
                        assert.ok(!err);
                        assert.equal(group.name, 'new group name');
                        assert.equal(group.description, 'new group description');
                        assert.equal(group.visibility, 'loggedin');
                        assert.equal(group.joinable, 'yes');
                        callback();
                    });
                });
            });
        });

        it ('verify no parameters', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Groups.updateGroup(johnCtx, newGroup.id, {}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        it ('verify invalid joinable', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Groups.updateGroup(johnCtx, newGroup.id, {'joinable': 'invalid'}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        it('verify invalid visibility', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Groups.updateGroup(johnCtx, newGroup.id, {'visibility': 'invalid'}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        it('verify updating as a non-manager is not allowed', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                PrincipalsAPI.createUser(tenantCtx, 'jack-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jack, 'password');

                    RestAPI.Groups.updateGroup(jackCtx, newGroup.id, {'visibility': 'public'}, function(err) {
                        assert.equal(err.code, 401);
                        callback();
                    });
                });
            });
        });
    });

    describe('#setGroupMembers()', function() {

        it('verify combination of roles is possible', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                PrincipalsAPI.createUser(tenantCtx, 'jack-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jack, 'password');

                    PrincipalsAPI.createUser(tenantCtx, 'jane-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                        assert.ok(!err);
                        var janeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jane, 'password');

                        PrincipalsAPI.createUser(tenantCtx, 'joe-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, joe) {
                            assert.ok(!err);
                            var joeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, joe, 'password');

                            var members = {};
                            members[jackCtx.user.id] = 'member'
                            members[joeCtx.user.id] = 'member'
                            members[janeCtx.user.id] = 'manager'
                            RestAPI.Groups.setGroupMembers(johnCtx, newGroup.id, members, function(err) {
                                assert.ok(!err);
                                // Verify that each member has the correct role.
                                RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, null, function(err, members) {
                                    assert.ok(!err);
                                    var memberHash = _.groupBy(members, function(member) { return member.profile.id; });
                                    assert.equal(members.length, 4); // Jack, Jane, Joe and John (creator)
                                    assert.equal(memberHash[jackCtx.user.id][0].role, 'member');
                                    assert.equal(memberHash[joeCtx.user.id][0].role, 'member');
                                    assert.equal(memberHash[janeCtx.user.id][0].role, 'manager');

                                    // Delete Joe.
                                    members = {};
                                    members[joeCtx.user.id] = false;
                                    RestAPI.Groups.setGroupMembers(johnCtx, newGroup.id, members, function(err) {
                                        assert.ok(!err);
                                        // Get Group members.
                                        RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, null, function(err, members) {
                                            assert.ok(!err);
                                            var memberHash = _.groupBy(members, function(member) { return member.profile.id; });
                                            assert.equal(members.length, 3); // Jack, Jane and John (creator)
                                            assert.ok(!memberHash[joeCtx.user.id]);

                                            // Make sure that joe can't see the group in his membership list
                                            RestAPI.Groups.getMembershipForUser(joeCtx, joeCtx.user.id, null, null, function(err, groups) {
                                                assert.ok(!err);
                                                assert.equal(groups.length, 0);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#memberOf()', function() {
        it('verify validation', function(callback) {
            callback();
        });

        it('verify it actually works', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            PrincipalsAPI.createUser(tenantCtx, 'jack-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                assert.ok(!err);
                var jackCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jack, 'password');

                PrincipalsAPI.createUser(tenantCtx, 'jane-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);
                    var janeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jane, 'password');

                    var r = Math.floor(Math.random()*10000000);
                    RestAPI.Groups.createGroup(jackCtx, 'alfa-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                        var r = Math.floor(Math.random()*10000000);
                        RestAPI.Groups.createGroup(jackCtx, 'beta-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                            RestAPI.Groups.getMembershipForUser(jackCtx, jackCtx.user.id, null, null, function(err, groups) {
                                assert.equal(groups.length, 2);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#exists()', function() {
        it('verify group existance', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                RestAPI.Groups.exists(johnCtx, 'group-' + r, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists, "Expected the group to exist");
                    RestAPI.Groups.exists(johnCtx, 'some-none-existing-alias', function(err, exists) {
                        assert.ok(!err);
                        assert.ok(!exists, "Expected the group not to exist.");
                        callback();
                    });
                });
            });
        });
    }); */
});