/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var Context = require('oae-context').Context;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var User = require('oae-principals/lib/model.user').User;
//var PrincipalsAPI = require('oae-principals');


describe('Groups', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a global admin
    var camAdminRestContext = null;
    // Rest context for a user that will be used inside of the tests
    var johnRestContext = null;

    /**
     * Function that will create a user that will be used inside of the tests
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.getAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the rest context for our test user
        var userId = TestsUtil.generateTestUserId('john');
        RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, createdUser) {
            johnRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password');
            // Add the full user id onto the REST context for use inside of this test
            johnRestContext.id = createdUser.id;
            callback();
        });
    });


    describe('#createGroup()', function() {

        /**
         * Test that verifies that group creation is successful when all of the parameters have been provided
         */
        it('verify that group creation succeeds given a valid request', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.ok(groupObj.id, groupId);
                assert.ok(groupObj.name, 'Group title');
                callback();
            });
        });

        /**
         * Test that verifies that a group cannot be created when no group alias is provided
         */
        it('verify missing alias', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, undefined, 'Group name', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group cannot be created when the provided group alias contains a colon ':'
         */
        it('verify alias with colons', function(callback) {
            RestAPI.Group.createGroup(johnRestContext, 'sneaky:alias', 'Group name', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a visibility setting creates the group with the default tenant
         * group visibility setting
         */
        it('verify that missing visibility uses tenant default', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', undefined, 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.visibility, 'public')
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a joinability setting creates the group with the default tenant
         * group joinability setting
         */
        it('verify that missing joinable uses tenant default', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', undefined, [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.joinable, 'yes')
                callback();
            });
        });

        /**
         * Test that verifies that a group created without a description creates a valid group
         */
        it('verify that missing description is accepted', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', null, 'public', undefined, [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.equal(groupObj.description, '');
                callback();
            });
        });
        
        /**
         * Test that verifies that a group created with an invalid group manager does not succeed
         */
        it('verify that group creation fails if an invalid userId is specified as manager', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', ['totally-invalid'], [], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with an invalid group member does not succeed
         */
        it('verify that group creation fails if an invalid userId is specified as member', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], ['totally-invalid'], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with a non-existing group manager does not succeed
         */
        it('verify that group creation fails if an unknown user is specified as manager', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', ['u:camtest:totally-unknown'], [], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a group created with a non-existing group member does not succeed
         */
        it('verify that group creation fails if an unknown user is specified as member', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], ['u:camtest:totally-unknown'], function(err, groupObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                callback();
            });
        });

        /**
         * Test that verifies that a list of members and meanagers can be passed in during group creation
         */
        it('verify that members can be specified on group creation', function(callback) {
            // Create 2 users.
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var janeUserId = TestsUtil.generateTestUserId('jane');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                assert.ok(!err);
                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);

                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [jane.id], [jack.id], function(err, groupObj) {
                        assert.ok(!err);
                        assert.ok(groupObj.id, groupId);
                        assert.ok(groupObj.name, 'Group title');
                        // Get the members of this group.
                        RestAPI.Group.getGroupMembers(johnRestContext, groupObj.id, undefined, undefined, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.length, 3);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(members, function(member) { return member.profile.id; })
                            assert.equal(hash[jack.id][0].role, 'member');
                            assert.equal(hash[jane.id][0].role, 'manager');
                            assert.equal(hash[johnRestContext.id][0].role, 'manager');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a group cannot be created with an alias that is already in use
         */
        it('verify that group creation with duplicate alias fails', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                assert.ok(!err);
                assert.ok(groupObj.id, groupId);
                assert.ok(groupObj.name, 'Group title');
                // Create the same one again, should fail.
                RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [], [], function(err, groupObj) {
                    assert.ok(err);
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

    });

    
    describe('#getGroup()', function() {

        /**
         * Test that verifies that an existing group can be successfully retrieved
         */
        it('verify group properties', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, groupObj) {
                assert.ok(!err);
                RestAPI.Group.getGroup(johnRestContext, groupObj.id, function(err, groupData) {
                    assert.ok(!err);
                    assert.ok(groupData.isMember);
                    assert.ok(groupData.isManager);
                    assert.equal(groupData.alias, groupId);
                    assert.equal(groupData.name, 'Group title');
                    assert.equal(groupData.description, 'Group description');
                    assert.equal(groupData.visibility, 'private');
                    assert.equal(groupData.joinable, 'request');
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a non-existing group cannot be retrieved
         */
        it('verify non existing group', function(callback) {
            RestAPI.Group.getGroup(johnRestContext, 'g:camtest:totally-unknown', function(err, groupData) {
                assert.ok(err);
                assert.equal(err.code, 404);
                callback();
            });
        });
        
        /**
         * Test that verifies that the isMember and isManager property is properly set on the 
         * group profile in different situations
         */
        it('verify isMember and isManager', function(callback) {
            // Create 3 users.
            // We'll make jane a group manager and jack a group member
            // Joe won't be a member of the group.
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var janeUserId = TestsUtil.generateTestUserId('jane');
            var joeUserId = TestsUtil.generateTestUserId('joe');

            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                assert.ok(!err);
                var jackRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, jackUserId, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);
                    var janeRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, janeUserId, 'password');

                    RestAPI.User.createUser(camAdminRestContext, joeUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, joe) {
                        assert.ok(!err);
                        var joeRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, joeUserId, 'password');

                        // Create a group in which Jane is a manager and Jack is a member
                        var groupId = TestsUtil.generateTestGroupId();
                        RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'public', 'yes', [jane.id], [jack.id], function(err, newGroup) {
                            assert.ok(!err);

                            // For each of the users, check the appropriate value of the isMember and isManager property
                            RestAPI.Group.getGroup(johnRestContext, newGroup.id, function(err, groupData) {
                                assert.ok(!err);
                                assert.ok(groupData.isMember);
                                assert.ok(groupData.isManager);

                                RestAPI.Group.getGroup(jackRestContext, newGroup.id, function(err, groupData) {
                                    assert.ok(!err);
                                    assert.ok(groupData.isMember);
                                    assert.ok(!groupData.isManager);
                                    
                                    RestAPI.Group.getGroup(janeRestContext, newGroup.id, function(err, groupData) {
                                        assert.ok(!err);
                                        assert.ok(groupData.isMember);
                                        assert.ok(groupData.isManager);
                                        
                                        RestAPI.Group.getGroup(joeRestContext, newGroup.id, function(err, groupData) {
                                            assert.ok(!err);
                                            assert.ok(!groupData.isMember);
                                            assert.ok(!groupData.isManager);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

    });


    describe('#updateGroup()', function() {

        /**
         * Test that verifies that a group can be successfully update with multiple fields
         * at the same time
         */
        it ('verify successful update', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                var profileFields = {
                    'name': 'new group name',
                    'description': 'new group description',
                    'visibility': 'loggedin',
                    'joinable': 'yes'
                };
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, profileFields, function(err) {
                    assert.ok(!err);
                    RestAPI.Group.getGroup(johnRestContext, newGroup.id, function(err, group) {
                        assert.ok(!err);
                        assert.equal(group.id, newGroup.id);
                        assert.equal(group.name, 'new group name');
                        assert.equal(group.description, 'new group description');
                        assert.equal(group.visibility, 'loggedin');
                        assert.equal(group.joinable, 'yes');
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that updating a group with no parameters fails
         */
        it ('verify no parameters', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, {}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that an unrecognized joinability option causes the update to fail
         */
        it ('verify invalid joinable', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, {'joinable': 'invalid'}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that an unrecognized visibility option causes the update to fail
         */
        it('verify invalid visibility', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                RestAPI.Group.updateGroup(johnRestContext, newGroup.id, {'visibility': 'invalid'}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a non-manager of a group cannot update the group
         */
        it('verify updating as a non-manager is not allowed', function(callback) {
            // We create 2 users. Jack will be a member, Jane will not be a member
            var jackUserId = TestsUtil.generateTestUserId('jack');
            var janeUserId = TestsUtil.generateTestUserId('jane');
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                assert.ok(!err);
                var jackRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, jackUserId, 'password');

                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);
                    var janeRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, janeUserId, 'password');

                    // Create the group with Jack as a member
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [jack.id], function(err, newGroup) {
                        assert.ok(!err);
        
                        // Try to update the group as a member
                        RestAPI.Group.updateGroup(jackRestContext, newGroup.id, {'visibility': 'public'}, function(err) {
                            assert.equal(err.code, 401);
                            // Try to update the group as a non-member
                            RestAPI.Group.updateGroup(janeRestContext, newGroup.id, {'visibility': 'public'}, function(err) {
                                assert.equal(err.code, 401);
                                // Try to update the group as an anonymous user
                                RestAPI.Group.updateGroup(new RestContext(global.oaeTests.tenants.cam.baseUrl), newGroup.id, {'visibility': 'public'}, function(err) {
                                    assert.equal(err.code, 401);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

    });

    
    describe('#getGroupMembers()', function() {
        
        /**
         * Test that verifies that all group managers and members are returned appropriately
         */
        it('verify get group members', function(callback) {
            // Create 3 manager users
            TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, managerUsers) {
                assert.ok(!err);
                var managerUserIds = _.keys(managerUsers);
                // Create 3 member users
                TestsUtil.generateTestUsers(camAdminRestContext, 3, function(err, memberUsers) {
                    assert.ok(!err);
                    var memberUserIds = _.keys(memberUsers);
                    // Create the actual group
                    var groupId = TestsUtil.generateTestGroupId();
                    RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', managerUserIds, memberUserIds, function(err, newGroup) {
                        assert.ok(!err);
                        // Get the group members
                        RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, 10, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.length, 7);
                            // Morph results to hash for easy access.
                            var hash = _.groupBy(members, function(member) { return member.profile.id; });
                            // Make sure that all of the expected members are there
                            assert.equal(hash[johnRestContext.id][0].role, 'manager');
                            assert.equal(hash[managerUserIds[0]][0].role, 'manager');
                            assert.equal(hash[managerUserIds[1]][0].role, 'manager');
                            assert.equal(hash[managerUserIds[2]][0].role, 'manager');
                            assert.equal(hash[memberUserIds[0]][0].role, 'member');
                            assert.equal(hash[memberUserIds[1]][0].role, 'member');
                            assert.equal(hash[memberUserIds[2]][0].role, 'member');
                            callback();
                        });
                    });
                });
            });
        });
        
        /**
         * Test that verifies that the group members of a non-existing group cannot be retrieved
         */
        it('verify non existing group', function(callback) {
            RestAPI.Group.getGroupMembers(johnRestContext, 'g:camtest:totally-unknown', null, null, function(err, members) {
                assert.equal(err.code, 404);
                callback();
            });
        });
        
        /**
         * Test that verifies that group members of private groups are only returned for members of that group. Non-members
         * should not be able to see the list of members
         */
        it('verify respect visibility', function(callback) {
            // Create the user
            var brandenUserId = TestsUtil.generateTestUserId('mrvisser');
            RestAPI.User.createUser(camAdminRestContext, brandenUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);
                var brandenRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, brandenUserId, 'password');

                // Create a group
                RestAPI.Group.createGroup(johnRestContext, 'non-canadians', "Non-Canadians", "Group", 'private', 'yes', [], [], function(err, nonCanadiansGroup) {
                    assert.ok(!err);

                    // Branden should not be able to see the group members
                    RestAPI.Group.getGroupMembers(brandenRestContext, nonCanadiansGroup.id, null, null, function(err, members) {
                        assert.ok(err);
                        assert.equal(err.code, 401);
                        assert.ok(!members);
                        callback();
                    });
                });
            });
        });
        
        /**
         * Test that verifies that group members are page appropriately and are sorted by userid
         */
        it('verify paging', function(callback) {
            // Create 10 users and get pages of 4.
            TestsUtil.generateTestUsers(camAdminRestContext, 10, function(err, createdUsers) {
                assert.ok(!err);
                var userIds = _.keys(createdUsers);

                // Add them to a group.
                var groupId = TestsUtil.generateTestGroupId();
                RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], userIds, function(err, newGroup) {

                    var shouldBeSortedArray = [];
                    RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, 4, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.length, 4);
                        for (var i = 0; i < 4; i++) {
                            shouldBeSortedArray.push(members[i].profile.id);
                        }
                        RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, members[3].profile.id, 4, function(err, members) {
                            assert.ok(!err);
                            assert.equal(members.length, 4);
                            for (var i = 0; i < 4; i++) {
                                shouldBeSortedArray.push(members[i].profile.id);
                            }
                            // Get the remaining 3
                            RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, members[3].profile.id, 4, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.length, 3);
                                for (var i = 0; i < 3; i++) {
                                    shouldBeSortedArray.push(members[i].profile.id);
                                }

                                // Make sure the shouldBeSortedArray is actually sorted.
                                for (var i = 1; i < shouldBeSortedArray.length;i++) {
                                    if (shouldBeSortedArray[i-1] > shouldBeSortedArray[i]) {
                                        assert.fail('The members did not return in a sorted fashion.');
                                    }
                                }
                                callback();
                            });
                        });
                    });
                
                });
            });
        });

        /**
         * Test that verifies that passing an invalid number of results that should be returned causes the
         * request to fail
         */
        it('verify parameter validation', function(callback) {
            var groupId = TestsUtil.generateTestGroupId();
            RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, 'totally-not-a-number', function(err, members) {
                    assert.equal(err.code, 400);
                    RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, -10, function(err, members) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a default number of 10 users are returned when no page size has been
         * specified
         */
        it('verify default 10 members', function(callback) {
            // Create 15 users and retrieve a single page.
            // This should contain 10 members.
            TestsUtil.generateTestUsers(camAdminRestContext, 15, function(err, createdUsers) {
                assert.ok(!err);
                var userIds = _.keys(createdUsers);
                // Add them to a group.
                var groupId = TestsUtil.generateTestGroupId();
                RestAPI.Group.createGroup(johnRestContext, groupId, 'Group title', 'Group description', 'private', 'request', [], userIds, function(err, newGroup) {
                    RestAPI.Group.getGroupMembers(johnRestContext, newGroup.id, null, null, function(err, members) {
                        assert.ok(!err);
                        assert.equal(members.length, 10);
                        callback();
                    });
                });
            });
        });

    });


    describe('#setGroupMembers()', function() {

        /**
         * TODO
         */
        it('verify simple member adding', function(callback) {
            // TODO
            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        PrincipalsAPI.createGroup(mrvisserCtx, 'managed-by-canadians', "Managed by Canadians", "Group", 'public', 'yes', [], {}, function(err, groupUuid) {
                            assert.ok(!err);
                
                            // 2. try and add simong to it with an unprivileged user
                            PrincipalsAPI.setGroupMembers(simongCtx, groupUuid, toRoleObj(simong.id, 'member'), function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);
                
                                // verify simong was not added
                                PrincipalsAPI.memberOf(nicoCtx, nicoCtx.user().id, null, null, function(err, groups) {
                                    assert.ok(!err);
                                    assert.equal(_.keys(groups).length, 0);
                
                                    // 3. add nico as member, then ensure he still cannot add
                                    PrincipalsAPI.setGroupMembers(mrvisserCtx, groupUuid, toRoleObj(nico.id, 'member'), function(err) {
                                        assert.ok(!err);
                
                                        PrincipalsAPI.setGroupMembers(nicoCtx, groupUuid, toRoleObj(simong.id, 'member'), function(err) {
                                            assert.ok(err);
                                            assert.ok(err.code, 401);
                
                                            PrincipalsAPI.memberOf(simongCtx, simongCtx.user().id, null, null, function(err, groups) {
                                                assert.ok(!err);
                                                assert.equal(_.keys(groups).length, 0);
                
                                                // 4. add Nico as manager, ensure he can now add
                                                PrincipalsAPI.setGroupMembers(mrvisserCtx, groupUuid, toRoleObj(nico.id, 'manager'), function(err) {
                                                    assert.ok(!err);
                
                                                    PrincipalsAPI.setGroupMembers(nicoCtx, groupUuid, toRoleObj(simong.id, 'member'), function(err) {
                                                        assert.ok(!err);
                
                                                        PrincipalsAPI.memberOf(simongCtx, simongCtx.user().id, null, null, function(err, groups) {
                                                            assert.ok(!err);
                                                            assert.equal(_.keys(groups).length, 1);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * TODO
         *
        it('verify combination of roles is possible', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                assert.ok(!err);
                PrincipalsAPI.createUser(tenantCtx, 'jack-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                    assert.ok(!err);
                    var jackCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jack, 'password');

                    PrincipalsAPI.createUser(tenantCtx, 'jane-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                        assert.ok(!err);
                        var janeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jane, 'password');

                        PrincipalsAPI.createUser(tenantCtx, 'joe-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, joe) {
                            assert.ok(!err);
                            var joeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, joe, 'password');

                            var members = {};
                            members[jackCtx.user.id] = 'member'
                            members[joeCtx.user.id] = 'member'
                            members[janeCtx.user.id] = 'manager'
                            RestAPI.Groups.setGroupMembers(johnCtx, newGroup.id, members, function(err) {
                                assert.ok(!err);
                                // Verify that each member has the correct role.
                                RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, null, function(err, members) {
                                    assert.ok(!err);
                                    var memberHash = _.groupBy(members, function(member) { return member.profile.id; });
                                    assert.equal(members.length, 4); // Jack, Jane, Joe and John (creator)
                                    assert.equal(memberHash[jackCtx.user.id][0].role, 'member');
                                    assert.equal(memberHash[joeCtx.user.id][0].role, 'member');
                                    assert.equal(memberHash[janeCtx.user.id][0].role, 'manager');

                                    // Delete Joe.
                                    members = {};
                                    members[joeCtx.user.id] = false;
                                    RestAPI.Groups.setGroupMembers(johnCtx, newGroup.id, members, function(err) {
                                        assert.ok(!err);
                                        // Get Group members.
                                        RestAPI.Groups.getGroupMembers(johnCtx, newGroup.id, null, null, function(err, members) {
                                            assert.ok(!err);
                                            var memberHash = _.groupBy(members, function(member) { return member.profile.id; });
                                            assert.equal(members.length, 3); // Jack, Jane and John (creator)
                                            assert.ok(!memberHash[joeCtx.user.id]);

                                            // Make sure that joe can't see the group in his membership list
                                            RestAPI.Groups.getMembershipForUser(joeCtx, joeCtx.user.id, null, null, function(err, groups) {
                                                assert.ok(!err);
                                                assert.equal(groups.length, 0);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * TODO
         * Test to verify that it should not be possible to add members as an unprivileged user
         *
        it('Test add members no access', function(callback) {
            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        PrincipalsAPI.createGroup(mrvisserCtx, 'managed-by-canadians', "Managed by Canadians", "Group", 'public', 'yes', [], {}, function(err, groupUuid) {
                            assert.ok(!err);

                            // 2. try and add simong to it with an unprivileged user
                            PrincipalsAPI.setGroupMembers(nicoCtx, groupUuid, toRoleObj(simong.id, 'member'), function(err) {
                                assert.ok(err);
                                assert.equal(err.code, 401);

                                // verify simong was not added
                                PrincipalsAPI.memberOf(simongCtx, simongCtx.user().id, null, null, function(err, groups) {
                                    assert.ok(!err);
                                    assert.equal(_.keys(groups).length, 0);

                                    // 3. add nico as member, then ensure he still cannot add
                                    PrincipalsAPI.setGroupMembers(mrvisserCtx, groupUuid, toRoleObj(nico.id, 'member'), function(err) {
                                        assert.ok(!err);

                                        PrincipalsAPI.setGroupMembers(nicoCtx, groupUuid, toRoleObj(simong.id, 'member'), function(err) {
                                            assert.ok(err);
                                            assert.ok(err.code, 401);

                                            PrincipalsAPI.memberOf(simongCtx, simongCtx.user().id, null, null, function(err, groups) {
                                                assert.ok(!err);
                                                assert.equal(_.keys(groups).length, 0);

                                                // 4. add Nico as manager, ensure he can now add
                                                PrincipalsAPI.setGroupMembers(mrvisserCtx, groupUuid, toRoleObj(nico.id, 'manager'), function(err) {
                                                    assert.ok(!err);

                                                    PrincipalsAPI.setGroupMembers(nicoCtx, groupUuid, toRoleObj(simong.id, 'member'), function(err) {
                                                        assert.ok(!err);

                                                        PrincipalsAPI.memberOf(simongCtx, simongCtx.user().id, null, null, function(err, groups) {
                                                            assert.ok(!err);
                                                            assert.equal(_.keys(groups).length, 1);
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * TODO
         * Test to verify that it should be possible to add members by an indirect user
         *
        it('Test add members indirect access', function(callback) {
            // 1. create the users
            createAndGetUser(anonymousContext, 'mrvisser', 'password', 'public', 'Test', 'Runner', 'tr123', function(err, mrvisser) {
                assert.ok(!err);

                var mrvisserCtx = new Context(tenant, mrvisser);
                createAndGetUser(anonymousContext, 'nicolaas', 'password', 'public', 'Test1', 'Runner1', 'nicolaas', function(err, nico) {
                    assert.ok(!err);

                    var nicoCtx = new Context(tenant, nico);
                    createAndGetUser(anonymousContext, 'simong', 'password', 'public', 'Test2', 'Runner2', 'simong', function(err, simong) {
                        assert.ok(!err);

                        var simongCtx = new Context(tenant, simong);
                        PrincipalsAPI.createGroup(mrvisserCtx, 'managed-by-canadians', "Managed by Canadians", "Group", 'public', 'yes', [], {}, function(err, managedByCanadiansGroupUuid) {
                            assert.ok(!err);

                            // 2. Create and assign a group that will manage the managed-by-canadians group
                            PrincipalsAPI.createGroup(mrvisserCtx, 'canadians', "Canadians", "Group", 'public', 'yes', [], {}, function(err, canadiansGroupUuid) {
                                assert.ok(!err);

                                PrincipalsAPI.setGroupMembers(mrvisserCtx, managedByCanadiansGroupUuid, toRoleObj(canadiansGroupUuid, 'manager'), function(err) {
                                    assert.ok(!err);

                                    // 3. make nico a member of the 'canadians' group, then verify he can manage managed-by-canadians
                                    PrincipalsAPI.setGroupMembers(mrvisserCtx, canadiansGroupUuid, toRoleObj(nico.id, 'member'), function(err) {
                                        assert.ok(!err);

                                        // quick sanity check on the permission itself
                                        
                                        AuthzAPI.isAllowed(nico.id, 'manager', managedByCanadiansGroupUuid, function(err, isAllowed) {
                                            assert.ok(!err);
                                            assert.ok(isAllowed === true);

                                            // verify he can add someone
                                            PrincipalsAPI.setGroupMembers(nicoCtx, managedByCanadiansGroupUuid, toRoleObj(simong.id, 'member'), function(err) {
                                                assert.ok(!err);

                                                // verify it worked
                                                PrincipalsAPI.memberOf(simongCtx, simongCtx.user().id, null, null, function(err, groups) {
                                                    assert.ok(!err);
                                                    assert.ok(_.keys(groups).length, 1);
                                                    callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * TODO
         *
        it('Test that non-existing principals cannot be added to a group', function(callback) {
            createAndGetUser(anonymousContext, 'nico', 'password', 'private', 'Nicolaas', 'Matthijs', 'nico', function(err, nico) {
                assert.ok(!err);
                var nicoCtx = new Context(tenant, nico);
                createAndGetUser(anonymousContext, 'mrvsser', 'password', 'private', 'Branden', 'Visser', 'mrvisser', function(err, branden) {
                    assert.ok(!err);
                    var brandenCtx = new Context(tenant, branden);

                    PrincipalsAPI.createGroup(nicoCtx, "public-group", "Public Group", "This is a test group", 'public', 'yes', [], {}, function(err, publicGroup) {
                        assert.ok(!err);

                        var members = {'u:camtest:non-existing': 'member'};
                        members[branden.id] = 'member';
                        PrincipalsAPI.setGroupMembers(nicoCtx, publicGroup, members, function(err) {
                            assert.equal(err.code, 400);

                            // Assert that those principals were not added.
                            PrincipalsAPI.getGroupMembers(nicoCtx, publicGroup, null, null, function(err, members) {
                                assert.ok(!err);
                                assert.equal(members.length, 1);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * TODO
         *
        it('Test that a group cannot be made a member of itself', function(callback) {
            createAndGetUser(anonymousContext, 'nico', 'password', 'private', 'Nicolaas', 'Matthijs', 'nico', function(err, nico) {
                assert.ok(!err);
                var nicoCtx = new Context(tenant, nico);

                PrincipalsAPI.createGroup(nicoCtx, "public-group", "Public group", "This is a test group", 'public', 'yes', [], {}, function(err, publicGroup) {
                    assert.ok(!err);

                    PrincipalsAPI.setGroupMembers(nicoCtx, publicGroup, toRoleObj(publicGroup.id, 'member'), function(err) {
                        assert.equal(err.code, 400);
                        callback();
                    });
                });
            });
        }); */

    });












/*    

    

    describe('#memberOf()', function() {
        it('verify validation', function(callback) {
            callback();
        });

        it('verify it actually works', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            PrincipalsAPI.createUser(tenantCtx, 'jack-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'John Doe', function(err, jack) {
                assert.ok(!err);
                var jackCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jack, 'password');

                PrincipalsAPI.createUser(tenantCtx, 'jane-' + r, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);
                    var janeCtx = new RestAPI.Context(global.oaeTests.tenants.cam.baseUrl, jane, 'password');

                    var r = Math.floor(Math.random()*10000000);
                    RestAPI.Groups.createGroup(jackCtx, 'alfa-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                        var r = Math.floor(Math.random()*10000000);
                        RestAPI.Groups.createGroup(jackCtx, 'beta-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                            RestAPI.Groups.getMembershipForUser(jackCtx, jackCtx.user.id, null, null, function(err, groups) {
                                assert.equal(groups.length, 2);
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#exists()', function() {
        it('verify group existance', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            RestAPI.Groups.createGroup(johnCtx, 'group-' + r, 'Group title', 'Group description', 'private', 'request', [], [], function(err, newGroup) {
                RestAPI.Groups.exists(johnCtx, 'group-' + r, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists, "Expected the group to exist");
                    RestAPI.Groups.exists(johnCtx, 'some-none-existing-alias', function(err, exists) {
                        assert.ok(!err);
                        assert.ok(!exists, "Expected the group not to exist.");
                        callback();
                    });
                });
            });
        });
    }); */
});