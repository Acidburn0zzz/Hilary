/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var AuthzAPI = require('oae-authz');
var AuthzModel = require('oae-authz/lib/model');
var TenantAPI = require('oae-tenants');
var TestAPI = require('oae-tests');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');

//var request = TestAPI.Http.createRequest();

describe('Principals', function() {

    describe('User REST endpoints', function() {

        /*        

        it('Test making someone an admin', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                createUser(function(jane) {
                    var janeContext = new Context(tenantA, jane);

                    // Ensure that anonymous can't do anything.
                    PrincipalsAPI.setGlobalAdmin(anonymousContext, john.id, true, function(err) {
                        assert.equal(err.code, 401);
                        PrincipalsAPI.setTenantAdmin(anonymousContext, john.id, true, function(err) {
                            assert.equal(err.code, 401);

                            // John (a regular user) will try to make himself and jane an admin.
                            // Both should fail.
                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, true, function(err) {
                                assert.equal(err.code, 401);
                                PrincipalsAPI.setGlobalAdmin(johnContext, john.id, true, function(err) {
                                    assert.equal(err.code, 401);

                                    // This test makes John a global admin.
                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, john.id, true, function(err) {
                                        assert.ok(!err);
                                        // We'll need to get a new context as the old one has cached that john is not an admin.
                                        TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                            assert.ok(!err);
                                            assert.ok(johnContext.user().isGlobalAdmin());
                                            assert.ok(johnContext.user().isAdmin(tenantA.alias));
                                            assert.ok(!johnContext.user().isTenantAdmin(tenantB));

                                            // Now John should be able to make jane an admin.
                                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, true, function(err) {
                                                assert.ok(!err);

                                                // We'll need to get a new context for jane as the old one is stale.
                                                TestAPI.User.invalidateContext(janeContext, function(err, janeContext) {
                                                    assert.ok(!err);
                                                    assert.ok(janeContext.user().isGlobalAdmin());
                                                    assert.ok(janeContext.user().isAdmin(tenantA.alias));
                                                    assert.ok(!janeContext.user().isTenantAdmin(tenantB));

                                                    // If we revoke his global admin rights, he should not be able to revoke jane's admin rights.
                                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, john.id, false, function(err) {
                                                        assert.ok(!err);

                                                        TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                                            assert.ok(!err);
                                                            assert.ok(!johnContext.user().isGlobalAdmin());
                                                            assert.ok(!johnContext.user().isAdmin(tenantA.alias));
                                                            assert.ok(!johnContext.user().isTenantAdmin(tenantB.alias));

                                                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, false, function(err) {
                                                                assert.equal(err.code, 401);

                                                                // Make sure it didn't go trough.
                                                                TestAPI.User.invalidateContext(janeContext, function(err, janeContext) {
                                                                    assert.ok(!err);
                                                                    assert.ok(janeContext.user().isGlobalAdmin());
                                                                    assert.ok(janeContext.user().isAdmin(tenantA.alias));
                                                                    assert.ok(!janeContext.user().isTenantAdmin(tenantB.alias));
                                                                    callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * We'll make John a tenant admin who then attempts to set himself as a global admin.
         * This should not be allowed.
         *
        it('Test that a tenant admin can\'t create a global admin', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                // This test makes John a tenant admin.
                PrincipalsAPI.setTenantAdmin(globalAdminContext, john.id, true, function(err) {
                    assert.ok(!err);
                    // We'll need to get a new context as the old one has cached that john is not an admin.
                    TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                        assert.ok(!err);
                        assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));
                        assert.ok(!johnContext.user().isGlobalAdmin());
                        assert.ok(johnContext.user().isAdmin(tenantA.alias));

                        PrincipalsAPI.setGlobalAdmin(johnContext, john.id, true, function(err) {
                            assert.equal(err.code, 401);
                            // Invalidate to be absolutely sure.
                            TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                assert.ok(!err);
                                assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));
                                assert.ok(!johnContext.user().isGlobalAdmin());
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('Test admin parameter validation', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                // This test makes John a tenant admin.
                PrincipalsAPI.setTenantAdmin(globalAdminContext, 'non-existing-id', true, function(err) {
                    assert.equal(err.code, 400);

                    // Groups cannot be made admin.
                    PrincipalsAPI.setTenantAdmin(globalAdminContext, 'g:cam:group', true, function(err) {
                        assert.equal(err.code, 400);
                        PrincipalsAPI.setTenantAdmin(globalAdminContext, 'u:camtest:non-existing-id', true, function(err) {
                            assert.equal(err.code, 404);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Create three users: john, jack and jane. John and Jack are in tenant A, Jane is in tenant B.
         * Promote John to a tenant admin (for A) and try to update the profile info for Jack and Jane.
         * It should only work for Jack.
         *
        it('Verify that a tenant admin can only update users within his own tenant.', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            // John and Jack
            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                createUser(function(jack) {
                    var jackContext = new Context(tenantA, jack);

                    // Jane
                    var anonymousContextTenantB = new Context(tenantB, null);
                    PrincipalsAPI.createUser(anonymousContextTenantB, 'jane', 'password', 'public', 'en_GB', 'Europe/London', 'firstName', 'lastName', 'displayName', function(err, id) {
                        PrincipalsAPI.getUser(anonymousContextTenantB, id, function(err, jane) {

                            // Promote John
                            PrincipalsAPI.setTenantAdmin(globalAdminContext, john.id, true, function(err) {
                                assert.ok(!err);
                                // We'll need to get a new context as the old one has cached that john is not an admin.
                                TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                    assert.ok(!err);
                                    assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));

                                    // Try to update Jack.
                                    PrincipalsAPI.updateUser(johnContext, jack.id, {
                                        'visibility': 'private',
                                        'locale': 'en_CA',
                                        'timezone': 'Canada/Central',
                                        'firstName': 'Jack',
                                        'lastName': 'Doe',
                                        'displayName': 'Jack Doe'
                                    }, function(err) {
                                        assert.ok(!err);
                                        // Verify it.
                                        PrincipalsAPI.getUser(jackContext, jack.id, function(err, user) {
                                            assert.ok(!err);
                                            assert.equal(user.firstName, 'Jack');
                                            assert.equal(user.lastName, 'Doe');
                                            assert.equal(user.displayName, 'Jack Doe');
                                            // Try a password change
                                            PrincipalsAPI.changePassword(johnContext, jack.id, '', 'foobar', function(err) {
                                                assert.ok(!err);

                                                // Try Jane
                                                PrincipalsAPI.updateUser(johnContext, jane.id, {
                                                    'visibility': 'private',
                                                    'locale': 'en_CA',
                                                    'timezone': 'Canada/Central',
                                                    'firstName': 'Jane',
                                                    'lastName': 'Doe',
                                                    'displayName': 'Jane Doe'
                                                }, function(err) {
                                                    assert.equal(err.code, 401);

                                                    // Try updating Jane her password, this should also fail.
                                                    PrincipalsAPI.changePassword(johnContext, jane.id, '', 'foobar', function(err) {
                                                        assert.equal(err.code, 401);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }); */
       
    });
});
