/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var AuthzAPI = require('oae-authz');
var AuthzModel = require('oae-authz/lib/model');
var TenantAPI = require('oae-tenants');
var TestAPI = require('oae-tests');
var Context = require('oae-context').Context;
var PrincipalsAPI = require('oae-principals');

//var request = TestAPI.Http.createRequest();

describe('Principals', function() {

    describe('User REST endpoints', function() {

        /**
         * Utility function that will update a user's basic profile via the REST API.
         * Will use the currently logged in user's cookiestore.
         * @param  {String}   userId      Userid of the user we're trying to update
         * @param  {Object}   paramers    Object representing the profile updated. Keys are the profile fields, values
         *                                are the profile field values
         * @param  {Function} callback    Standard callback method
         *
        var updateUserViaRest = function(userId, params, callback) {
            request.post({
                'url': 'http://localhost:2001/api/user/' + userId,
                'method': 'POST',
                'form': params
            }, callback);
        };

        /**
         * Gets a profile from the REST api and asserts some values.
         * @param  {Object}   test        Nodeunit test object
         * @param  {String}   userId      Userid of the profile you wish to retrieve
         * @param  {String}   visibility  visibility to assert
         * @param  {String}   displayName displayname to assert
         * @param  {String}   firstName   first name to assert (pass in undefined for private profiles)
         * @param  {String}   lastName    last name to assert (pass in undefined for private profiles)
         * @param  {Function} callback    Callback method
         *
        var getProfile = function(userId, visibility, displayName, firstName, lastName, callback) {
            request.get('http://localhost:2001/api/user/' + userId, function(err, response, body) {
                assert.ok(!err);
                var j = JSON.parse(body);
                assert.equal(visibility, j.visibility);
                assert.equal(firstName, j.profile.firstName);
                assert.equal(lastName, j.profile.lastName);
                assert.equal(displayName, j.profile.displayName);

                callback(err, response, body);
            });
        };

        

        /**
         * Test to verify that we should only display personal information if the visibility has been set to public or loggedin (and the current user is not anonymous)
         *
        it('Test user permissions', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            var username1 = 'johndoe-' + r;
            var username2 = 'janedoe-' + r;

            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);

                PrincipalsAPI.createUser(anonymousContext, username1, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId1) {
                    assert.ok(!err);

                    PrincipalsAPI.createUser(anonymousContext, username2, 'testtest', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, userId2) {
                        assert.ok(!err);

                        // Set user1 his visibility to logged in.
                        login(username1, 'testtest', function() {
                            updateUserViaRest(userId1, {'visibility': 'loggedin'}, function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(200, response.statusCode);

                                // Try to get the profile as anon, should fail.
                                logout(function() {
                                    request.get('http://localhost:2001/api/user/' + userId1, function(err, response, body) {
                                        assert.ok(!err);
                                        var j = JSON.parse(body);
                                        assert.equal('loggedin', j.visibility);
                                        assert.equal(undefined, j.profile.firstName);
                                        assert.equal(undefined, j.profile.lastName);
                                        assert.equal('John Doe', j.profile.displayName);

                                        // Getting the profile as user 2 should still work.
                                        login(username2, 'testtest', function() {
                                            request.get('http://localhost:2001/api/user/' + userId1, function(err, response, body) {
                                                assert.ok(!err);
                                                var j = JSON.parse(body);
                                                assert.equal('loggedin', j.visibility);
                                                assert.equal('John', j.profile.firstName);
                                                assert.equal('Doe', j.profile.lastName);
                                                assert.equal('John Doe', j.profile.displayName);

                                                // Set it private.
                                                login(username1, 'testtest', function() {
                                                    updateUserViaRest(userId1, {'visibility': 'private'}, function(err, response, body) {
                                                        assert.ok(!err);
                                                        assert.equal(200, response.statusCode);

                                                        // As another user.
                                                        login(username2, 'testtest', function() {
                                                            request.get('http://localhost:2001/api/user/' + userId1, function(err, response, body) {
                                                                assert.ok(!err);
                                                                var j = JSON.parse(body);
                                                                assert.equal('private', j.visibility);
                                                                assert.equal(undefined, j.profile.firstName);
                                                                assert.equal(undefined, j.profile.lastName);
                                                                assert.equal('John Doe', j.profile.displayName);

                                                                // As anonymous
                                                                logout(function() {
                                                                     request.get('http://localhost:2001/api/user/' + userId1, function(err, response, body) {
                                                                        assert.ok(!err);
                                                                        var j = JSON.parse(body);
                                                                        assert.equal('private', j.visibility);
                                                                        assert.equal(undefined, j.profile.firstName);
                                                                        assert.equal(undefined, j.profile.lastName);
                                                                        assert.equal('John Doe', j.profile.displayName);
                                                                        callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test to verify that we respect the user timezone.
         *
        it('Test timezones', function(callback) {
            var updateAndCheckTimezone = function(userId, timezone, expected, callback) {
                updateUserViaRest(userId, {'timezone': timezone}, function(err, response, body) {
                    assert.ok(!err);
                    assert.equal(200, response.statusCode, 'Failed to set timezone to ' + timezone);

                    request.get('http://localhost:2001/api/me', function(err, response, body) {
                        assert.ok(!err);

                        assert.equal(200, response.statusCode);
                        var j = JSON.parse(body);
                        assert.equal(j.locale.timezone.offset, expected, "Wrong offset for " + timezone);
                        callback();
                    });
                });
            };

            var r = Math.floor(Math.random()*10000000);
            var username = 'johndoe-' + r;

            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);

                PrincipalsAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId) {
                    assert.ok(!err);

                    login(username, 'testtest', function() {
                        updateAndCheckTimezone(userId, 'America/Argentina/ComodRivadavia', -3, function() {
                            updateAndCheckTimezone(userId, 'America/Caracas', -4.5, function() {
                                updateAndCheckTimezone(userId, 'Asia/Kathmandu', 5.75, function() {
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        it('Test non standard fields updating.', function(callback) {
            // Create a user and update one of the non-standard fields.
            // When we retrieve the me feed, it should be present.
            var r = Math.floor(Math.random()*10000000);
            var username = 'johndoe-' + r;
            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);
                PrincipalsAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId) {
                    assert.ok(!err);
                    login(username, 'testtest', function() {
                        updateUserViaRest(userId, {'non-standard-field': 'foobar'}, function(err, response, body) {
                            assert.equal(200, response.statusCode);
                            request.get('http://localhost:2001/api/me', function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(200, response.statusCode);
                                var j = JSON.parse(body);
                                assert.equal(j.profile['non-standard-field'], 'foobar');
                                callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test to verify that it should be possible to change a user password
         *
        it('Test change password', function(callback) {
            var r = Math.floor(Math.random()*10000000);
            var username = 'johndoe-' + r;

            TenantAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                var anonymousContext = new Context(tenant, null);

                PrincipalsAPI.createUser(anonymousContext, username, 'testtest', 'public', 'en_GB', 'Europe/London', 'John', 'Doe', 'John Doe', function(err, userId) {
                    assert.ok(!err);

                    // First try changing it with the wrong password.
                    request.post({
                        'url': 'http://localhost:2001/api/user/' + userId + '/password',
                        'form': {
                            'oldPassword': 'wrong-password',
                            'newPassword': 'totally-new-password'
                        }
                    }, function(err, response, body) {
                        assert.equal(response.statusCode, 401);

                        // Now try with the correct one.
                        request.post({
                            'url': 'http://localhost:2001/api/user/' + userId + '/password',
                            'form': {
                                'oldPassword': 'testtest',
                                'newPassword': 'totally-new-password'
                            }
                        }, function(err, response, body) {
                            assert.ok(!err)
                            assert.equal(200, response.statusCode);

                            logout(function() {
                                login(username, 'testtest', function(err, response, body) {
                                    assert.equal(401, response.statusCode, "Login with old password should fail.");

                                    // Try with new.
                                    login(username, 'totally-new-password', function(err, response, body) {
                                        assert.equal(200, response.statusCode, "Login with new password should succeed.");
                                        callback();
                                    });
                                });
                            });
                        })
                    });
                });
            });
        }); */
       
       
       /*

        /**
         * Test that it is possible to update a user
         *
        it('Test update user', function(callback) {
            createUser(function(user) {
                // Try to update it.
                var extraData = 'This should be stored as well!';
                var ctx = new Context(tenantA, user);
                PrincipalsAPI.updateUser(ctx, user.id, {
                    'visibility': 'private',
                    'locale': 'en_GB',
                    'timezone': 'Europe/London',
                    'firstName': 'first',
                    'lastName': 'last',
                    'displayName': 'displayname',
                    'non-standard-field': extraData
                }, function(err){
                    if (err) {
                        assert.fail("Should be able to update a user.", err);
                        assert.done();
                    }

                    // Get it.
                    PrincipalsAPI.getUser(ctx, user.id, function(err, user) {
                        if (err) {
                            assert.fail("Should be able to get a user.");
                            assert.done();
                        }

                        assert.equal('private', user.visibility);
                        assert.equal('first', user.firstName);
                        assert.equal('last', user.lastName);
                        assert.equal('displayname', user.displayName);
                        assert.equal('en_GB', user.locale);
                        assert.equal('Europe/London', user.timezone);
                        assert.equal(extraData, user.extra['non-standard-field']);
                        callback();
                    });

                });
            });
        });

        /**
         * Test that updating a user fails if no parameters are provided
         *
        it('Test failed update', function(callback) {
            createUser(function(user) {
                var ctx = new Context(tenantA, user);
                PrincipalsAPI.updateUser(ctx, user.id, {}, function(err) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });

        /**
         * Test that a user can check a user his or her password
         *
        it('Test check password', function(callback) {
            createUser(function(createdUser) {
                PrincipalsAPI.checkPassword(tenantA, createdUser.username, 'password', function(err, pwUser) {
                    assert.ok(!err);
                    assert.equal(createdUser.id, pwUser.id);
                    PrincipalsAPI.checkPassword(tenantA, 'none_existing_user', 'password', function(err, pwUser) {
                        assert.equal(err.code, 401);
                        callback();
                    });
                });
            });
        });

        it('Test updating the user visibility', function(callback) {
            createUser(function(createdUser) {
                var context = new Context(tenantA, createdUser);
                PrincipalsAPI.setUserVisibility(context, createdUser.id, 'private', function(err) {
                    assert.ok(!err);

                    // Try updating it with a bad visibility.
                    PrincipalsAPI.setUserVisibility(context, createdUser.id, 'totally-not-a-setting', function(err) {
                        assert.equal(err.code, 400);

                        // Try updating someone else his profile.
                        createUser(function(badUser) {
                            var badContext = new Context(tenantA, badUser);
                            PrincipalsAPI.setUserVisibility(badContext, createdUser.id, 'loggedin', function(err) {
                                assert.equal(err.code, 401);
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('Test getting a user by username and tenant', function(callback) {
            createUser(function(createdUser) {
                var context = new Context(tenantA, createdUser);
                PrincipalsAPI.getTenantUser(context, createdUser.username, function(err, user) {
                    assert.ok(!err);
                    assert.equal(user.id, createdUser.id);
                    assert.equal(user.username, createdUser.username);
                    assert.equal(user.firstName, createdUser.firstName);
                    assert.equal(user.lastName, createdUser.lastName);
                    assert.equal(user.displayName, createdUser.displayName);
                    callback();
                });
            });
        });

        it('Test getting a user by ugly username', function(callback) {
            var username = 'some.weird@`user\\name';
            var firstName = 'Bobby Tables';
            PrincipalsAPI.createUser(anonymousContext, username, 'password', 'public', 'en_GB', 'Europe/London', firstName, 'lastName', 'displayName', function(err, id) {
                PrincipalsAPI.getTenantUser(anonymousContext, username, function(err, user) {
                    assert.ok(!err);
                    assert.equal(user.username, username);
                    assert.equal(user.firstName, firstName)
                    callback();
                });
            });
        });

        it('Test getting a bad userId', function(callback) {
            createUser(function(createdUser) {
                var context = new Context(tenantA, createdUser);
                PrincipalsAPI.getUser(context, undefined, function(err, user) {
                    assert.ok(err.code, 400);
                    PrincipalsAPI.getUser(context, 'totally-not-a-valid-id', function(err, user) {
                        assert.ok(err.code, 400);
                        callback();
                    });
                });
            });
        });

        it('Test making someone an admin', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                createUser(function(jane) {
                    var janeContext = new Context(tenantA, jane);

                    // Ensure that anonymous can't do anything.
                    PrincipalsAPI.setGlobalAdmin(anonymousContext, john.id, true, function(err) {
                        assert.equal(err.code, 401);
                        PrincipalsAPI.setTenantAdmin(anonymousContext, john.id, true, function(err) {
                            assert.equal(err.code, 401);

                            // John (a regular user) will try to make himself and jane an admin.
                            // Both should fail.
                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, true, function(err) {
                                assert.equal(err.code, 401);
                                PrincipalsAPI.setGlobalAdmin(johnContext, john.id, true, function(err) {
                                    assert.equal(err.code, 401);

                                    // This test makes John a global admin.
                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, john.id, true, function(err) {
                                        assert.ok(!err);
                                        // We'll need to get a new context as the old one has cached that john is not an admin.
                                        TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                            assert.ok(!err);
                                            assert.ok(johnContext.user().isGlobalAdmin());
                                            assert.ok(johnContext.user().isAdmin(tenantA.alias));
                                            assert.ok(!johnContext.user().isTenantAdmin(tenantB));

                                            // Now John should be able to make jane an admin.
                                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, true, function(err) {
                                                assert.ok(!err);

                                                // We'll need to get a new context for jane as the old one is stale.
                                                TestAPI.User.invalidateContext(janeContext, function(err, janeContext) {
                                                    assert.ok(!err);
                                                    assert.ok(janeContext.user().isGlobalAdmin());
                                                    assert.ok(janeContext.user().isAdmin(tenantA.alias));
                                                    assert.ok(!janeContext.user().isTenantAdmin(tenantB));

                                                    // If we revoke his global admin rights, he should not be able to revoke jane's admin rights.
                                                    PrincipalsAPI.setGlobalAdmin(globalAdminContext, john.id, false, function(err) {
                                                        assert.ok(!err);

                                                        TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                                            assert.ok(!err);
                                                            assert.ok(!johnContext.user().isGlobalAdmin());
                                                            assert.ok(!johnContext.user().isAdmin(tenantA.alias));
                                                            assert.ok(!johnContext.user().isTenantAdmin(tenantB.alias));

                                                            PrincipalsAPI.setGlobalAdmin(johnContext, jane.id, false, function(err) {
                                                                assert.equal(err.code, 401);

                                                                // Make sure it didn't go trough.
                                                                TestAPI.User.invalidateContext(janeContext, function(err, janeContext) {
                                                                    assert.ok(!err);
                                                                    assert.ok(janeContext.user().isGlobalAdmin());
                                                                    assert.ok(janeContext.user().isAdmin(tenantA.alias));
                                                                    assert.ok(!janeContext.user().isTenantAdmin(tenantB.alias));
                                                                    callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * We'll make John a tenant admin who then attempts to set himself as a global admin.
         * This should not be allowed.
         *
        it('Test that a tenant admin can\'t create a global admin', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                // This test makes John a tenant admin.
                PrincipalsAPI.setTenantAdmin(globalAdminContext, john.id, true, function(err) {
                    assert.ok(!err);
                    // We'll need to get a new context as the old one has cached that john is not an admin.
                    TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                        assert.ok(!err);
                        assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));
                        assert.ok(!johnContext.user().isGlobalAdmin());
                        assert.ok(johnContext.user().isAdmin(tenantA.alias));

                        PrincipalsAPI.setGlobalAdmin(johnContext, john.id, true, function(err) {
                            assert.equal(err.code, 401);
                            // Invalidate to be absolutely sure.
                            TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                assert.ok(!err);
                                assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));
                                assert.ok(!johnContext.user().isGlobalAdmin());
                                callback();
                            });
                        });
                    });
                });
            });
        });

        it('Test admin parameter validation', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                // This test makes John a tenant admin.
                PrincipalsAPI.setTenantAdmin(globalAdminContext, 'non-existing-id', true, function(err) {
                    assert.equal(err.code, 400);

                    // Groups cannot be made admin.
                    PrincipalsAPI.setTenantAdmin(globalAdminContext, 'g:cam:group', true, function(err) {
                        assert.equal(err.code, 400);
                        PrincipalsAPI.setTenantAdmin(globalAdminContext, 'u:camtest:non-existing-id', true, function(err) {
                            assert.equal(err.code, 404);
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Create three users: john, jack and jane. John and Jack are in tenant A, Jane is in tenant B.
         * Promote John to a tenant admin (for A) and try to update the profile info for Jack and Jane.
         * It should only work for Jack.
         *
        it('Verify that a tenant admin can only update users within his own tenant.', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();

            // John and Jack
            createUser(function(john) {
                var johnContext = new Context(tenantA, john);
                createUser(function(jack) {
                    var jackContext = new Context(tenantA, jack);

                    // Jane
                    var anonymousContextTenantB = new Context(tenantB, null);
                    PrincipalsAPI.createUser(anonymousContextTenantB, 'jane', 'password', 'public', 'en_GB', 'Europe/London', 'firstName', 'lastName', 'displayName', function(err, id) {
                        PrincipalsAPI.getUser(anonymousContextTenantB, id, function(err, jane) {

                            // Promote John
                            PrincipalsAPI.setTenantAdmin(globalAdminContext, john.id, true, function(err) {
                                assert.ok(!err);
                                // We'll need to get a new context as the old one has cached that john is not an admin.
                                TestAPI.User.invalidateContext(johnContext, function(err, johnContext) {
                                    assert.ok(!err);
                                    assert.ok(johnContext.user().isTenantAdmin(tenantA.alias));

                                    // Try to update Jack.
                                    PrincipalsAPI.updateUser(johnContext, jack.id, {
                                        'visibility': 'private',
                                        'locale': 'en_CA',
                                        'timezone': 'Canada/Central',
                                        'firstName': 'Jack',
                                        'lastName': 'Doe',
                                        'displayName': 'Jack Doe'
                                    }, function(err) {
                                        assert.ok(!err);
                                        // Verify it.
                                        PrincipalsAPI.getUser(jackContext, jack.id, function(err, user) {
                                            assert.ok(!err);
                                            assert.equal(user.firstName, 'Jack');
                                            assert.equal(user.lastName, 'Doe');
                                            assert.equal(user.displayName, 'Jack Doe');
                                            // Try a password change
                                            PrincipalsAPI.changePassword(johnContext, jack.id, '', 'foobar', function(err) {
                                                assert.ok(!err);

                                                // Try Jane
                                                PrincipalsAPI.updateUser(johnContext, jane.id, {
                                                    'visibility': 'private',
                                                    'locale': 'en_CA',
                                                    'timezone': 'Canada/Central',
                                                    'firstName': 'Jane',
                                                    'lastName': 'Doe',
                                                    'displayName': 'Jane Doe'
                                                }, function(err) {
                                                    assert.equal(err.code, 401);

                                                    // Try updating Jane her password, this should also fail.
                                                    PrincipalsAPI.changePassword(johnContext, jane.id, '', 'foobar', function(err) {
                                                        assert.equal(err.code, 401);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }); */
       
    });
});
