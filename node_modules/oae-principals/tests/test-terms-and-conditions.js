/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

var ConfigTestUtil = require('oae-config/lib/test/util');
var Context = require('oae-context').Context;
var RestAPI = require('oae-rest');
var TestsUtil = require('oae-tests');

describe('Terms and Conditions', function() {

    // Rest context that can be used every time we need to make a request as a global admin
    var globalAdminRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;

    /**
     * Function that will fill up the tenant admin rest context
     */
    before(function(callback) {
        camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
        anonymousCamRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
        globalAdminRestContext = TestsUtil.createGlobalAdminRestContext();
        callback();
    });

    /**
     * Function that will disable the T&C after each test
     */
    afterEach(function(callback) {
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/termsAndConditions/enabled': false}, function(err) {
            assert.ok(!err);
            ConfigTestUtil.clearConfigAndWait(camAdminRestContext, null, 'oae-principals/termsAndConditions/text', function(err) {
                assert.ok(!err);
                callback();
            });
        });
    });

    var _enableAndSetTC = function(ctx, tenantAlias, locale, text, publish, expectSuccess, callback) {
        // Enable the T&C
        var update = {};
        update['oae-principals/termsAndConditions/enabled'] = true;
        update['oae-principals/termsAndConditions/text/' + locale] = text;
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, update, function(err) {
            if (expectSuccess) {
                assert.ok(!err);
            } else {
                assert.ok(err);
            }
            callback();
        });
    };

    /**
     * Test that verifies that user need to accept the T&C when creating an account
     */
    it('verify users need to accept the T&C when creating an account', function(callback) {
        // Disable reCaptcha
        ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/recaptcha/enabled': false}, function(err) {
            assert.ok(!err);

            // Enable the T&C and publish a text
            _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'default', 'legalese', true, true, function() {

                // Not passing in acceptedTC: true should result in a 400
                var username = TestsUtil.generateRandomText(5);
                RestAPI.User.createUser(anonymousCamRestContext, username, 'password', 'Test User', null, function(err, userObj) {
                    assert.equal(err.code, 400);
                    RestAPI.User.createUser(anonymousCamRestContext, username, 'password', 'Test User', {'acceptedTC': false}, function(err, userObj) {
                        assert.equal(err.code, 400);
                        RestAPI.User.createUser(anonymousCamRestContext, username, 'password', 'Test User', {'acceptedTC': 'wrong'}, function(err, userObj) {
                            assert.equal(err.code, 400);

                            RestAPI.User.createUser(anonymousCamRestContext, username, 'password', 'Test User', {'acceptedTC': true}, function(err, userObj) {
                                assert.ok(!err);

                                // Re-enable the reCaptcha checks
                                ConfigTestUtil.updateConfigAndWait(camAdminRestContext, null, {'oae-principals/recaptcha/enabled': true}, function(err) {
                                    assert.ok(!err);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that users cannot interact with the system when a T&C comes into effect
     */
    it('verify users need to accept the T&C before they can interact with the system', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);
            var mrvisser = _.values(users)[0];

            // Enable the T&C and publish a text
            _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'default', 'legalese', true, true, function() {

                // When the user tries to *do* anything, he needs to accept the T&C
                RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://uk.yahoo.com', [], [], function(err, link) {
                    assert.ok(err);
                    assert.equal(err.code, 409);
                    assert.ok(!link);

                    RestAPI.User.getMe(mrvisser.restContext, function(err, data) {
                        assert.ok(!err);
                        assert.ok(data.needsToAcceptTC);

                        // Verify there is nothing in this user his library
                        RestAPI.Content.getLibrary(mrvisser.restContext, mrvisser.user.id, null, 10, function(err, library) {
                            assert.ok(!err);
                            assert.equal(library.results.length, 0);

                            // Accept the T&C for the cam tenant.
                            RestAPI.User.updateUser(mrvisser.restContext, mrvisser.user.id, {'acceptedTC': true}, function(err) {
                                assert.ok(!err);

                                RestAPI.User.getMe(mrvisser.restContext, function(err, data) {
                                    assert.ok(!err);
                                    assert.ok(!data.needsToAcceptTC);

                                    // Mrvisser should now be able to put data into the system
                                    RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://uk.yahoo.com', [], [], function(err, link) {
                                        assert.ok(!err);
                                        RestAPI.Content.getLibrary(mrvisser.restContext, mrvisser.user.id, null, 10, function(err, library) {
                                            assert.ok(!err);
                                            assert.equal(library.results.length, 1);

                                            // Update the T&C
                                            _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'default', 'new legalese', true, true, function() {

                                                // Mrvisser needs to re-accept the T&C before he can continue working on the system
                                                RestAPI.User.getMe(mrvisser.restContext, function(err, data) {
                                                    assert.ok(!err);
                                                    assert.ok(data.needsToAcceptTC);

                                                    RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://uk.yahoo.com', [], [], function(err, link) {
                                                        assert.ok(err);
                                                        assert.equal(err.code, 409);
                                                        assert.ok(!link);

                                                        // Sanity check that accepting it, allows mrvisser to do this thing
                                                        RestAPI.User.updateUser(mrvisser.restContext, mrvisser.user.id, {'acceptedTC': true}, function(err) {
                                                            assert.ok(!err);
                                                            RestAPI.User.getMe(mrvisser.restContext, function(err, data) {
                                                                assert.ok(!err);
                                                                assert.ok(!data.needsToAcceptTC);

                                                                // Mrvisser should now be able to put data into the system
                                                                RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://uk.yahoo.com', [], [], function(err, link) {
                                                                    assert.ok(!err);
                                                                    RestAPI.Content.getLibrary(mrvisser.restContext, mrvisser.user.id, null, 10, function(err, library) {
                                                                        assert.ok(!err);
                                                                        assert.equal(library.results.length, 2);
                                                                        callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that admins don't need to accept the terms and conditions to
     * interact with the system
     */
    it('verify admins don\'t need to accept the T&C', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);
            var mrvisser = _.values(users)[0];

            // Enable the T&C and publish a text
            _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'default', 'legalese', true, true, function() {

                // Make mrvisser a tenantAdmin
                RestAPI.User.setTenantAdmin(camAdminRestContext, mrvisser.user.id, true, function(err) {
                    assert.ok(!err);

                    // Mrvisser should now be able to interact with the system.
                    RestAPI.User.getMe(mrvisser.restContext, function(err, data) {
                        assert.ok(!err);
                        assert.ok(!data.needsToAcceptTC);
                        RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://uk.yahoo.com', [], [], function(err, link) {
                            assert.ok(!err);
                            RestAPI.Content.getLibrary(mrvisser.restContext, mrvisser.user.id, null, 10, function(err, library) {
                                assert.ok(!err);
                                assert.equal(library.results.length, 1);

                                // Demote mrvisser
                                RestAPI.User.setTenantAdmin(camAdminRestContext, mrvisser.user.id, false, function(err) {
                                    assert.ok(!err);

                                    // Because mrvisser hasn't accepted the T&C yet, he cannot interact with the system
                                    // When the user tries to *do* anything, he needs to accept the T&C
                                    RestAPI.User.getMe(mrvisser.restContext, function(err, data) {
                                        assert.ok(!err);
                                        assert.ok(data.needsToAcceptTC);
                                        RestAPI.Content.createLink(mrvisser.restContext, 'Yahoo', 'Yahoo', 'public', 'http://uk.yahoo.com', [], [], function(err, link) {
                                            assert.ok(err);
                                            assert.equal(err.code, 409);
                                            assert.ok(!link);

                                            // Verify nothing extra got added to the library
                                            RestAPI.Content.getLibrary(mrvisser.restContext, mrvisser.user.id, null, 10, function(err, library) {
                                                assert.ok(!err);
                                                assert.equal(library.results.length, 1);
                                                callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the T&C endpoint takes a locale parameter
     */
    it('verify retrieving the T&C can be localized', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);
            var mrvisser = _.values(users)[0];
            RestAPI.User.updateUser(mrvisser.restContext, mrvisser.user.id, {'locale': 'en_CA'}, function(err) {
                assert.ok(!err);

                // Enable the T&C and create a couple of localized versions
                _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'default', 'Default legalese', true, true, function() {
                    _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'en_GB', 'British English legalese', true, true, function() {
                        _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'en_CA', 'Canadian English legalese', true, true, function() {

                            // Verify the default locale
                            RestAPI.TermsAndConditions.getTermsAndConditions(anonymousCamRestContext, null, function(err, data) {
                                assert.ok(!err);
                                assert.equal(data.text, 'Default legalese');

                                // If no locale is specified, the user's locale should be used
                                RestAPI.TermsAndConditions.getTermsAndConditions(mrvisser.restContext, null, function(err, data) {
                                    assert.ok(!err);
                                    assert.equal(data.text, 'Canadian English legalese');

                                    // If a locale is specified, that should take preference over the user's locale
                                    RestAPI.TermsAndConditions.getTermsAndConditions(mrvisser.restContext, 'en_GB', function(err, data) {
                                        assert.ok(!err);
                                        assert.equal(data.text, 'British English legalese');

                                        // If a locale is specialized for which no T&C is available, the default T&C should be returned
                                        RestAPI.TermsAndConditions.getTermsAndConditions(mrvisser.restContext, 'fr_FR', function(err, data) {
                                            assert.ok(!err);
                                            assert.equal(data.text, 'Default legalese');
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the lastUpdate changes when the terms and conditions are changed
     */
    it('verify the lastUpdate timestamp changes after updating the T&C', function(callback) {
        // Set a T&C
        _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'default', 'Default legalese', true, true, function() {
             // Get the T&C
            RestAPI.TermsAndConditions.getTermsAndConditions(anonymousCamRestContext, null, function(err, firstTC) {
                assert.ok(!err);
                assert.equal(firstTC.text, 'Default legalese');
                assert.ok(firstTC.lastUpdate);
                assert.ok(firstTC.lastUpdate <= Date.now());
                assert.ok(firstTC.lastUpdate > 0);

                // Update the T&C
                _enableAndSetTC(camAdminRestContext, global.oaeTests.tenants.cam.alias, 'default', 'Other legalese', true, true, function() {
                    RestAPI.TermsAndConditions.getTermsAndConditions(anonymousCamRestContext, null, function(err, updatedTC) {
                        assert.ok(!err);
                        assert.equal(updatedTC.text, 'Other legalese');
                        assert.ok(updatedTC.lastUpdate);
                        assert.ok(updatedTC.lastUpdate <= Date.now());
                        assert.ok(updatedTC.lastUpdate > 0);
                        assert.ok(updatedTC.lastUpdate > firstTC.lastUpdate);
                        callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies the T&C are suppressed in the config when requested by a regular user
     */
    it('verify the T&C are suppressed in the config', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);
            var mrvisser = _.values(users)[0];

            // Anonymous users should not see it
            RestAPI.Config.getTenantConfig(anonymousCamRestContext, null, function(err, config) {
                assert.ok(!err);
                assert.ok(!config['oae-principals']['termsAndConditions']['text']);

                // Regular users shouldn't see it either
                RestAPI.Config.getTenantConfig(mrvisser.restContext, null, function(err, config) {
                    assert.ok(!err);
                    assert.ok(!config['oae-principals']['termsAndConditions']['text']);

                    // Tenant admins however, should be able to see it
                    RestAPI.Config.getTenantConfig(camAdminRestContext, null, function(err, config) {
                        assert.ok(!err);
                        assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));

                        // As do global admins
                        RestAPI.Config.getTenantConfig(globalAdminRestContext, global.oaeTests.tenants.cam.alias, function(err, config) {
                            assert.ok(!err);
                            assert.ok(_.isObject(config['oae-principals']['termsAndConditions']['text']));
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
