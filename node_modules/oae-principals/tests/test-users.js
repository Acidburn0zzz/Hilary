/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model.user').User;


describe('Users', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Context object that can be used every time we need to use the internal API as a global admin
    var globalAdminContext = null;

    /**
     * Function that will fill up the anonymous and the tenant admin context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up tenant admin rest context
        camAdminRestContext = TestsUtil.getAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the global admin context
        var globalTenant = new Tenant('global', 'Global tenant', 2000, 'localhost');
        globalAdminContext = new Context(globalTenant, new User(globalTenant.alias, 'u:global:administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', true, false));
        callback();
    });


    describe('#create user', function() {

        /**
         * Test that verifies that it should only be possible to create a user if there are valid reCaptcha tokens present or the current user is an admin
         */
        it('Test create user', function(callback) {
            // Try to create a user as an anonymous user with no reCaptcha tokens
            var userId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(anonymousRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!userObj);

                // Create a user as a tenant admin
                RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, createdUser) {
                    assert.ok(!err);
                    assert.ok(createdUser);
                    assert.equal(createdUser.firstName, 'Test');
                    assert.equal(createdUser.lastName, 'User');
                    assert.equal(createdUser.displayName, 'Test User');
                    assert.equal(createdUser.visibility, 'public');
                    var userRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password');

                    // Try creating a user with the same user id, which should fail
                    RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                        assert.ok(err);
                        assert.ok(!userObj);

                        // Try creating a new user as the created user
                        var newUserId = TestsUtil.generateTestUserId();
                        RestAPI.User.createUser(userRestContext, newUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                
                            // We promote the created user to be a tenant admin. We'll be using the internal API for now
                            // as there is no REST endpoint for this yet
                            PrincipalsAPI.setTenantAdmin(globalAdminContext, createdUser.id, true, function(err) {
                                assert.ok(!err);
                                
                                // Try creating the user again
                                RestAPI.User.createUser(userRestContext, newUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                                    assert.ok(!err);
                                    assert.ok(userObj);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });
    
    
    describe('#update user', function() {
        
        /**
         * Test that verifies that it is possible for a user to update its own basic profile, including non standard fields
         */
        it('verify update user', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                assert.equal(userObj.visibility, 'public');
                assert.equal(userObj.firstName, 'Test');
                assert.equal(userObj.lastName, 'User');
                assert.equal(userObj.displayName, 'Test User');
                assert.equal(userObj.locale, 'en_GB');
                assert.equal(userObj.timezone, 'Europe/London');
                var testUserRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, testUserId, 'password');
                
                // Update the user
                var updateValues = {
                    'visibility': 'private',
                    'locale': 'nl_NL',
                    'timezone': 'Europe/Amsterdam',
                    'firstName': 'first',
                    'lastName': 'last',
                    'displayName': 'displayname',
                    'non-standard-field': 'Custom data'
                };
                RestAPI.User.updateUser(testUserRestContext, userObj.id, updateValues, function (err) {
                    assert.ok(!err);

                    // Get the user's me feed
                    RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.ok(meObj);
                        assert.equal(meObj.visibility, 'private');
                        assert.equal(meObj.profile.firstName, 'first');
                        assert.equal(meObj.profile.lastName, 'last');
                        assert.equal(meObj.profile.displayName, 'displayname');
                        assert.equal(meObj.profile['non-standard-field'], 'Custom data');
                        assert.equal(meObj.locale.locale, 'nl_NL');
                        assert.equal(meObj.locale.timezone.name, 'Europe/Amsterdam');

                        // Get the user's basic profile
                        RestAPI.User.getUser(testUserRestContext, userObj.id, function(err, userObj) {
                            assert.ok(!err);
                            assert.ok(userObj);
                            assert.equal(userObj.visibility, 'private');
                            assert.equal(userObj.profile.firstName, 'first');
                            assert.equal(userObj.profile.lastName, 'last');
                            assert.equal(userObj.profile.displayName, 'displayname');
                            assert.equal(userObj.profile['non-standard-field'], 'Custom data');
                            callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that updating a user fails if no parameters are provided, a user is trying
         * to update a different user's basic profile or an anonymous user tries to update a user's profile
         */
        it('verify failed update', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                var testUserRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, testUserId, 'password');

                // Try to update the user's profile without parameters
                var updateValues = {};
                RestAPI.User.updateUser(testUserRestContext, userObj.id, updateValues, function (err) {
                    assert.ok(err);
                    assert.ok(err.code, 400);

                    // Try to update the user's profile as a different user. Create this user first
                    var updaterUserId = TestsUtil.generateTestUserId();
                    RestAPI.User.createUser(camAdminRestContext, updaterUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, updaterUserObj) {
                        assert.ok(!err);
                        assert.ok(updaterUserObj);
                        var updateUserRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, updaterUserId, 'password');
                        updateValues = {
                            'firstName': 'John'
                        };
                        RestAPI.User.updateUser(updateUserRestContext, userObj.id, updateValues, function (err) {
                            assert.ok(err);
                            assert.ok(err.code, 401);

                            // Try to update the user's profile as the anonymous user
                            RestAPI.User.updateUser(anonymousRestContext, userObj.id, updateValues, function (err) {
                                assert.ok(err);
                                assert.ok(err.code, 401);
                                
                                // Make sure that the user's basic profile is unchanged
                                RestAPI.User.getUser(testUserRestContext, userObj.id, function(err, userObj) {
                                    assert.ok(!err);
                                    assert.ok(userObj);
                                    assert.equal(userObj.visibility, 'public');
                                    assert.equal(userObj.profile.firstName, 'Test');
                                    assert.equal(userObj.profile.lastName, 'User');
                                    assert.equal(userObj.profile.displayName, 'Test User');
                                    callback();
                                });
                            });
                        });
                    });
                });
            });            
        });
        
    });
    
    
    describe('#user visibility', function() {
        
        /**
         * Test that verifies that user visibility settings work as expected. Public users should be visibile to everyone. Loggedin users should be
         * visible to all users, other than the anonymous user. Private user should only be visibile to the user himself. When a user is not visible,
         * only the display name should be visible
         */
        it('verify user permissions', function(callback) {
            
            var verifyProfilePermissions = function(restContext, userToCheck, expectAccess, expectedVisibility, checkDone) {
                // Try to get user 1 as an anonymous user and a logged in user. Both should work
                RestAPI.User.getUser(restContext, userToCheck, function(err, userObj) {
                    assert.ok(!err);
                    assert.ok(userObj);
                    assert.equal(userObj.visibility, expectedVisibility);
                    assert.equal(userObj.profile.displayName, 'Jack Doe');
                    if (expectAccess) {
                        assert.equal(userObj.profile.firstName, 'Jack');
                        assert.equal(userObj.profile.lastName, 'Doe');
                    } else {
                        assert.equal(userObj.profile.firstName, undefined);
                        assert.equal(userObj.profile.lastName, undefined);
                    }
                    checkDone();
                });
            };

            // Create 2 public test users
            var jackUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, jackUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jack', 'Doe', 'Jack Doe', function(err, jack) {
                assert.ok(!err);
                assert.ok(jack);
                var jackRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, jackUserId, 'password');

                var janeUserId = TestsUtil.generateTestUserId();
                RestAPI.User.createUser(camAdminRestContext, janeUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Jane', 'Doe', 'Jane Doe', function(err, jane) {
                    assert.ok(!err);
                    assert.ok(jane);
                    var janeRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, janeUserId, 'password');

                    // Try to get jack as an anonymous user and a logged in user and the user himself. All should work
                    verifyProfilePermissions(anonymousRestContext, jack.id, true, 'public', function() {
                        verifyProfilePermissions(janeRestContext, jack.id, true, 'public', function() {
                            verifyProfilePermissions(jackRestContext, jack.id, true, 'public', function() {
                            
                                // Set jack's visibility to logged in
                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'loggedin'}, function(err) {
                                    assert.ok(!err);
                                    
                                    // Try to get jack as an anonymous user and a logged in user and the user himself. The anonymous user 
                                    // should only be able to get the display name
                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'loggedin', function() {
                                        verifyProfilePermissions(janeRestContext, jack.id, true, 'loggedin', function() {
                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'loggedin', function() {
                                            
                                                // Set jack's visibility to private
                                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'private'}, function(err) {
                                                    assert.ok(!err);
                                                    
                                                    // Try to get jack as an anonymous user and a logged in user and the user himself. The anonymous user 
                                                    // and the logged in user should only be able to get the display name
                                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'private', function() {
                                                        verifyProfilePermissions(janeRestContext, jack.id, false, 'private', function() {
                                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'private', function() {
                                                                
                                                                // Set jack's visibility to an invalid option
                                                                RestAPI.User.updateUser(jackRestContext, jack.id, {'visibility': 'non-existing'}, function(err) {
                                                                    assert.ok(err);
                                                                    
                                                                    // Make sure that the jack's visibility has not changed
                                                                    verifyProfilePermissions(anonymousRestContext, jack.id, false, 'private', function() {
                                                                        verifyProfilePermissions(janeRestContext, jack.id, false, 'private', function() {
                                                                            verifyProfilePermissions(jackRestContext, jack.id, true, 'private', callback);
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });


    describe('#user timezone', function() {
        
        /**
         * Test that verifies that we respect the user timezone.
         */
        it('Test timezones', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                var testUserRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, testUserId, 'password');

                // Change the timezone and checks its validaty
                RestAPI.User.updateUser(testUserRestContext, userObj.id, {'timezone': 'America/Argentina/ComodRivadavia'}, function(err) {
                    assert.ok(!err);
                    RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                        assert.ok(!err);
                        assert.equal(meObj.locale.timezone.name, 'America/Argentina/ComodRivadavia');
                        assert.equal(meObj.locale.timezone.offset, -3);

                        // Test another more complex timezone
                        RestAPI.User.updateUser(testUserRestContext, userObj.id, {'timezone': 'Asia/Kathmandu'}, function(err) {
                            assert.ok(!err);
                            RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                                assert.ok(!err);
                                assert.equal(meObj.locale.timezone.name, 'Asia/Kathmandu');
                                assert.equal(meObj.locale.timezone.offset, 5.75);
                                
                                // Test a non-existing timezone. This should revert back to BST
                                RestAPI.User.updateUser(testUserRestContext, userObj.id, {'timezone': 'Jurassic/Park'}, function(err) {
                                    assert.ok(err);
                                    assert.ok(err.code, 400);
                                    RestAPI.User.getMe(testUserRestContext, function(err, meObj) {
                                        assert.ok(!err);
                                        assert.equal(meObj.locale.timezone.name, 'Asia/Kathmandu');
                                        assert.equal(meObj.locale.timezone.offset, 5.75);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });


    describe('#user password', function() {
        
        /**
         * Test that verifies that it should be possible to change a user's password
         */
        it('verify change password', function(callback) {
            // Create a test user
            var testUserId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(camAdminRestContext, testUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                assert.ok(!err);
                assert.ok(userObj);
                var testUserRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, testUserId, 'password');

                // Try changing the password with a wrong old password
                RestAPI.User.changePassword(testUserRestContext, userObj.id, 'wrong-password', 'totally-new-password', function(err) {
                    assert.ok(err);
                    assert.equal(err.code, 401);

                    // Try changing the password with the correct old password
                    RestAPI.User.changePassword(testUserRestContext, userObj.id, 'password', 'totally-new-password', function(err) {
                        assert.ok(!err);
                        testUserRestContext.userPassword = 'totally-new-password';
                        
                        // Try logging in with the wrong password
                        RestAPI.Authentication.login(anonymousRestContext, testUserId, 'password', function(err) {
                            assert.ok(err);
                            assert.ok(err.code, 401);

                            // Try logging in with the new password
                            RestAPI.Authentication.login(anonymousRestContext, testUserId, 'totally-new-password', function(err) {
                                assert.ok(!err);
                                
                                // Log out again
                                RestAPI.Authentication.logout(testUserRestContext, function(err) {
                                    assert.ok(!err);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });

});