/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Tenant = require('oae-tenants/lib/model').Tenant;
var Context = require('oae-context').Context;
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var PrincipalsAPI = require('oae-principals');
var User = require('oae-principals/lib/model.user').User;


describe('Users', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;
    // Context object that can be used every time we need to use the internal API as a global admin
    var globalAdminContext = null;

    /**
     * Function that will fill up the anonymous and the tenant admin context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up tenant admin rest context
        camAdminRestContext = TestsUtil.getAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the global admin context
        var globalTenant = new Tenant('global', 'Global tenant', 2000, 'localhost');
        globalAdminContext = new Context(globalTenant, new User(globalTenant.alias, 'u:global:administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', true, false));
        callback();
    });


    describe('#create user', function() {

        /**
         * Test that verifies that it should only be possible to create a user if there are valid reCaptcha tokens present or the current user is an admin
         */
        it('Test create user', function(callback) {
            // Try to create a user as an anonymous user with no reCaptcha tokens
            var userId = TestsUtil.generateTestUserId();
            RestAPI.User.createUser(anonymousRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                assert.ok(err);
                assert.equal(err.code, 400);
                assert.ok(!userObj);

                // Create a user as a tenant admin
                RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, createdUser) {
                    assert.ok(!err);
                    assert.ok(createdUser);
                    assert.equal(createdUser.firstName, 'Test');
                    assert.equal(createdUser.lastName, 'User');
                    assert.equal(createdUser.displayName, 'Test User');
                    assert.equal(createdUser.visibility, 'public');
                    userRestContext = new RestContext(global.oaeTests.tenants.cam.baseUrl, userId, 'password');

                    // Try creating a user with the same user id, which should fail
                    RestAPI.User.createUser(camAdminRestContext, userId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                        assert.ok(err);
                        assert.ok(!userObj);

                        // Try creating a new user as the created user
                        var newUserId = TestsUtil.generateTestUserId();
                        RestAPI.User.createUser(userRestContext, newUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                            assert.ok(err);
                            assert.equal(err.code, 401);
                
                            // We promote the created user to be a tenant admin. We'll be using the internal API for now
                            // as there is no REST endpoint for this yet
                            PrincipalsAPI.setTenantAdmin(globalAdminContext, createdUser.id, true, function(err) {
                                assert.ok(!err);
                                
                                // Try creating the user again
                                RestAPI.User.createUser(userRestContext, newUserId, 'password', 'public', 'en_GB', 'Europe/London', 'Test', 'User', 'Test User', function(err, userObj) {
                                    assert.ok(!err);
                                    assert.ok(userObj);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
        
    });

});