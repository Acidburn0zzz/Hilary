/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * visibilitys and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');

// TODO
//var Context = require('oae-context').Context;
//var PrincipalAPI = require('oae-principals');
//var User = require('oae-principals/lib/model').User;
//var PrincipalsAPI = require('oae-principals');
//var ProfilesAPI = require('oae-profiles');
//var TenantAPI = require('oae-tenants');
//var TestAPI = require('oae-tests');
//var request = TestAPI.Http.createRequest();
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');


describe('Profiles', function() {

    // Rest context that can be used for anonymous requests on the cambridge tenant
    var anonymousCamRestContext = null;
    // Rest context that can be used every time we need to make a request as a tenant admin
    var camAdminRestContext = null;

    /**
     * Function that will fill up the tenant admin and anymous rest context
     */
    before(function(callback) {
        // Fill up the anonymous cam rest context
        anonymousCamRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up global admin rest context
        camAdminRestContext = TestsUtil.getAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        callback();
    });


    describe('#set profile section', function() {
        
        /**
         * TODO
         *
        it('Partial updates', function(callback) {
            createUsers(function(simonContext, bertContext) {
                var simon = simonContext.user();
    
                // Create private profile item.
                var aboutme = {'aboutme': 'so interesting!', 'hobbies': ''};
                setSection(simonContext, simon.id, 'aboutme', 'private', aboutme, true, function(err) {
                    assert.ok(!err);
    
                    // Update the aboutme section partially.
                    ProfileAPI.setSection(simonContext, simon.id, 'aboutme', 'private', {'hobbies': 'football'}, false, function(err) {
                        assert.ok(!err);
    
                        getSection(simonContext, simon.id, 'aboutme', function(err, data) {
                            var newAboutMe = {'aboutme': 'so interesting!', 'hobbies': 'football'};
                            assert.ok(!err);
                            assert.deepEqual(newAboutMe, data);
                            callback();
                        });
                    });
                });
            });
        });*/
       
        /**
         * TODO
         *
        it('Validation', function(callback) {
            createUsers(function(simonContext, bertContext) {
                setSection(_anonymousContext, simonContext.user().id, 'aboutme', 'private', {"foo" : "bar"}, true, function(err) {
                    assert.equal(err.code, 401);
    
                    setSection(simonContext, simonContext.user().id, 'aboutme', 'private', "wrong data entry", true, function(err) {
                        assert.equal(err.code, 400);
    
                        setSection(simonContext, simonContext.user().id, undefined, 'private', "wrong data entry", true, function(err) {
                            assert.equal(err.code, 400);
                            setSection(simonContext, simonContext.user().id, 'aboutme', 'wrong-visibility', {}, true, function(err) {
                                assert.equal(err.code, 400);
                                callback();
                            });
                        });
                    });
                });
            });
        }); */
        
    });

    
    describe('#get profile section', function() {
        
        /**
         * TODO
         *
        it('Multiple profile section retrieval', function(callback) {
            createUsers(function(simonContext, bertContext) {
                var simon = simonContext.user();
    
                // Create private profile item.
                var aboutme = {'aboutme': 'so interesting!'};
                setSection(simonContext, simon.id, 'aboutme', 'private', aboutme, true, function(err) {
                    assert.ok(!err);
    
                    // Create public profile item.
                    var publications = {'2011': ['Background subtraction with ViBe and shadow detection']};
                    setSection(simonContext, simon.id, 'publications', 'public', publications, true, function(err) {
                        assert.ok(!err);
    
                        // Retrieve all profiles as simon.
                        getAllSections(simonContext, simon.id, function(err, sections) {
                            assert.ok(!err);
                            assert.deepEqual(sections.aboutme, aboutme);
                            assert.deepEqual(sections.publications, publications);
    
                            // Retrieving as Bert should only display the publications.
                            getAllSections(bertContext, simon.id, function(err, sections) {
                                assert.ok(!err);
                                assert.ok(!sections.aboutme);
                                assert.deepEqual(sections.publications, publications);
                                callback();
                            });
                        });
                    });
                });
            });
        }); */
        
        /**
         * TODO
         *
        it('Verify that profiles are accessible by admins', function(callback) {
            var globalAdminContext = TestAPI.User.getGlobalAdminContext();
            createUsers(function(simonContext, bertContext) {
                var simon = simonContext.user();
    
                // Create private profile item.
                var aboutme = {'foo': 'bar'};
                setSection(simonContext, simon.id, 'aboutme', 'private', aboutme, true, function(err) {
                    assert.ok(!err);
    
                    // Try to set it as Bert (regular user)
                    setSection(bertContext, simon.id, 'aboutme', 'private', aboutme, true, function(err) {
                        assert.equal(err.code, 403);
    
                        // Make Bert an admin.
                        PrincipalsAPI.setTenantAdmin(globalAdminContext, bertContext.user().id, true, function(err) {
                            assert.ok(!err);
                            // invalidate the old bert context.
                            bertContext = new Context(_tenant, bertContext.user());
    
                            // The admin should be able to retrieve data.
                            getSection(bertContext, simon.id, 'aboutme', function(err, data) {
                                assert.ok(!err);
                                assert.deepEqual(data, aboutme);
    
                                // Change the profile as an admin.
                                aboutme = {'totally': 'changed'};
                                setSection(bertContext, simon.id, 'aboutme', 'private', aboutme, true, function(err) {
                                    assert.ok(!err);
    
                                    // Get it back as the regular user as verification.
                                    getSection(simonContext, simon.id, 'aboutme', function(err, data) {
                                        assert.ok(!err);
                                        assert.deepEqual(data, aboutme);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });*/

        
        /**
         * TODO
         *
        it('Getting a non-existing section', function(callback) {
            createUsers(function(simonContext, bertContext) {
                getSection(simonContext, simonContext.user().id, 'non-existing', function(err) {
                    assert.equal(err.code, 404);
                    callback();
                });
            });
        }); */
        
        /**
         * TODO
         *
        it('Test parameter validation', function(callback) {
            createUsers(function(simonContext, bertContext) {
                var simon = simonContext.user();
    
                ProfileAPI.getSection(simonContext, simon.id, undefined, function(err, section) {
                    assert.equal(err.code, 400);
                    callback();
                });
            });
        });*/
        
    });

    describe('#profile section visibility', function() {
        
        /**
         * TODO
         *
        it('Verify that profile visibility is set', function(callback) {
            createUsers(function(simonContext, bertContext) {
                var simon = simonContext.user();
    
                // Create private profile item.
                var aboutme = {'foo': 'bar'};
                setSection(simonContext, simon.id, 'aboutme', 'private', aboutme, true, function(err) {
                    assert.ok(!err);
    
                    // The same user should be able to get it.
                    getSection(simonContext, simon.id, 'aboutme', function(err, data) {
                        assert.ok(!err);
                        assert.deepEqual(data, aboutme);
    
                        // Bert however, should not be able to get it.
                        getSection(bertContext, simon.id, 'aboutme', function(err, data) {
                            assert.equal(err.code, 403);
    
                            // Anonymous user can't see it either.
                            getSection(_anonymousContext, simon.id, 'aboutme', function(err, data) {
                                assert.equal(err.code, 401);
    
                                // If Simon makes it public they should both be able to access it.
                                setSection(simonContext, simon.id, 'aboutme', 'public', aboutme, true, function(err) {
                                    assert.ok(!err);
    
                                    getSection(bertContext, simon.id, 'aboutme', function(err, data) {
                                        assert.ok(!err)
                                        assert.deepEqual(aboutme, data);
    
                                        getSection(_anonymousContext, simon.id, 'aboutme', function(err, data) {
                                            assert.ok(!err)
                                            assert.deepEqual(aboutme, data);
    
                                            // If Simon makes it loggedin only, only Bert should be able to access it.
                                            setSection(simonContext, simon.id, 'aboutme', 'loggedin', aboutme, true, function(err) {
                                                assert.ok(!err);
    
                                                getSection(bertContext, simon.id, 'aboutme', function(err, data) {
                                                    assert.ok(!err)
                                                    assert.deepEqual(aboutme, data);
    
                                                    getSection(_anonymousContext, simon.id, 'aboutme', function(err, data) {
                                                        assert.equal(err.code, 401);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });*/
        
        /**
         * TODO
         *
        it('Test visibility', function(callback) {
            createUsers(function(simonContext, bertContext) {
                var simon = simonContext.user();
    
                // Create private profile item.
                var aboutme = {'aboutme': 'so interesting!', 'hobbies': ''};
                setSection(simonContext, simon.id, 'aboutme', 'private', aboutme, true, function(err) {
                    assert.ok(!err);
    
                    setSection(simonContext, simon.id, 'publications', 'loggedin', {}, true, function(err) {
                        assert.ok(!err);
    
                        request.get('http://localhost:2001/api/user/' + simon.id + '/visibility', function(err, response, body) {
                            assert.ok(!err);
    
                            var data = JSON.parse(body);
                            assert.equal('public', data.accountVisibility);
                            assert.equal('private', data.profile.aboutme);
                            assert.equal('loggedin', data.profile.publications);
    
                            // Update a specific one.
                            request.post({
                                'url': 'http://localhost:2001/api/user/' + simon.id + '/profile/publications/visibility',
                                'form': {'visibility': 'foo'}
                            }, function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(400, response.statusCode);
                                request.post({
                                    'url': 'http://localhost:2001/api/user/' + simon.id + '/profile/publications/visibility',
                                    'form': {'visibility': 'private'}
                                }, function(err, response, body) {
                                    assert.ok(!err);
                                    assert.equal(200, response.statusCode);
                                    request.get('http://localhost:2001/api/user/' + simon.id + '/visibility', function(err, response, body) {
                                        assert.ok(!err);
    
                                        var data = JSON.parse(body);
                                        assert.equal('public', data.accountVisibility);
                                        assert.equal('private', data.profile.aboutme);
                                        assert.equal('private', data.profile.publications);
                                        callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        }); */

    });

});