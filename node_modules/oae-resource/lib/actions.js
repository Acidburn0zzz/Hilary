
var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzConstants = require('oae-authz/lib/constants').AuthzConstants;
var AuthzInvitations = require('oae-authz/lib/invitations');
var AuthzPermissions = require('oae-authz/lib/permissions');
var AuthzUtil = require('oae-authz/lib/util');
var OaeUtil = require('oae-util/lib/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');
var TenantsAPI = require('oae-tenants');

var create = module.exports.create = function(ctx, roles, createFn, callback) {
    _getTargetRoles(roles, function(err, principalRoles, emailRoles) {
        if (err) {
            return callback(err);
        }

        var targets = {
            'principalRoles': principalRoles,
            'emailRoles': emailRoles
        };
        AuthzPermissions.canCreate(ctx, targets, function(err, members, emails) {
            if (err) {
                return callback(err);
            }

            createFn(function(err, resource) {
                if (err) {
                    return callback(err);
                }

                var authzResourceId = AuthzUtil.getAuthzId(resource);
                var createFnResults = _.toArray(arguments).slice(1);
                AuthzAPI.updateRoles(authzResourceId, members.changes, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    OaeUtil.invokeIfNecessary(!_.isEmpty(emails.changes), AuthzInvitations.createInvitations, authzResourceId, emails.changes, ctx.user().id, function(err, emailTokens, invitations) {
                        if (err) {
                            return callback(err);
                        }

                        var args = _.union([null], createFnResults, [members, emails]);
                        return callback.apply(null, args);
                    });
                });
            });
        });
    });
};

var share = module.exports.share = function(ctx, resource, targetIds, role, callback) {
    _getTargets(targetIds, function(err, principals, emails) {
        if (err) {
            return callback(err);
        }

        var targets = {'principals': principals, 'emails': emails};
        AuthzPermissions.canShare(ctx, resource, targets, role, function(err, members, emails) {
            if (err) {
                return callback(err);
            }

            // Perform the role updates
            var authzResourceId = AuthzUtil.getAuthzId(resource);
            OaeUtil.invokeIfNecessary(!_.isEmpty(members.changes), AuthzAPI.updateRoles, authzResourceId, members.changes, function(err) {
                if (err) {
                    return callback(err);
                }

                OaeUtil.invokeIfNecessary(!_.isEmpty(emails.changes), AuthzInvitations.createInvitations, authzResourceId, emails.changes, ctx.user().id, function(err, emailTokens, invitations) {
                    if (err) {
                        return callback(err);
                    }

                    return callback(null, members, emails);
                });
            });
        });
    });
};

var setRoles = module.exports.setRoles = function(ctx, resource, roles, callback) {
    _getTargetRoles(roles, function(err, principalRoles, emailRoles) {
        if (err) {
            return callback(err);
        }

        var targets = {
            'principalRoles': principalRoles,
            'emailRoles': emailRoles
        };

        AuthzPermissions.canSetRoles(ctx, resource, targets, function(err, members, emails) {
            if (err) {
                return callback(err);
            }

            var authzResourceId = AuthzUtil.getAuthzId(resource);
            OaeUtil.invokeIfNecessary(!_.isEmpty(members.changes), AuthzAPI.updateRoles, authzResourceId, members.changes, function(err) {
                if (err) {
                    return callback(err);
                }

                OaeUtil.invokeIfNecessary(!_.isEmpty(emails.changes), AuthzPermissions.createInvitations, authzResourceId, emails.changes, ctx.user().id, function(err, emailTokens, invitations) {
                    if (err) {
                        return callback(err);
                    }

                    return callback(null, members, emails);
                });
            });
        });
    });
};

var _getTargetRoles = function(roles, callback) {
    _getTargets(_.keys(roles), function(err, principals, emails) {
        if (err) {
            return callback(err);
        }

        // Wrap the principals into an array of objects that contains their desired role
        var principalRoles = _.map(principals, function(principal) {
            return {
                'principal': principal,
                'role': roles[principal.id]
            };
        });

        // Wrap the emails into an array of email strings that contains their desired invitation
        // role
        var emailRoles = _.map(emails, function(email) {
            return {
                'email': email,
                'role': roles[email]
            };
        });

        return callback(null, principalRoles, emailRoles);
    });
};

var _getTargets = function(targetIds, callback) {
    var principalIdsAndEmails = _.partition(targetIds, AuthzUtil.isResourceId);
    var principalIds = _.first(principalIdsAndEmails);
    var emails = _.last(principalIdsAndEmails);
    if (_.isEmpty(principalIds)) {
        return callback(null, [], emails);
    }

    _getExistingPrincipals(principalIds, function(err, principalsById) {
        if (err) {
            return callback(err);
        }

        return callback(null, _.values(principalsById), emails);
    });
};

var _getExistingPrincipals = function(principalIds, callback) {
    if (_.isEmpty(principalIds)) {
        return callback(null, {});
    }

    PrincipalsDAO.getPrincipals(principalIds, null, function(err, principalsById) {
        if (err) {
            return callback(err);
        } else if (_.keys(principalsById).length !== principalIds.length) {
            return callback({'code': 400, 'msg': 'One or more provided principals did not exist'});
        }

        return callback(null, principalsById);
    });
};
