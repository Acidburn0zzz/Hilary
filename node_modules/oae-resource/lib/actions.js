
var _ = require('underscore');

var AuthzAPI = require('oae-authz');
var AuthzPermissions = require('oae-authz/lib/permissions');
var AuthzUtil = require('oae-authz/lib/util');
var PrincipalsDAO = require('oae-principals/lib/internal/dao');

var create = module.exports.create = function(ctx, roles, createFn, callback) {
    var principalIds = _.keys(roles);
    _getExistingPrincipals(principalIds, function(err, principalsById) {
        if (err) {
            return callback(err);
        }

        var targets = {
            'principalRoles': _.map(roles, function(role, principalId) {
                return {
                    'principal': principalsById[principalId],
                    'role': role
                }
            })
        };

        AuthzPermissions.canCreate(ctx, targets, function(err) {
            if (err) {
                return callback(err);
            }

            createFn(function(err, resource) {
                if (err) {
                    return callback(err);
                }

                var createFnResults = _.toArray(arguments).slice(1);
                AuthzAPI.updateRoles(AuthzUtil.getAuthzId(resource), roles, function(err) {
                    if (err) {
                        return callback(err);
                    }

                    var args = _.union([null], createFnResults, [_.values(principalsById)]);
                    return callback.apply(null, args);
                });
            });
        });
    });
};

var share = module.exports.share = function(ctx, resource, targetIds, role, callback) {
    _getExistingPrincipals(targetIds, function(err, principalsById) {
        if (err) {
            return callback(err);
        }

        var targets = {'principals': _.values(principalsById)};
        AuthzPermissions.canShare(ctx, resource, targets, function(err, newMembers, memberRoles) {
            if (err) {
                return callback(err);
            } else if (_.isEmpty(newMembers)) {
                // If no updates are expected to be applied, continue without making any membership
                // updates
                return callback(null, newMembers, memberRoles);
            }

            // Gather the role changes we actually need
            var roleChanges = {};
            _.each(newMembers, function(newMember) {
                roleChanges[newMember.id] = role;
            });

            // Perform the role updates
            AuthzAPI.updateRoles(AuthzUtil.getAuthzId(resource), roleChanges, function(err) {
                if (err) {
                    return callback(err);
                }

                return callback(null, newMembers, memberRoles);
            });
        });
    });
};

var setRoles = module.exports.setRoles = function(ctx, resource, roleChanges, callback) {
    _getExistingPrincipals(_.keys(roleChanges), function(err, principalsById) {
        if (err) {
            return callback(err);
        }

        var targets = {
            'principalRoles': _.map(roleChanges, function(role, principalId) {
                return {
                    'principal': principalsById[principalId],
                    'role': role
                };
            })
        };

        AuthzPermissions.canSetRoles(ctx, resource, targets, function(err, memberRoles, newMembers, updatedMembers, removedMembers) {
            if (err) {
                return callback(err);
            }

            AuthzAPI.updateRoles(AuthzUtil.getAuthzId(resource), roleChanges, function(err) {
                if (err) {
                    return callback(err);
                }

                return callback(null, memberRoles, newMembers, updatedMembers, removedMembers);
            });
        });
    });
};

var _getExistingPrincipals = function(principalIds, callback) {
    PrincipalsDAO.getPrincipals(principalIds, null, function(err, principalsById) {
        if (err) {
            return callback(err);
        } else if (_.keys(principalsById).length !== principalIds.length) {
            return callback({'code': 400, 'msg': 'One or more provided principals did not exist'});
        }

        return callback(null, principalsById);
    });
};
