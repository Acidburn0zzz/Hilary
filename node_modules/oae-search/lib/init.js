/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var log = require('oae-logger').logger('search');
var ElasticSearch = require('./internal/elasticsearch');
var MQ = require('oae-util/lib/mq');
var SearchAPI = require('oae-search');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;

module.exports = function(config, callback) {
    config.search.schemaExtension = config.search.schemaExtension || {};

    var hosts = config.search.hosts;
    var index = config.search.index;
    var processIndexJobs = config.search.processIndexJobs !== false;
    var destroy = config.search.index.destroyOnStartup === true;

    SearchAPI.registerSearch('general', require('./searches/general'));    
    SearchAPI.refreshSearchConfiguration(index.name, { hosts: hosts }, index.allowRefresh === true, processIndexJobs, function(err) {
        if (err) {
            return callback(err);
        }

        ensureIndex(index.name, index.settings, destroy, function(err) {
            if (err) {
                return callback(err);
            }

            ensureSearchSchema(config, callback);
        });
    });
};

/**
 * Ensure that the index identified by the index name exists.
 * 
 * @param   {String}        indexName           The name of the index
 * @param   {Object}        indexSettings       The settings of the index
 * @param   {Object[]}      indexSettings.hosts An array of hosts (e.g., `[{ "host": "localhost", "port": 9200 }]`) to use
 * @param   {Boolean}       destroy             If true, the index will be destroyed if it exists, then recreated.
 * @param   {Function}      callback            Invoked when the process completes
 * @param   {Object}        callback.err        An error that occurred, if any
 * @api private
 */
var ensureIndex = function(indexName, indexSettings, destroy, callback) {
    if (destroy) {
        log().info('Destroying index "%s" on initialization.', indexName);
        ElasticSearch.deleteIndex(indexName, function(err) {
            if (err) {
                return callback(err);
            }

            ElasticSearch.createIndex(indexName, indexSettings, function(err) {
                if (err) {
                    log().error({'err': err}, 'Error recreating index "%s" after deletion.', indexName);
                    return callback(err);
                }

                log().info('Recreated index "%s" after deletion.', indexName);
                return callback();
            });
        });
    } else {
        ElasticSearch.createIndex(indexName, indexSettings, function(err) {
            if (err) {
                log().error({'err': err}, 'Error creating index "%s".', indexName)
                return callback(err);
            }

            return callback();
        });
    }
};

var ensureSearchSchema = function(config, callback) {
    // extend the base schema with the configured extensions
    var resourceSchema = _.extend(createBaseSchema(), config.schemaExtension);
    var resourceMembersSchema = createMembersSchema();
    var resourceMembershipsSchema = createMembershipsSchema();

    ElasticSearch.putMapping(SearchConstants.resourceMappingName, resourceSchema, null, function(err) {
        if (err) {
            return callback(err);
        }

        // members and memberships mappings are children to the parent resource.
        childOpts = {
            '_source': false,
            '_parent': SearchConstants.resourceMappingName
        };

        ElasticSearch.putMapping(SearchConstants.resourceMembersMappingName, resourceMembersSchema, childOpts, function(err) {
            if (err) {
                return callback(err);
            }

            ElasticSearch.putMapping(SearchConstants.resourceMembershipsMappingName, resourceMembershipsSchema, childOpts, callback);
        });
    });
}

var createMembersSchema = function() {
    return {
        'direct_members': {
            'type': 'string',
            'store': 'no',
            'index': 'not_analyzed'
        }
    };
}

var createMembershipsSchema = function() {
    return {
        'direct_memberships': {
            'type': 'string',
            'store': 'no',
            'index': 'not_analyzed'
        }
    };
}

var createBaseSchema = function() {
    return {

        // the id of the resource
        'id': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },

        // The tenant to which the resource belongs
        'tenantId': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },

        // The type of the resource (e.g., content, user, group)
        'resourceType': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },

        // A sub type for the resource. For content, this could be 'link', 'file:application/pdf', sakaidoc, etc...
        // currently not indexed as there is no requirement currently in scope to search on this
        'resourceSubType': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },

        // holds the thumbnail url of the resource for display purposes
        'thumbnailUrl': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },

        // An arbitrary 'title' text of the resource. Will probably be used as a name to the resource
        'title': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },

        // Extra structured data that can be persisted with a document, but it is never indexed. An arbitrary JS object can be persisted here
        'extra': {
            'type': 'string',
            'store': 'yes',
            'index': 'no'
        },

        // The visibility of the resource (e.g., loggedin, public, private)
        'visibility': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },

        // the joinable nature of this resource (e.g., 'yes', 'no', 'request')
        'joinable': {
            'type': 'string',
            'store': 'yes',
            'index': 'not_analyzed'
        },

        // A general swag of text that will be used for full-text searches (i.e., q=*)
        // TODO: Optimize/specify an analyzer on this, surely the default isn't good enough ?
        'general': {
            'type': 'string',
            'store': 'no',
            'index': 'analyzed'
        },

        // The string of text that will be used to sort the item among other resources of the same or different type
        'sort': {
            'type': 'string',
            'store': 'no',
            'index': 'not_analyzed'
        }
    };
}
