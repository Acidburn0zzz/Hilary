/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var AuthzAPI = require('oae-authz');
var log = require('oae-logger').logger('oae-search-general');

var client = require('oae-search/lib/elasticsearch');
var SearchConstants = require('oae-search/lib/constants').SearchConstants;
var SearchUtil = require('oae-search/lib/util');

var RESOURCE_TYPES_ACCESS_SCOPED = [ SearchConstants.general.RESOURCE_TYPE_ALL, SearchConstants.general.RESOURCE_TYPE_CONTENT ];

/**
 * General search that searches a 'general' analyzed field on content, scoping it by user access.
 *
 * @param   {Context}       ctx                 The context of the current request
 * @param   {Object}        transformers        A hash keyed by resource type, and the value is a function that transforms search docs into docs that can be displayed to the current user.
 * @param   {Object}        opts                General search options
 * @param   {String}        opts.resourceType   The resource type to search
 * @param   {Function}      callback            Invoked when the process completes
 * @param   {Object}        callback.err        An error that occurred, if any
 * @param   {SearchResult}  callback.results    An object that represents the results of the query
 */
module.exports = function(ctx, transformers, opts, callback) {
    // sanitize the search options
    opts = opts || {};
    opts = {
        'resourceType': SearchUtil.getResourceTypeParam(opts.resourceType),
        'q': SearchUtil.getQueryParam(opts.q),
        'size': isNaN(opts.size) ? 10 : opts.size,
        'start': isNaN(opts.start) ? 0 : opts.start,
        'sort': SearchUtil.getSortParam(opts.sort)
    }

    if (_needsFilterByAccess(ctx, opts)) {
        // we'll need to know the group membership of this user to scope by content they have access to
        AuthzAPI.getPrincipalMemberships(ctx.user().id, function(err, groups) {
            if (err) {
                return callback(err);
            }

            // bind the access array to the search options
            var access = groups || [];
            access.push(ctx.user().id);
            opts.access = access;

            _search(ctx, transformers, opts, callback);
        });
    } else {
        _search(ctx, transformers, opts, callback);
    }
};

/**
 * Perform the search that searches a 'general' analyzed field on content, scoping it by user access. This is delegated from the
 * `module.exports` function for convenience, as it will access the members array only if necessary.
 *
 * @param   {Context}       ctx                 The context of the current request
 * @param   {Object}        transformers        A hash keyed by resource type, and the value is a function that transforms search docs
 *                                              into docs that can be displayed to the current user.
 * @param   {Object}        opts                General search options
 * @param   {Function}      callback            Invoked when the process completes
 * @param   {Object}        callback.err        An error that occurred, if any
 * @param   {SearchResult}  callback.results    An object that represents the results of the query
 */
var _search = function(ctx, transformers, opts, callback) {
    var data = {};

    // the query object for the Query DSL
    // if we're searching "all", we need to use a query_string query (as it supports the wildcard).
    // if we aren't searching for all, then we should use a match query to avoid errors in invalid query_string syntax
    var query = (opts.q === SearchConstants.query.ALL) ? {
        'query_string': {
            'default_field': 'general',
            'query': opts.q
        }
    } : {
        'match': {
            'general': {
                'query': opts.q,
                'operator': 'and'
            }
        }
    };

    // the filter object for the Query DSL
    var filter = null;

    // the type filter will filter by a particular document type (content, user, group)
    var typeFilter = (opts.resourceType !== SearchConstants.general.RESOURCE_TYPE_ALL) ? SearchUtil.filterTerm('_type', opts.resourceType) : null;

    // the access filter will filter by the user's group membership. If there was no access bound to the options, it will be undefined/null
    var accessFilter = SearchUtil.filterTerms('access', opts.access);

    if (ctx.user() && ctx.user().isGlobalAdmin()) {
        // if user is global admin, forget filtering by members and visibility, just query *everything*
        filter = typeFilter;
    } else if (ctx.user() && ctx.user().isTenantAdmin(ctx.tenant().alias)) {
        // if the user is the tenant admin, query everything only for their tenant, and apply regular "logged in user" filters
        // on other content.
        filter = SearchUtil.filterAnd(
            typeFilter,
            SearchUtil.filterOr(
                SearchUtil.filterTerm('tenantId', ctx.tenant().alias),
                SearchUtil.filterTerms('visibility', ['public', 'loggedin']),
                accessFilter
            )
        );
    } else if (ctx.user()) {
        // if user is authenticated, query for public, loggedin, or access-scoped
        filter = SearchUtil.filterAnd(
            typeFilter,
            SearchUtil.filterOr(
                SearchUtil.filterTerms('visibility', ['public', 'loggedin']),
                accessFilter
            )
        );
    } else {
        // for anonymous users, only show public content
        filter = SearchUtil.filterAnd(typeFilter, SearchUtil.filterTerm('visibility', 'public'));
    }

    // wrap the query and filter into the top-level Query DSL "query" object
    data = SearchUtil.createQuery(query, filter, {
        'from': opts.from,
        'size': opts.size,
        'sort': {
            // this 'sort' key is the name of the field that we're sorting on
            'sort': opts.sort
        }
    });

    client.search(data, null, function(err, results) {
        if (err) {
            return callback(err);
        }

        SearchUtil.transformSearchResults(ctx, 'general', transformers, results, callback);
    });
};

/*!
 * Determines whether or not the search needs to be scoped by the user's access privileges. This is true when:
 * 
 *  * The user is authenticated; and
 *  * The user is not a global administrator; and
 *  * The search includes content (users and groups always show a public representation of themselves); and
 *  * The search is actually specifying a query (e.g., if the search is '*', then we only include content that is public / loggedin)
 *
 * @param   {Context}   ctx         The context of the current request performing the search
 * @param   {Object}    opts        The (sanitized) search options
 * @return  {Boolean}               Whether or not the query specified by this user and options requires filtering by access privileges
 */
var _needsFilterByAccess = function(ctx, opts) {
    return ctx.user() && !ctx.user().isGlobalAdmin() && _.contains(RESOURCE_TYPES_ACCESS_SCOPED, opts.resourceType) &&
            opts.q !== SearchConstants.query.ALL;
};
