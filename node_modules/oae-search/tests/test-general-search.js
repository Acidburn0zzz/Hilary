/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var log = require('oae-logger').logger('test-general-search');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var anonymousRestContext = null;
var camAdminRestContext = null;

/**
 * Function that will fill up the anonymous and admin REST context
 */
before(function(callback) {
    // create admin and anonymous REST contexts
    anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
    camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    callback();
});

var verifyHasResultId = function(results, id) {
    results = results.results;
    if (results.length) {
        for (var i = 0; i < results.length; i++) {
            var doc = results[i];
            if (doc._id === id) {
                return true;
            }
        }
    }
    return false;
}

describe('General Search', function() {

    it('verify index created user', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);

            // verify we can search for the user
            var mrvisser = _.values(users)[0];
            RestAPI.Search.searchGeneral(anonymousRestContext, 'user', null, function(err, results) {
                assert.ok(!err);
                assert.ok(verifyHasResultId(results, mrvisser.user.id));
                callback();
            });
        });
    });

    it('verify index updated user', function(callback) {
        TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
            assert.ok(!err);

            var mrvisser = _.values(users)[0];
            RestAPI.Authentication.login(anonymousRestContext, mrvisser.restContext.userId, mrvisser.restContext.userPassword, function(err) {
                assert.ok(!err);

                // first check that the user does not match on the term 'Visser'
                RestAPI.Search.searchGeneral(mrvisser.restContext, 'user', { 'q': 'Visser' }, function(err, results) {
                    assert.ok(!err);
                    assert.ok(!verifyHasResultId(results, mrvisser.user.id));

                    // set the display name of the user
                    var updateProperties = {
                        'displayName': 'Branden Visser'
                    };

                    RestAPI.User.updateUser(mrvisser.restContext, mrvisser.user.id, updateProperties, function(err) {
                        assert.ok(!err);

                        // ensure that the new term matches the user
                        RestAPI.Search.searchGeneral(anonymousRestContext, 'user', { 'q': 'Visser' }, function(err, results) {
                            assert.ok(!err);
                            assert.ok(verifyHasResultId(results, mrvisser.user.id));
                            callback();
                        });
                    });
                });
            });
        });
    });

    it('verify index created group', function(callback) {
        TestsUtil.generateTestGroups(camAdminRestContext, 1, function(err, groups) {
            assert.ok(!err);

            var oaeTeam = _.values(groups)[0];
            RestAPI.Search.searchGeneral(camAdminRestContext, 'group', null, function(err, results) {
                assert.ok(!err);
                assert.ok(verifyHasResultId(results, oaeTeam.id));
                callback();
            });
        });
    });

    it('verify index updated group', function(callback) {
        TestsUtil.generateTestGroups(camAdminRestContext, 1, function(err, groups) {
            assert.ok(!err);

            var oaeTeam = _.values(groups)[0];
            // verify that the group does not match on the term 'Team'
            RestAPI.Search.searchGeneral(camAdminRestContext, 'group', { 'q': 'Team' }, function(err, results) {
                assert.ok(!err);
                assert.ok(!verifyHasResultId(results, oaeTeam.id));

                // update name to "OAE Team"
                RestAPI.Group.updateGroup(camAdminRestContext, oaeTeam.id, { 'name': 'OAE Team' }, function(err) {
                    assert.ok(!err);

                    // verify that the group now appears with the search term 'Team'
                    RestAPI.Search.searchGeneral(camAdminRestContext, 'group', { 'q': 'Team' }, function(err, results) {
                        assert.ok(!err);
                        assert.ok(verifyHasResultId(results, oaeTeam.id));
                        callback();
                    });
                });
            });
        });
    });

    it('verify index created content', function(callback) {
        RestAPI.Content.createLink(camAdminRestContext, 'Sakai Foundation', 'Link to Sakai Foundation Website', 'public', 'http://www.sakaifoundation.org', [], [], function(err, content) {
            assert.ok(!err);

            // verify search term Apereo does not match the content
            RestAPI.Search.searchGeneral(camAdminRestContext, 'content', { 'q': 'Sakai' }, function(err, results) {
                assert.ok(!err);
                assert.ok(verifyHasResultId(results, content.contentId));
                callback();
            });
        });
    });

    it('verify index updated content', function(callback) {
        RestAPI.Content.createLink(camAdminRestContext, 'Sakai Foundation', 'Link to Sakai Foundation Website', 'public', 'http://www.sakaifoundation.org', [], [], function(err, content) {
            assert.ok(!err);

            // verify search term Apereo does not match the content
            RestAPI.Search.searchGeneral(camAdminRestContext, 'content', { 'q': 'Apereo' }, function(err, results) {
                assert.ok(!err);
                assert.ok(!verifyHasResultId(results, content.contentId));

                // update the content
                RestAPI.Content.updateContent(camAdminRestContext, content.contentId, { 'description': 'Link to Apereo Foundation Website' }, function(err) {
                    assert.ok(!err);
                    
                    RestAPI.Search.searchGeneral(camAdminRestContext, 'content', { 'q': 'Apereo' }, function(err, results) {
                        assert.ok(!err);
                        assert.ok(verifyHasResultId(results, content.contentId));
                        callback();
                    });
                });
            });
        });
    });

    it('verify deleted content unsearchable', function(callback) {
        RestAPI.Content.createLink(camAdminRestContext, 'Sakai Foundation', 'Link to Sakai Foundation Website', 'public', 'http://www.sakaifoundation.org', [], [], function(err, content) {
            assert.ok(!err);

            // verify search term Apereo does not match the content
            RestAPI.Search.searchGeneral(camAdminRestContext, 'content', { 'q': 'Sakai' }, function(err, results) {
                assert.ok(!err);
                assert.ok(verifyHasResultId(results, content.contentId));

                RestAPI.Content.deleteContent(camAdminRestContext, content.contentId, function(err) {
                    assert.ok(!err);

                    RestAPI.Search.searchGeneral(camAdminRestContext, 'content', { 'q': 'Sakai' }, function(err, results) {
                        assert.ok(!err);
                        assert.ok(!verifyHasResultId(results, content.contentId));
                        callback();
                    });
                });
            });
        });
    });

    it('verify user access scope', function(callback) {
        TestsUtil.generateTestGroups(camAdminRestContext, 5, function(err, groups) {
            assert.ok(!err);
            var groupIds = _.keys(groups);

            TestsUtil.generateTestUsers(camAdminRestContext, 2, function(err, users) {
                assert.ok(!err);
                users = _.values(users);

                TestsUtil.generateGroupHierarchy(camAdminRestContext, groupIds, 'member', function(err) {
                    assert.ok(!err);

                    TestsUtil.generateGroupHierarchy(camAdminRestContext, [groupIds[4], users[0].user.id], 'member', function(err) {
                        assert.ok(!err);

                        RestAPI.Content.createLink(camAdminRestContext, 'Test Content 1', 'Test content description 1', 'private', 'http://www.sakaiproject.org/',  [], [groupIds[0]], function(err, contentObj) {
                            assert.ok(!err);

                            RestAPI.Authentication.login(users[0].restContext, users[0].restContext.userId, 'password', function(err) {
                                assert.ok(!err);

                                RestAPI.Search.searchGeneral(users[0].restContext, 'all', { 'q': 'Content' }, function(err, results) {
                                    assert.ok(!err);
                                    assert.ok(verifyHasResultId(results, contentObj.contentId));
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
