/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var _ = require('underscore');
var assert = require('assert');
var log = require('oae-logger').logger('test-general-search');
var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var anonymousRestContext = null;
var camAdminRestContext = null;
var gtAdminRestContext = null;

/**
 * Function that will fill up the anonymous and admin REST context
 */
before(function(callback) {
    // create admin and anonymous REST contexts
    anonymousRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host);
    camAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.cam.host);
    gtAdminRestContext = TestsUtil.createTenantAdminRestContext(global.oaeTests.tenants.gt.host);
    callback();
});

describe('General Search', function() {

    var _getDocById = function(results, docId) {
        for (var i = 0; i < results.results.length; i++) {
            var doc = results.results[i];
            if (doc.id === docId) {
                return doc;
            }
        }
        return null;
    };

    describe('User Indexing', function() {

        it('verify index created user', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                // verify we can search for the user
                var mrvisser = _.values(users)[0];
                RestAPI.Search.search(anonymousRestContext, 'general', ['user'], null, function(err, results) {
                    assert.ok(!err);
                    assert.ok(_getDocById(results, mrvisser.user.id));
                    callback();
                });
            });
        });

        it('verify index updated user', function(callback) {
            TestsUtil.generateTestUsers(camAdminRestContext, 1, function(err, users) {
                assert.ok(!err);

                var mrvisser = _.values(users)[0];
                RestAPI.Authentication.login(anonymousRestContext, mrvisser.restContext.userId, mrvisser.restContext.userPassword, function(err) {
                    assert.ok(!err);

                    // first check that the user does not match on the term 'Visser'
                    RestAPI.Search.search(mrvisser.restContext, 'general', ['user'], { 'q': 'Visser' }, function(err, results) {
                        assert.ok(!err);
                        assert.ok(!_getDocById(results, mrvisser.user.id));

                        // set the display name of the user
                        var updateProperties = {
                            'displayName': 'Branden Visser'
                        };

                        RestAPI.User.updateUser(mrvisser.restContext, mrvisser.user.id, updateProperties, function(err) {
                            assert.ok(!err);

                            // ensure that the new term matches the user
                            RestAPI.Search.search(anonymousRestContext, 'general', ['user'], { 'q': 'Visser' }, function(err, results) {
                                assert.ok(!err);
                                assert.ok(_getDocById(results, mrvisser.user.id));
                                callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Group Indexing', function() {

        it('verify index created group', function(callback) {
            TestsUtil.generateTestGroups(camAdminRestContext, 1, function(err, groups) {
                assert.ok(!err);
    
                var oaeTeam = _.values(groups)[0];
                RestAPI.Search.search(camAdminRestContext, 'general', ['group'], null, function(err, results) {
                    assert.ok(!err);
                    assert.ok(_getDocById(results, oaeTeam.id));
                    callback();
                });
            });
        });
    
        it('verify index updated group', function(callback) {
            TestsUtil.generateTestGroups(camAdminRestContext, 1, function(err, groups) {
                assert.ok(!err);
    
                var oaeTeam = _.values(groups)[0];
                // verify that the group does not match on the term 'Team'
                RestAPI.Search.search(camAdminRestContext, 'general', ['group'], { 'q': 'Team' }, function(err, results) {
                    assert.ok(!err);
                    assert.ok(!_getDocById(results, oaeTeam.id));
    
                    // update name to "OAE Team"
                    RestAPI.Group.updateGroup(camAdminRestContext, oaeTeam.id, { 'name': 'OAE Team' }, function(err) {
                        assert.ok(!err);
    
                        // verify that the group now appears with the search term 'Team'
                        RestAPI.Search.search(camAdminRestContext, 'general', ['group'], { 'q': 'Team' }, function(err, results) {
                            assert.ok(!err);
                            assert.ok(_getDocById(results, oaeTeam.id));
                            callback();
                        });
                    });
                });
            });
        });
    });
    
    describe('Content Indexing', function() {
        it('verify index created content', function(callback) {
            RestAPI.Content.createLink(camAdminRestContext, 'Sakai Foundation', 'Link to Sakai Foundation Website', 'public', 'http://www.sakaifoundation.org', [], [], function(err, content) {
                assert.ok(!err);

                // verify search term Apereo does not match the content
                RestAPI.Search.search(camAdminRestContext, 'general', ['content'], { 'q': 'Sakai' }, function(err, results) {
                    assert.ok(!err);
                    assert.ok(_getDocById(results, content.contentId));
                    callback();
                });
            });
        });

        it('verify index updated content', function(callback) {
            RestAPI.Content.createLink(camAdminRestContext, 'Sakai Foundation', 'Link to Sakai Foundation Website', 'public', 'http://www.sakaifoundation.org', [], [], function(err, content) {
                assert.ok(!err);

                // verify search term Apereo does not match the content
                RestAPI.Search.search(camAdminRestContext, 'general', ['content'], { 'q': 'Apereo' }, function(err, results) {
                    assert.ok(!err);
                    assert.ok(!_getDocById(results, content.contentId));

                    // update the content
                    RestAPI.Content.updateContent(camAdminRestContext, content.contentId, { 'description': 'Link to Apereo Foundation Website' }, function(err) {
                        assert.ok(!err);
                        
                        RestAPI.Search.search(camAdminRestContext, 'general', ['content'], { 'q': 'Apereo' }, function(err, results) {
                            assert.ok(!err);
                            assert.ok(_getDocById(results, content.contentId));
                            callback();
                        });
                    });
                });
            });
        });
    });

    describe('Content Search', function() {

        it('verify deleted content unsearchable', function(callback) {
            RestAPI.Content.createLink(camAdminRestContext, 'Sakai Foundation', 'Link to Sakai Foundation Website', 'public', 'http://www.sakaifoundation.org', [], [], function(err, content) {
                assert.ok(!err);

                // verify search term Apereo does not match the content
                RestAPI.Search.search(camAdminRestContext, 'general', ['content'], { 'q': 'Sakai' }, function(err, results) {
                    assert.ok(!err);
                    assert.ok(_getDocById(results, content.contentId));

                    RestAPI.Content.deleteContent(camAdminRestContext, content.contentId, function(err) {
                        assert.ok(!err);

                        RestAPI.Search.search(camAdminRestContext, 'general', ['content'], { 'q': 'Sakai' }, function(err, results) {
                            assert.ok(!err);
                            assert.ok(!_getDocById(results, content.contentId));
                            callback();
                        });
                    });
                });
            });
        });

        it('verify public content searchable by everyone', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        TestsUtil.generateTestGroups(camAdminRestContext, 5, function(err, groups) {
                            assert.ok(!err);
                            var groupIds = _.keys(groups);

                            // give jack access via group
                            TestsUtil.generateGroupHierarchy(camAdminRestContext, groupIds, 'member', function(err) {
                                assert.ok(!err);

                                TestsUtil.generateGroupHierarchy(camAdminRestContext, [groupIds[4], jack.id], 'member', function(err) {
                                    assert.ok(!err);

                                    RestAPI.Content.createLink(camAdminRestContext, 'Test Content 1', 'Test content description 1', 'public', 'http://www.sakaiproject.org/',  [], [groupIds[0]], function(err, contentObj) {
                                        assert.ok(!err);

                                        // verify anonymous can see it
                                        RestAPI.Search.search(anonymousRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                            assert.ok(!err);
                                            assert.ok(_getDocById(results, contentObj.contentId));

                                            // verify cross-tenant user can
                                            RestAPI.Search.search(darthVaderRestContext, 'general', ['all'], { 'q': 'Content', 'includeExternal': true }, function(err, results) {                                    
                                                assert.ok(!err);
                                                assert.ok(_getDocById(results, contentObj.contentId));

                                                // verify tenant admin can see it
                                                RestAPI.Search.search(camAdminRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                                    assert.ok(!err);
                                                    assert.ok(_getDocById(results, contentObj.contentId));

                                                    // verify same-tenant loggedin user can see it
                                                    RestAPI.Search.search(janeRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                                        assert.ok(!err);
                                                        assert.ok(_getDocById(results, contentObj.contentId));

                                                        // verify permitted user can see it
                                                        RestAPI.Search.search(jackRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {
                                                            assert.ok(!err);
                                                            assert.ok(_getDocById(results, contentObj.contentId));
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify loggedin content search not searchable by anonymous or cross-tenant', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        TestsUtil.generateTestGroups(camAdminRestContext, 5, function(err, groups) {
                            assert.ok(!err);
                            var groupIds = _.keys(groups);

                            // give jack access via group
                            TestsUtil.generateGroupHierarchy(camAdminRestContext, groupIds, 'member', function(err) {
                                assert.ok(!err);

                                TestsUtil.generateGroupHierarchy(camAdminRestContext, [groupIds[4], jack.id], 'member', function(err) {
                                    assert.ok(!err);

                                    RestAPI.Content.createLink(camAdminRestContext, 'Test Content 1', 'Test content description 1', 'loggedin', 'http://www.sakaiproject.org/',  [], [groupIds[0]], function(err, contentObj) {
                                        assert.ok(!err);

                                        // verify anonymous cannot see it
                                        RestAPI.Search.search(anonymousRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                            assert.ok(!err);
                                            assert.ok(!_getDocById(results, contentObj.contentId));

                                            // verify cross-tenant user cannot see it
                                            RestAPI.Search.search(darthVaderRestContext, 'general', ['all'], { 'q': 'Content', 'includeExternal': true }, function(err, results) {                                    
                                                assert.ok(!err);
                                                assert.ok(!_getDocById(results, contentObj.contentId));

                                                // verify tenant admin can see it
                                                RestAPI.Search.search(camAdminRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                                    assert.ok(!err);
                                                    assert.ok(_getDocById(results, contentObj.contentId));

                                                    // verify same-tenant loggedin user can see it
                                                    RestAPI.Search.search(janeRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                                        assert.ok(!err);
                                                        assert.ok(_getDocById(results, contentObj.contentId));

                                                        // verify permitted user can see it
                                                        RestAPI.Search.search(jackRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {
                                                            assert.ok(!err);
                                                            assert.ok(_getDocById(results, contentObj.contentId));
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify private content search not searchable by anyone but admin and privileged users', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access

            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        TestsUtil.generateTestGroups(camAdminRestContext, 5, function(err, groups) {
                            assert.ok(!err);
                            var groupIds = _.keys(groups);

                            // give jack access via group
                            TestsUtil.generateGroupHierarchy(camAdminRestContext, groupIds, 'member', function(err) {
                                assert.ok(!err);

                                TestsUtil.generateGroupHierarchy(camAdminRestContext, [groupIds[4], jack.id], 'member', function(err) {
                                    assert.ok(!err);

                                    RestAPI.Content.createLink(camAdminRestContext, 'Test Content 1', 'Test content description 1', 'private', 'http://www.sakaiproject.org/',  [], [groupIds[0]], function(err, contentObj) {
                                        assert.ok(!err);

                                        // verify anonymous cannot see it
                                        RestAPI.Search.search(anonymousRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                            assert.ok(!err);
                                            assert.ok(!_getDocById(results, contentObj.contentId));

                                            // verify cross-tenant user cannot see it
                                            RestAPI.Search.search(darthVaderRestContext, 'general', ['all'], { 'q': 'Content', 'includeExternal': true }, function(err, results) {                                    
                                                assert.ok(!err);
                                                assert.ok(!_getDocById(results, contentObj.contentId));

                                                // verify tenant admin can see it
                                                RestAPI.Search.search(camAdminRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                                    assert.ok(!err);
                                                    assert.ok(_getDocById(results, contentObj.contentId));

                                                    // verify same-tenant loggedin user cannot see it
                                                    RestAPI.Search.search(janeRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {                                    
                                                        assert.ok(!err);
                                                        assert.ok(!_getDocById(results, contentObj.contentId));

                                                        // verify permitted user can see it
                                                        RestAPI.Search.search(jackRestContext, 'general', ['all'], { 'q': 'Content' }, function(err, results) {
                                                            assert.ok(!err);
                                                            assert.ok(_getDocById(results, contentObj.contentId));
                                                            callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('User Search Visibility', function() {

        it('verify public user profile visible to everyone', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');

            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access
            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                var jackOpts = {
                    'visibility': 'public',
                    'publicAlias': 'I was hidden'
                };

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', jackOpts, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // verify hidden for cross-tenant user on internal search
                        RestAPI.Search.search(darthVaderRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                            assert.ok(!err);
                            var jackDoc = _getDocById(results, jack.id);
                            assert.ok(!jackDoc);

                            // verify visible for cross-tenant user on external search
                            RestAPI.Search.search(darthVaderRestContext, 'general', ['user'], {'q': 'Jack', 'includeExternal': true}, function(err, results) {
                                assert.ok(!err);
                                var jackDoc = _getDocById(results, jack.id);
                                assert.ok(jackDoc);
                                assert.equal(jackDoc.id, jack.id)
                                assert.equal(jackDoc.tenantId, jack.tenant);
                                assert.equal(jackDoc.title, jack.displayName);
                                assert.equal(jackDoc.visibility, jack.visibility);

                                // verify not hidden for anonymous
                                RestAPI.Search.search(anonymousRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                    assert.ok(!err);
                                    var jackDoc = _getDocById(results, jack.id);
                                    assert.ok(jackDoc);
                                    assert.equal(jackDoc.id, jack.id)
                                    assert.equal(jackDoc.tenantId, jack.tenant);
                                    assert.equal(jackDoc.title, jack.displayName);
                                    assert.equal(jackDoc.visibility, jack.visibility);

                                    // verify not hidden for other in-tenant loggedin user
                                    RestAPI.Search.search(janeRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                        assert.ok(!err);
                                        var jackDoc = _getDocById(results, jack.id);
                                        assert.ok(jackDoc);
                                        assert.equal(jackDoc.id, jack.id)
                                        assert.equal(jackDoc.tenantId, jack.tenant);
                                        assert.equal(jackDoc.title, jack.displayName);
                                        assert.equal(jackDoc.visibility, jack.visibility);

                                        // verify not hidden for admin
                                        RestAPI.Search.search(camAdminRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                            assert.ok(!err);
                                            var jackDoc = _getDocById(results, jack.id);
                                            assert.ok(jackDoc);
                                            assert.equal(jackDoc.id, jack.id)
                                            assert.equal(jackDoc.tenantId, jack.tenant);
                                            assert.equal(jackDoc.title, jack.displayName);
                                            assert.equal(jackDoc.visibility, jack.visibility);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        it('verify loggedin user profile not visibile cross-tenant or to anonymous', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');
            
            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access
            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                var jackOpts = {
                    'visibility': 'loggedin',
                    'publicAlias': 'I was hidden'
                };

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', jackOpts, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // verify hidden for cross-tenant user on internal search
                        RestAPI.Search.search(darthVaderRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                            assert.ok(!err);
                            var jackDoc = _getDocById(results, jack.id);
                            assert.ok(!jackDoc);

                            // verify not visible for cross-tenant user on external search
                            RestAPI.Search.search(darthVaderRestContext, 'general', ['user'], {'q': 'Jack', 'includeExternal': true}, function(err, results) {
                                assert.ok(!err);
                                var jackDoc = _getDocById(results, jack.id);
                                assert.ok(!jackDoc);

                                // verify not visible for anonymous
                                RestAPI.Search.search(anonymousRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                    assert.ok(!err);
                                    var jackDoc = _getDocById(results, jack.id);
                                    assert.ok(!jackDoc);

                                    // verify visible for other in-tenant loggedin user
                                    RestAPI.Search.search(janeRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                        assert.ok(!err);
                                        var jackDoc = _getDocById(results, jack.id);
                                        assert.ok(jackDoc);
                                        assert.equal(jackDoc.id, jack.id)
                                        assert.equal(jackDoc.tenantId, jack.tenant);
                                        assert.equal(jackDoc.title, jack.displayName);
                                        assert.equal(jackDoc.visibility, jack.visibility);

                                        // verify not hidden for admin
                                        RestAPI.Search.search(camAdminRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                            assert.ok(!err);
                                            var jackDoc = _getDocById(results, jack.id);
                                            assert.ok(jackDoc);
                                            assert.equal(jackDoc.id, jack.id)
                                            assert.equal(jackDoc.tenantId, jack.tenant);
                                            assert.equal(jackDoc.title, jack.displayName);
                                            assert.equal(jackDoc.visibility, jack.visibility);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify private user profile not visibile to anonyone', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');
            
            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access
            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                var jackOpts = {
                    'visibility': 'private',
                    'publicAlias': 'I was hidden'
                };

                RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', jackOpts, function(err, jack) {
                    assert.ok(!err);
                    var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                        assert.ok(!err);
                        var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                        // verify hidden for cross-tenant user on internal search
                        RestAPI.Search.search(darthVaderRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                            assert.ok(!err);
                            var jackDoc = _getDocById(results, jack.id);
                            assert.ok(!jackDoc);

                            // verify not visible for cross-tenant user on external search
                            RestAPI.Search.search(darthVaderRestContext, 'general', ['user'], {'q': 'Jack', 'includeExternal': true}, function(err, results) {
                                assert.ok(!err);
                                var jackDoc = _getDocById(results, jack.id);
                                assert.ok(!jackDoc);

                                // verify not visible for anonymous
                                RestAPI.Search.search(anonymousRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                    assert.ok(!err);
                                    var jackDoc = _getDocById(results, jack.id);
                                    assert.ok(!jackDoc);

                                    // verify not visible for other in-tenant loggedin user
                                    RestAPI.Search.search(janeRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                        assert.ok(!err);
                                        var jackDoc = _getDocById(results, jack.id);
                                        assert.ok(!jackDoc);

                                        // verify not hidden for admin
                                        RestAPI.Search.search(camAdminRestContext, 'general', ['user'], {'q': 'Jack'}, function(err, results) {
                                            assert.ok(!err);
                                            var jackDoc = _getDocById(results, jack.id);
                                            assert.ok(jackDoc);
                                            assert.equal(jackDoc.id, jack.id)
                                            assert.equal(jackDoc.tenantId, jack.tenant);
                                            assert.equal(jackDoc.title, jack.displayName);
                                            assert.equal(jackDoc.visibility, jack.visibility);
                                            callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Group Search Visibility', function() {

        it('verify public group is searchable by everyone', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');
            var sithUsername = TestsUtil.generateTestUserId('sith');
            var groupAlias = TestsUtil.generateTestUserId('group');
            
            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access
            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                // create another user, this user will also be a member of the group
                RestAPI.User.createUser(gtAdminRestContext, sithUsername, 'password', 'Sithy Sitherson', null, function(err, sith) {
                    assert.ok(!err);
                    var sithRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, sithUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                            assert.ok(!err);
                            var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                            // create the group, including sith as a user
                            RestAPI.Group.createGroup(jackRestContext, groupAlias, groupAlias, 'A really awesome group', 'public', 'no', [], [sith.id], function(err, group) {
                                assert.ok(!err);

                                // verify anonymous user search access it
                                RestAPI.Search.search(anonymousRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                    assert.ok(!err);
                                    var groupDoc = _getDocById(results, group.id);
                                    assert.ok(groupDoc);
                                    assert.equal(groupDoc.tenantId, group.tenant);
                                    assert.equal(groupDoc.id, group.id);
                                    assert.equal(groupDoc.title, group.name);
                                    assert.equal(groupDoc.visibility, group.visibility);

                                    // verify cross-tenant user cannot query the group without includeExternal
                                    RestAPI.Search.search(darthVaderRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                        assert.ok(!err);
                                        var groupDoc = _getDocById(results, group.id);
                                        assert.ok(!groupDoc);

                                        // verify cross-tenant user can query the group with includeExternal
                                        RestAPI.Search.search(darthVaderRestContext, 'general', ['group'], {'q': 'awesome', 'includeExternal': true}, function(err, results) {
                                            assert.ok(!err);
                                            var groupDoc = _getDocById(results, group.id);
                                            assert.ok(groupDoc);
                                            assert.equal(groupDoc.tenantId, group.tenant);
                                            assert.equal(groupDoc.id, group.id);
                                            assert.equal(groupDoc.title, group.name);
                                            assert.equal(groupDoc.visibility, group.visibility);

                                            // verify cross-tenant *member* can query the group *without* includeExternal
                                            RestAPI.Search.search(sithRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                assert.ok(!err);
                                                var groupDoc = _getDocById(results, group.id);
                                                assert.ok(groupDoc);
                                                assert.equal(groupDoc.tenantId, group.tenant);
                                                assert.equal(groupDoc.id, group.id);
                                                assert.equal(groupDoc.title, group.name);
                                                assert.equal(groupDoc.visibility, group.visibility);

                                                // verify another same-tenant loggedin user can query it
                                                RestAPI.Search.search(janeRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                    assert.ok(!err);
                                                    var groupDoc = _getDocById(results, group.id);
                                                    assert.ok(groupDoc);
                                                    assert.equal(groupDoc.tenantId, group.tenant);
                                                    assert.equal(groupDoc.id, group.id);
                                                    assert.equal(groupDoc.title, group.name);
                                                    assert.equal(groupDoc.visibility, group.visibility);

                                                    // verify member user can query it
                                                    RestAPI.Search.search(jackRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                        assert.ok(!err);
                                                        var groupDoc = _getDocById(results, group.id);
                                                        assert.ok(groupDoc);
                                                        assert.equal(groupDoc.tenantId, group.tenant);
                                                        assert.equal(groupDoc.id, group.id);
                                                        assert.equal(groupDoc.title, group.name);
                                                        assert.equal(groupDoc.visibility, group.visibility);
                                                        callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        it('verify loggedin group search visibility', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');
            var sithUsername = TestsUtil.generateTestUserId('sith');
            var groupAlias = TestsUtil.generateTestUserId('group');
            var groupAliasJoinable = TestsUtil.generateTestUserId('groupJoinable');

            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access
            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                // create another user, this user will also be a member of the group
                RestAPI.User.createUser(gtAdminRestContext, sithUsername, 'password', 'Sithy Sitherson', null, function(err, sith) {
                    assert.ok(!err);
                    var sithRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, sithUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                            assert.ok(!err);
                            var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                            // create the group, including sith as a user
                            RestAPI.Group.createGroup(jackRestContext, groupAlias, groupAlias, 'A really awesome group', 'loggedin', 'no', [], [sith.id], function(err, group) {
                                assert.ok(!err);

                                // create the joinable group, including sith as a user
                                RestAPI.Group.createGroup(jackRestContext, groupAliasJoinable, groupAliasJoinable, 'A really super joinable group', 'loggedin', 'request', [], [sith.id], function(err, groupJoinable) {
                                    assert.ok(!err);

                                    // verify anonymous user search cannot access either
                                    RestAPI.Search.search(anonymousRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                        assert.ok(!err);
                                        var groupDoc = _getDocById(results, group.id);
                                        assert.ok(!groupDoc);

                                        RestAPI.Search.search(anonymousRestContext, 'general', ['group'], {'q': 'joinable'}, function(err, results) {
                                            assert.ok(!err);
                                            var groupDoc = _getDocById(results, groupJoinable.id);
                                            assert.ok(!groupDoc);

                                            // verify cross-tenant user cannot query the unjoinable group
                                            RestAPI.Search.search(darthVaderRestContext, 'general', ['group'], {'q': 'awesome', 'includeExternal': true}, function(err, results) {
                                                assert.ok(!err);
                                                var groupDoc = _getDocById(results, group.id);
                                                assert.ok(!groupDoc);

                                                // verify cross-tenant user can query the joinable group
                                                RestAPI.Search.search(darthVaderRestContext, 'general', ['group'], {'q': 'joinable', 'includeExternal': true}, function(err, results) {
                                                    assert.ok(!err);
                                                    var groupDoc = _getDocById(results, groupJoinable.id);
                                                    assert.ok(groupDoc);
                                                    assert.equal(groupDoc.tenantId, groupJoinable.tenant);
                                                    assert.equal(groupDoc.id, groupJoinable.id);
                                                    assert.equal(groupDoc.title, groupJoinable.name);
                                                    assert.equal(groupDoc.visibility, groupJoinable.visibility);
                                                    assert.equal(groupDoc.joinable, groupJoinable.joinable);

                                                    // verify cross-tenant member can query the unjoinable group
                                                    RestAPI.Search.search(sithRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                        assert.ok(!err);
                                                        var groupDoc = _getDocById(results, group.id);
                                                        assert.ok(groupDoc);
                                                        assert.equal(groupDoc.tenantId, group.tenant);
                                                        assert.equal(groupDoc.id, group.id);
                                                        assert.equal(groupDoc.title, group.name);
                                                        assert.equal(groupDoc.visibility, group.visibility);

                                                        // verify another same-tenant loggedin user can query it
                                                        RestAPI.Search.search(janeRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                            assert.ok(!err);
                                                            var groupDoc = _getDocById(results, group.id);
                                                            assert.ok(groupDoc);
                                                            assert.equal(groupDoc.tenantId, group.tenant);
                                                            assert.equal(groupDoc.id, group.id);
                                                            assert.equal(groupDoc.title, group.name);
                                                            assert.equal(groupDoc.visibility, group.visibility);

                                                            // verify member user can query it
                                                            RestAPI.Search.search(jackRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                                assert.ok(!err);
                                                                var groupDoc = _getDocById(results, group.id);
                                                                assert.ok(groupDoc);
                                                                assert.equal(groupDoc.tenantId, group.tenant);
                                                                assert.equal(groupDoc.id, group.id);
                                                                assert.equal(groupDoc.title, group.name);
                                                                assert.equal(groupDoc.visibility, group.visibility);
                                                                callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });


        it('verify private group search visibility', function(callback) {
            var jackUsername = TestsUtil.generateTestUserId('jack');
            var janeUsername = TestsUtil.generateTestUserId('jane');
            var darthVaderUsername = TestsUtil.generateTestUserId('darthVader');
            var sithUsername = TestsUtil.generateTestUserId('sith');
            var groupAlias = TestsUtil.generateTestUserId('group');
            var groupAliasJoinable = TestsUtil.generateTestUserId('groupJoinable');

            // create a user from another tenant, a loggedin user from the same tenant, and a user from the same tenant that has access
            RestAPI.User.createUser(gtAdminRestContext, darthVaderUsername, 'password', 'Darth Vader', null, function(err, darthVader) {
                assert.ok(!err);
                var darthVaderRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, darthVaderUsername, 'password');

                // create another user, this user will also be a member of the group
                RestAPI.User.createUser(gtAdminRestContext, sithUsername, 'password', 'Sithy Sitherson', null, function(err, sith) {
                    assert.ok(!err);
                    var sithRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.gt.host, sithUsername, 'password');

                    RestAPI.User.createUser(camAdminRestContext, jackUsername, 'password', 'Jack McJackerson', null, function(err, jack) {
                        assert.ok(!err);
                        var jackRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, jackUsername, 'password');

                        RestAPI.User.createUser(camAdminRestContext, janeUsername, 'password', 'Janey McJaneFace', null, function(err, jane) {
                            assert.ok(!err);
                            var janeRestContext = TestsUtil.createTenantRestContext(global.oaeTests.tenants.cam.host, janeUsername, 'password');

                            // create the group, including sith as a user
                            RestAPI.Group.createGroup(jackRestContext, groupAlias, groupAlias, 'A really awesome group', 'private', 'no', [], [sith.id], function(err, group) {
                                assert.ok(!err);

                                // create the joinable group, including sith as a user
                                RestAPI.Group.createGroup(jackRestContext, groupAliasJoinable, groupAliasJoinable, 'A really super joinable group', 'private', 'request', [], [sith.id], function(err, groupJoinable) {
                                    assert.ok(!err);

                                    // verify anonymous user search cannot access either
                                    RestAPI.Search.search(anonymousRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                        assert.ok(!err);
                                        var groupDoc = _getDocById(results, group.id);
                                        assert.ok(!groupDoc);

                                        RestAPI.Search.search(anonymousRestContext, 'general', ['group'], {'q': 'joinable'}, function(err, results) {
                                            assert.ok(!err);
                                            var groupDoc = _getDocById(results, groupJoinable.id);
                                            assert.ok(!groupDoc);

                                            // verify cross-tenant user cannot query the unjoinable group
                                            RestAPI.Search.search(darthVaderRestContext, 'general', ['group'], {'q': 'awesome', 'includeExternal': true}, function(err, results) {
                                                assert.ok(!err);
                                                var groupDoc = _getDocById(results, group.id);
                                                assert.ok(!groupDoc);

                                                // verify cross-tenant user can query the joinable group
                                                RestAPI.Search.search(darthVaderRestContext, 'general', ['group'], {'q': 'joinable', 'includeExternal': true}, function(err, results) {
                                                    assert.ok(!err);
                                                    var groupDoc = _getDocById(results, groupJoinable.id);
                                                    assert.ok(groupDoc);
                                                    assert.equal(groupDoc.tenantId, groupJoinable.tenant);
                                                    assert.equal(groupDoc.id, groupJoinable.id);
                                                    assert.equal(groupDoc.title, groupJoinable.name);
                                                    assert.equal(groupDoc.visibility, groupJoinable.visibility);
                                                    assert.equal(groupDoc.joinable, groupJoinable.joinable);

                                                    // verify cross-tenant member can query the unjoinable group
                                                    RestAPI.Search.search(sithRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                        assert.ok(!err);
                                                        var groupDoc = _getDocById(results, group.id);
                                                        assert.ok(groupDoc);
                                                        assert.equal(groupDoc.tenantId, group.tenant);
                                                        assert.equal(groupDoc.id, group.id);
                                                        assert.equal(groupDoc.title, group.name);
                                                        assert.equal(groupDoc.visibility, group.visibility);

                                                        // verify another same-tenant loggedin user cannot query it
                                                        RestAPI.Search.search(janeRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                            assert.ok(!err);
                                                            var groupDoc = _getDocById(results, group.id);
                                                            assert.ok(!groupDoc);

                                                            // verify member user can query it
                                                            RestAPI.Search.search(jackRestContext, 'general', ['group'], {'q': 'awesome'}, function(err, results) {
                                                                assert.ok(!err);
                                                                var groupDoc = _getDocById(results, group.id);
                                                                assert.ok(groupDoc);
                                                                assert.equal(groupDoc.tenantId, group.tenant);
                                                                assert.equal(groupDoc.id, group.id);
                                                                assert.equal(groupDoc.title, group.name);
                                                                assert.equal(groupDoc.visibility, group.visibility);
                                                                callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
