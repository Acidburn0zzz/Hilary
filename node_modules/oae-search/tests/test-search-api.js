/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var util = require('util');

var log = require('oae-logger').logger('test-general-search');
var SearchAPI = require('oae-search');
var TestsUtil = require('oae-tests');

describe('Search API', function() {

    it('verify cannot register non-unique document transformers', function(callback) {
        SearchAPI.registerDocumentTransformer('test-registerDocumentTransformer', function() { });

        // try and register a second of the same time, log the error and verify it happened.
        var err = null;
        try {
            SearchAPI.registerDocumentTransformer('test-registerDocumentTransformer', function() { });
        } catch (ex) {
            err = ex;
        }

        assert.ok(err);
        callback();
    });

    it('verify cannot search invalid type', function(callback) {
        SearchAPI.search({}, 'not-a-search-type', {}, function(err, docs) {
            assert.ok(err);
            assert.equal(err.code, 500);
            callback();
        });
    });

    it('verify create, verify and delete index', function(callback) {
        var rnd = Math.floor(Math.random()*100000);
        var indexName = util.format('oaetest-create-verify-delete-%s', rnd);
        SearchAPI.indexExists(indexName, function(err, exists) {
            assert.ok(!err);
            assert.ok(!exists);

            SearchAPI.createIndex(indexName, {}, function(err) {
                assert.ok(!err);

                SearchAPI.indexExists(indexName, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);

                    SearchAPI.deleteIndex(indexName, function(err) {
                        assert.ok(!err);

                        SearchAPI.indexExists(indexName, function(err, exists) {
                            assert.ok(!err);
                            assert.ok(!exists);
                            callback();
                        });
                    });
                });
            });
        });
    });

    it('verify no error creating existing index', function(callback) {
        var rnd = Math.floor(Math.random()*100000);
        var indexName = util.format('oaetest-create-nonerror-existing-%s', rnd);
        SearchAPI.indexExists(indexName, function(err, exists) {
            assert.ok(!err);
            assert.ok(!exists);

            SearchAPI.createIndex(indexName, {}, function(err) {
                assert.ok(!err);

                SearchAPI.createIndex(indexName, {}, function(err) {
                    assert.ok(!err);

                    SearchAPI.deleteIndex(indexName, function(err) {
                        assert.ok(!err);
                        callback();
                    });
                });
            });
        });
    });

    it('verify no error deleting non-existing index', function(callback) {
        var rnd = Math.floor(Math.random()*100000);
        var indexName = util.format('oaetest-delete-nonerror-existing-%s', rnd);
        SearchAPI.indexExists(indexName, function(err, exists) {
            assert.ok(!err);
            assert.ok(!exists);

            SearchAPI.deleteIndex(indexName, function(err) {
                assert.ok(!err);
                callback();
            });
        });
    });

    it('verify put, verify mappings', function(callback) {
        var rnd = Math.floor(Math.random()*100000);
        var typeName = util.format('oaetest-put-verify-mappings-%s', rnd);
        SearchAPI.mappingExists(typeName, function(err, exists) {
            assert.ok(!err);
            assert.ok(!exists);

            SearchAPI.putMapping(typeName, { 'testField': { 'type': 'string' }}, function(err) {
                assert.ok(!err);

                SearchAPI.mappingExists(typeName, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);
                    callback();
                });
            });
        });
    });

    it('verify no error creating existing mapping', function(callback) {
        var rnd = Math.floor(Math.random()*100000);
        var typeName = util.format('oaetest-error-creating-existing-%s', rnd);
        SearchAPI.mappingExists(typeName, function(err, exists) {
            assert.ok(!err);
            assert.ok(!exists);

            SearchAPI.putMapping(typeName, { 'testField': { 'type': 'string' }}, function(err) {
                assert.ok(!err);

                SearchAPI.putMapping(typeName, { 'testField': { 'type': 'string' }}, function(err) {
                    assert.ok(!err);
                    callback();
                });
            });
        });
    });
});