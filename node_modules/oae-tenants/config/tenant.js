/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the 'License'); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an 'AS IS'
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Fields = require('oae-config/lib/fields');

var widths = [
    {
        'name': '25%',
        'value': '3'
    },
    {
        'name': '33%',
        'value': '4'
    },
    {
        'name': '50%',
        'value': '6'
    },
    {
        'name': '66%',
        'value': '8'
    },
    {
        'name': '75%',
        'value': '9'
    },
    {
        'name': '100%',
        'value': '12'
    }
];

/**
 * Create a landing page block
 *
 * @return {Object}         A configurable landing page block
 * @api private
 */
var _createBlock = function() {
    return {
        'name': 'Block values',
        'description': 'Block values',
        'elements': {
            'type': new Fields.List('Block type', 'Block type', null, [
                // TODO: Remove `empty` type once a better admin UI is in place
                {
                    'name': 'Empty',
                    'value': 'empty'
                },
                {
                    'name': 'Search',
                    'value': 'search'
                },
                {
                    'name': 'Text',
                    'value': 'text'
                },
                {
                    'name': 'Text with icon',
                    'value': 'iconText'
                },
                {
                    'name': 'Image',
                    'value': 'image'
                },
                {
                    'name': 'Video',
                    'value': 'video'
                }
            ],  {'suppress': true}),
            'xs': new Fields.List('XS Block width', 'Block width at extra small resolution', '12', widths, {'suppress': true}),
            'sm': new Fields.List('SM Block width', 'Block width at small resolution', '12', widths, {'suppress': true}),
            'md': new Fields.List('MD Block width', 'Block width at medium resolution', '12', widths, {'suppress': true}),
            'lg': new Fields.List('LG Block width', 'Block width at large resolution', '12', widths, {'suppress': true}),
            'minHeight': new Fields.Text('Block minimum height', 'Minimum height for the block in px', null, {'suppress': true}),
            'bgColor': new Fields.Text('Block background color', 'Background color for the block', null, {'suppress': true}),
            'titleColor': new Fields.Text('Block title color', 'Title color for the block', null, {'suppress': true}),
            'textColor': new Fields.Text('Block text color', 'Text color for the block', null, {'suppress': true}),
            'text': new Fields.InternationalizableText('Block text', 'Text content for the block', null, {'suppress': true}),
            'icon': new Fields.Text('Block icon', 'Icon for the block', null, {'suppress': true}),
            'imgUrl': new Fields.Text('Image URL', 'Image URL', null, {'suppress': true}),
            'videoUrl': new Fields.Text('Video URL', 'Video URL', null, {'suppress': true}),
            'videoPlaceholder': new Fields.Text('Video Placeholder Image', 'URL for video placeholder image', null, {'suppress': true})
        }
    };
};

/**
 * Create a configurable video block with some configured default values
 *
 * @param  {String}     videoUrl            The default video URL
 * @param  {String}     videoPlaceholder    The default video placeholder imdage
 * @param  {Number}     xs                  Block width at extra small resolution
 * @param  {Number}     sm                  Block width at small resolution
 * @param  {Number}     md                  Block width at medium resolution
 * @param  {Number}     lg                  Block width at large resolution
 * @param  {Number}     minHeight           The minimum heigh in pixels
 * @return {Object}                         A configurable video block
 * @api private
 */
var _createVideoBlock = function(videoUrl, videoPlaceholder, xs, sm, md, lg, minHeight) {
    var block = _createBlock();
    block.elements.type.defaultValue = 'video';

    block.elements.xs.defaultValue = xs;
    block.elements.sm.defaultValue = sm;
    block.elements.md.defaultValue = md;
    block.elements.lg.defaultValue = lg;
    block.elements.minHeight.defaultValue = minHeight;

    block.elements.videoUrl.defaultValue = videoUrl;
    block.elements.videoPlaceholder.defaultValue = videoPlaceholder;

    return block;
};

/**
 * Create a configurable text block with some configured default values
 *
 * @param  {String}     titleColor          The default title color
 * @param  {String}     textColor           The default text color
 * @param  {String}     text                The default text
 * @param  {String}     [bgColor]           The default background color. If left null, the block will be transparent
 * @param  {String}     [icon]              The default icon
 * @param  {String}     videoPlaceholder    The default video placeholder imdage
 * @param  {Number}     xs                  Block width at extra small resolution
 * @param  {Number}     sm                  Block width at small resolution
 * @param  {Number}     md                  Block width at medium resolution
 * @param  {Number}     lg                  Block width at large resolution
 * @param  {Number}     minHeight           The minimum heigh in pixels
 * @return {Object}                         A configurable text block
 * @api private
 */
var _createTextBlock = function(titleColor, textColor, text, bgColor, icon, xs, sm, md, lg, minHeight) {
    var block = _createBlock();
    block.elements.type.defaultValue = 'text';

    block.elements.xs.defaultValue = xs;
    block.elements.sm.defaultValue = sm;
    block.elements.md.defaultValue = md;
    block.elements.lg.defaultValue = lg;
    block.elements.minHeight.defaultValue = minHeight;

    block.elements.titleColor.defaultValue = titleColor;
    block.elements.textColor.defaultValue = textColor;
    block.elements.text.defaultValue = {'default': text};

    // Only set the background color attribute if a value was specified
    if (bgColor) {
        block.elements.bgColor.defaultValue = bgColor;
    }
    if (icon) {
        block.elements.icon.defaultValue = icon;

        // If an icon was specified, the type needs to change so the block supports both icon and text
        block.elements.type.defaultValue = 'iconText';
    }
    return block;
};

module.exports = {
    'title': 'OAE Tenant Module',
    'block_1': _createVideoBlock('//www.youtube.com/embed/cfiM87Y0pWw?rel=0&autoplay=1&showinfo=0&modestbranding=1', '/ui/img/index-video-bg.png', 12, 12, 8, 8, 340),
    'block_2': _createTextBlock('#fff', '#fff', '# __MSG__SUPPORTING_ACADEMIC_COLLABORATION__\n#####__MSG__A_POWERFULL_NEW_WAY_FOR_STUDENTS_AND_FACULTY_TO_CREATE_KNOWLEDGE_COLLABORATE_AND_CONNECT_WITH_THE_WORLD__', null, null, 12, 6, 4, 4),
    'block_3': _createTextBlock('#4199ca', '#000', '#### __MSG__AUTHORING_EXPERIENCE__\n__MSG__RICH_COMPELLING_INTERACTIVE_CONTENT_AUTHORING__', '#fff', 'fa-edit', 12, 6, 4, 4),
    'block_4': _createTextBlock('#fff', '#fff', '#### __MSG__CHANNELS_OF_COMMUNICATION__\n__MSG__PARTICIPATING_IN_DISCUSSIONS_AND_FEEDBACK_WITHIN_PERSONALIZED_NETWORKS__', '#424242', 'fa-comments', 12, 6, 4, 4),
    'block_5': _createTextBlock('#424242', '#000', '#### __MSG__ACCESS_TO_CONTENT__\n__MSG__EXPANDED_ACCESS_TO_LEARNING_AND_RESEARCH_MATERIALS_BETTER_CONNECTS_LIBRARY_SERVICES__', '#f0eeec', 'fa-cloud-download', 12, 6, 4, 4),
    'block_6': _createBlock(),
    'block_7': _createBlock(),
    'block_8': _createBlock(),
    'block_9': _createBlock(),
    'block_10': _createBlock(),
    'block_11': _createBlock(),
    'block_12': _createBlock()
};
