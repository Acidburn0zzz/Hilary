/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');
var request = require('request');

var RestAPI = require('oae-rest');
var RestContext = require('oae-rest/lib/model').RestContext;
var TestsUtil = require('oae-tests');

var TenantsAPI = require('oae-tenants');

describe('Tenants', function() {

    // Rest context that can be used every time we need to make a request as an anonymous user
    var anonymousRestContext = null;
    // Rest context that can be used every time we need to make a request as a Cambridge tenant admin
    var camAdminRestContext = null;
    // Rest context that can be used every time we need to use a request as a global admin
    var globalAdminRestContext = null;

    /**
     * Function that will fill up the anonymous and the tenant admin context
     */
    before(function(callback) {
        // Fill up anonymous rest context
        anonymousRestContext = TestsUtil.getAnonymousRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up Cam tenant admin rest context
        camAdminRestContext = TestsUtil.getAdminRestContext(global.oaeTests.tenants.cam.baseUrl);
        // Fill up the global admin rest context
        globalAdminRestContext = TestsUtil.getAdminRestContext('http://localhost:2000');
        callback();
    });


    describe('#get tenant', function() {
        
        /**
         * Test that verifies that all tenants can be retrieved
         */
        it('verify get all tenants', function(callback) {
            RestAPI.Tenant.getAllTenants(globalAdminRestContext, function(err, tenants) {
                assert.ok(!err);
                assert.ok(tenants);
                assert.equal(tenants.length, 2);
                assert.equal(tenants[0].port, 2001);
                assert.equal(tenants[0].alias, 'camtest');
                assert.equal(tenants[1].port, 2002);
                assert.equal(tenants[1].alias, 'gttest');
                callback();
            });
        });

        /**
         * Test that verifies that the current tenant's information can be retrieved
         */
        it('verify get tenant', function(callback) {
            RestAPI.Tenant.getTenant(anonymousRestContext, function(err, tenant) {
                assert.ok(!err);
                assert.ok(tenant);
                assert.equal(tenant.port, 2001);
                assert.equal(tenant.alias, 'camtest');
                callback();
            });
        });
        
        /**
         * Test that verifies that a tenant can be retrieved by its mapped port. This uses the internal
         * API as there is no REST feed available that offers this functionality.
         */
        it('verify get tenant by port', function(callback) {
            // Get the Cambridge tenant
            TenantsAPI.getTenantByPort(2001, function(err, tenant) {
                assert.ok(!err);
                assert.equal(tenant.port, 2001);
                assert.equal(tenant.alias, 'camtest');
                assert.equal(tenant.name, 'Cambridge University Test');
                assert.equal(tenant.baseUrl, 'http://localhost:2001');

                // Get the GT tenant
                TenantsAPI.getTenantByPort(2002, function(err, tenant) {
                    assert.ok(!err);
                    assert.equal(tenant.port, 2002);
                    assert.equal(tenant.alias, 'gttest');
                    assert.equal(tenant.name, 'Georgia Tech Test');
                    assert.equal(tenant.baseUrl, 'http://localhost:2002');
                    callback();
                });
            });
        });
        
        /**
         * Test that verifies that a tenant can be retrieved by its mapped alias. This uses the internal
         * API as there is no REST feed available that offers this functionality.
         */
        it('verify get tenant by alias', function(callback) {
            // Get the Cambridge tenant
            TenantsAPI.getTenantByAlias('camtest', function(err, tenant) {
                assert.ok(!err);
                assert.equal(tenant.port, 2001);
                assert.equal(tenant.alias, 'camtest');
                assert.equal(tenant.name, 'Cambridge University Test');
                assert.equal(tenant.baseUrl, 'http://localhost:2001');

                // Get the GT tenant
                TenantsAPI.getTenantByAlias('gttest', function(err, tenant) {
                    assert.ok(!err);
                    assert.equal(tenant.port, 2002);
                    assert.equal(tenant.alias, 'gttest');
                    assert.equal(tenant.name, 'Georgia Tech Test');
                    assert.equal(tenant.baseUrl, 'http://localhost:2002');
                    callback();
                });
            });
        });
        
    });


    describe('#tenant actions', function() {

        /**
         * Test that verifies that it is possible to create a new tenant
         */
        it('verify creating tenant', function(callback) {
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'nyutest', 2100, 'New York University', 'http://localhost:2100', function(err) {
                assert.ok(!err);
                // Get the tenant
                var nyuRestContext = TestsUtil.getAnonymousRestContext('http://localhost:2100');
                RestAPI.Tenant.getTenant(nyuRestContext, function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2100);
                    assert.equal(tenant.alias, 'nyutest');
                    callback();
                });
            });
        });

        /**
         * Test that verifies that a port needs, an alias, a name and a baseUrl need to be specified when creating
         * a tenant
         */
        it('verify tenant creation validations', function(callback) {
            // Try creating a tenant with no port
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', null, 'AAR', 'http://localhost:2101', function(err) {
                assert.ok(err);

                // Try creating a tenant with a non-numeric port
                RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', 'not-a-number', 'AAR', 'http://localhost:2101', function(err) {
                    assert.ok(err);

                    // Try creating a tenant with no alias
                    RestAPI.Tenant.createTenant(globalAdminRestContext, null, 2101, 'AAR', 'http://localhost:2101', function(err) {
                        assert.ok(err);

                        // Try creating a tenant with no name
                        RestAPI.Tenant.createTenant(globalAdminRestContext, 'aarest', 2101, null, 'http://localhost:2101', function(err) {
                            assert.ok(err);

                            // Try creating a tenant with no base URL
                            RestAPI.Tenant.createTenant(globalAdminRestContext, 'aarest', 2101, 'AAR', null, function(err) {
                                assert.ok(err);
                               
                                // Verify that the tenant does not exist
                                var aarRestContext = TestsUtil.getAnonymousRestContext('http://localhost:2101');
                                RestAPI.Tenant.getTenant(aarRestContext, function(err, tenant) {
                                    assert.ok(err);
                                    assert.ok(!tenant);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    
        /**
         * Test that verifies that a tenant cannot be created with a duplicate port
         */
        it('verify create tenant duplicate port', function(callback) {
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'aartest', 2001, 'AAR', 'http://localhost:2001', function(err) {
                assert.ok(err);

                // Verify that the existing tenant is still running
                RestAPI.Tenant.getTenant(anonymousRestContext, function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2001);
                    assert.equal(tenant.alias, 'camtest');
                    callback();
                });
            });
        });
    
        /**
         * Test that verifies that a tenant cannot be created with a duplicate alias
         */
        it('Test duplicate alias', function(callback) {
            RestAPI.Tenant.createTenant(globalAdminRestContext, 'camtest', 2102, 'AAR', 'http://localhost:2102', function(err) {
                assert.ok(err);
                
                // Verify that the existing tenant is still running
                RestAPI.Tenant.getTenant(anonymousRestContext, function(err, tenant) {
                    assert.ok(!err);
                    assert.ok(tenant);
                    assert.equal(tenant.port, 2001);
                    assert.equal(tenant.alias, 'camtest');
                    callback();
                });
            });
        });

        /**
         * Test that stopping a tenant succeeds
         *
        it('Test stopping a tenant succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant/stop',
                'json': {'tenants': [2100]}
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });*/
       
       /**
         * Test that a tenant can enabled and disabled
         *
        it('Test disabling', function(callback) {
            var r = Math.random()*10000;
            var tenant = new Tenant('cam' + r, 'Cambridge University', 2101, 'localhost');
            TestAPI.Tenant.createTenant(tenant, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                assert.equal(body, 'New tenant "Cambridge University" has been fired up on port 2101');
    
                // Disable a tenant.
                TestAPI.Tenant.stopTenants([tenant.port], function(err, response, body) {
                    assert.equal(response.statusCode, 200);
    
                    // Check if we actually get the disabled notification.
                    request.get('http://localhost:2101', function(err, response, body) {
                        assert.ok(!err);
                        assert.ok(body.indexOf('currently disabled') > 0, body);
    
                        // Start it back up.
                        TestAPI.Tenant.startTenants([tenant.port], function(err, response, body) {
                            assert.equal(response.statusCode, 200);
    
                            // Check if we actually get an "active" page
                            request.get('http://localhost:2101', function(err, response, body) {
                                assert.ok(!err);
                                assert.equal(body.indexOf('currently disabled'), -1);
                                callback();
                            });
                        });
                    });
                });
            });
        });*/

        /**
         * Test that starting a tenant succeeds
         *
        it('Test starting a tenant succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant/start',
                'json': {'tenants': [2100]}
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });*/

        /**
         * Test that deleting a tenant succeeds
         *
        it('Test deleting a tenant succeeds', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant/delete',
                'json': {'tenants': [2100]}
            }, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                callback();
            });
        });*/
    
        /**
         * Test that a tenant can be deleted
         *
        it('Test deleting a tenant', function(callback) {
            var r = Math.random()*10000;
            var tenant = new Tenant('cam' + r, 'Cambridge University', 2102, 'localhost');
            TestAPI.Tenant.createTenant(tenant, function(err, response, body) {
                assert.equal(response.statusCode, 200);
                assert.equal(body, 'New tenant "Cambridge University" has been fired up on port 2102');
    
                // First try a bad request.
                TestAPI.Tenant.deleteTenants([], function(err, response, body) {
                    assert.equal(response.statusCode, 400);
    
                    // Now try a proper request.
                    TestAPI.Tenant.deleteTenants([tenant.port], function(err, response, body) {
                        assert.equal(response.statusCode, 200);
                        callback();
                    });
                });
            });
        });*/

    });
    
    
    describe('#update tenant', function() {
        
        /**
         * Test that updating a tenant's name succeeds
         *
        it('Test update tenant name', function(callback) {
            request.post({
                'uri': 'http://localhost:2001/api/tenant',
                'json': {
                    'name': 'Cambridge changed name',
                    'port': 2001
                }
            }, function(err, response, body) {
                assert.ok(!err);

                // Verify that the values are in cassandra
                request.get({
                    'uri': 'http://localhost:2001/api/tenant'
                }, function(err, response, body) {
                    body = JSON.parse(body);
                    assert.ok(!err);
                    assert.equal('camtest', body.alias);
                    assert.equal('Cambridge changed name', body.name);
                    assert.equal(2001, body.port);
                    callback();
                });
            });
        });*/

        /**
         * Test that updating a tenant requires a port and name
         *
        it('Test updating tenant name requires name and port', function(callback) {
            request.post({
                'uri': 'http://localhost:2001/api/tenant',
                'json': {
                    'name': 'Cambridge changed name'
                }
            }, function(err, response, body) {
                assert.equal(response.statusCode, 400);
                assert.equal(body, 'Missing port');
                request.post({
                    'uri': 'http://localhost:2001/api/tenant',
                    'json': {
                        'port': 2001
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    assert.equal(body, 'Missing name');
                    callback();
                });
            });
        });*/

        /**
         * Test that updating a tenant's name succeeds
         *
        it('Test update tenant name through global tenant', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant',
                'json': {
                    'name': 'Cambridge changed name',
                    'port': 2001
                }
            }, function(err, response, body) {
                assert.ok(!err);

                // Verify that the values are in cassandra
                request.get({
                    'uri': 'http://localhost:2001/api/tenant'
                }, function(err, response, body) {
                    body = JSON.parse(body);
                    assert.ok(!err);
                    assert.equal('camtest', body.alias);
                    assert.equal('Cambridge changed name', body.name);
                    assert.equal(2001, body.port);
                    callback();
                });
            });
        });*/

        /**
         * Test that updating a tenant requires a port and name
         *
        it('Test updating tenant name through global tenant requires name and port', function(callback) {
            request.post({
                'uri': 'http://localhost:2000/api/tenant',
                'json': {
                    'name': 'Cambridge changed name'
                }
            }, function(err, response, body) {
                assert.equal(response.statusCode, 400);
                assert.equal(body, 'Missing port');
                request.post({
                    'uri': 'http://localhost:2000/api/tenant',
                    'json': {
                        'port': 2001
                    }
                }, function(err, response, body) {
                    assert.equal(response.statusCode, 400);
                    assert.equal(body, 'Missing name');
                    callback();
                });
            });
        });*/

    });

});
