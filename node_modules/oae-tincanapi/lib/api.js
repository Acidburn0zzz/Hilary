/*!
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var request = require('request');

var ActivityAPI = require('oae-activity');
var ActivityConstants = require('oae-activity/lib/constants').ActivityConstants;
var AuthzUtil = require('oae-authz/lib/util');
var ConfigAPI = require('oae-config');
var log = require('oae-logger').logger('oae-doc');
var TenantsAPI = require('oae-tenants');

var ActorModel = require('./model').Actor;
var ObjectModel = require('./model').Object;
var Statement = require('./model').Statement;
var TinCanConfig = ConfigAPI.config('oae-tincanapi');
var VerbModel = require('./model').Verb;

/*
 * Function that converts a given verb for TinCan 
 * 
 * @param  {String}     verb    String containing the verb
 * @return {VerbModel}  string  Converted verb
 */
var _mapVerb = function(verb) {

    // Variables for the id and the displayName
    var id = '';
    var display = '';

    switch (verb) {
    case ActivityConstants.verbs.ADD:
        id = 'http://oaeproject.org/expapi/verbs/added';
        display = 'added';
        break;
    case ActivityConstants.verbs.CREATE:
        id = 'http://oaeproject.org/expapi/verbs/created';
        display = 'created';
        break;
    case ActivityConstants.verbs.JOIN:
        id = 'http://oaeproject.org/expapi/verbs/joined';
        display = 'joined';
        break;
    case ActivityConstants.verbs.POST:
        id = 'http://adlnet.gov/expapi/verbs/commented';
        display = 'posted';
        break;
    case ActivityConstants.verbs.SHARE:
        id = 'http://adlnet.gov/expapi/verbs/shared';
        display = 'shared';
        break;
    case ActivityConstants.verbs.UPDATE:
        id = 'http://oaeproject.org/expapi/verbs/updated';
        display = 'updated';
        break;
    }
    return new VerbModel(id, display);
};

/*
 * Submit a statement to the Learning Record Store.
 * 
 * @param  {Array}   activities     Array of tenant activities
 * @param  {String}  tenantAlias    The tenantAlias
 */
var sendActivitiesToLRS = module.exports.sendActivitiesToLRS = function(activities, tenantAlias) {
        
    // Create an options object
    var options = {
        'method': 'POST',
        'url': TinCanConfig.getValue(tenantAlias, 'lrs', 'endpoint'),
        'auth': {
            'user': TinCanConfig.getValue(tenantAlias, 'lrs', 'appid'),
            'pass': TinCanConfig.getValue(tenantAlias, 'lrs', 'appsecret'),
            'sendImmediately': true
        },
        'headers': {
            'X-Experience-API-Version': '1.0.0',
            'Content-Type': 'application/json'
        },
        'body': JSON.stringify(activities)
    };

    // Perform the request
    request(options, function(err, response, body) {
        if (err) {
            log().error({'err': err, 'body': body}, 'An error ocurred whilst sending statements to the LRS');
        }
    });
};

/*
 * Initializes the Tin Can API and handles its requests
 * 
 * For testing in Terminal, paste following string:
 * curl -H "X-Experience-API-Version: 1.0.0" https://[APP-ID]]:[APP-SECRET]@cloud.scorm.com/tc/[APP-ID]/statements?statementId=[STATEMENT-ID]
 *
 * @param  {Function}  callback     Standard callback function
 */
var initializeTinCanAPI = module.exports.initializeTinCanAPI = function(callback) {
                
    // Bind the deliveredActivities event
    ActivityAPI.on('deliveredActivities', function(routedActivities) {

        // Store the tenantAlias
        var tenantAlias = null;

        // Object that will contain the statements for each tenant
        var tenantStatements = {};

        // Loop through all the activities and send each activity to LRS
        _.each(routedActivities, function(activities, route) {

            _.each(activities, function(activity) {

                // A triggered activity can end up as multiple routed activities (one for the actor, one for the target, one for each follower, ...)
                // We only need to send a single statement per triggered activity and only for the actor.
                // We can do this by only sending a statement if the route we're dealing with is the same as the activity's actor.  
                if (route === activity.actor.user.id) {

                    // Stores the tenant alias to retrieve values from the configAPI later on
                    tenantAlias = AuthzUtil.getResourceFromId(activity.actor.user.id).tenantAlias;
                    
                    // Check if Learning Record Store is enabled for the tenant
                    if (TinCanConfig.getValue(tenantAlias, 'lrs', 'enabled')) {

                        // If the object doesn't contain the tenant yet, we add the tenant as a new key
                        // The tenant is an array that will contain all the activities to be sent to LRS
                        tenantStatements[tenantAlias] = tenantStatements[tenantAlias] || [];

                        // Construct the tenants profile link
                        var homePage = TenantsAPI.getTenant(tenantAlias).host + activity.actor.user.profilePath;
						
                        // Fill the actor, verb and object objects
                        var actor = new ActorModel(activity.actor.user.displayName, homePage);
                        var verb = _mapVerb(activity.verb);
                        var object = new ObjectModel(activity.object['oae:id'], activity.object[activity.object.objectType].displayName, activity.object[activity.object.objectType].description);

                        // Add a new statement to the array of statements
                        tenantStatements[tenantAlias].push(new Statement(actor, verb, object));
                    }
                }
            });
        });

        // Loop all the tenants that have activities and execute sendActivitiesToLRS
        _.each(tenantStatements, function(activities, tenantAlias) {
            sendActivitiesToLRS(activities, tenantAlias);
        });
    });

    callback();
};
