/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var OAE = require('oae-util/lib/oae');

var UIAPI = require('./api');

//////////////////
// Global admin //
//////////////////

/**
 * @REST getUiWidgets
 *
 * Get all the aggregated widget configs
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /ui/widgets
 * @Return      {WidgetsConfig}                 Returns an object of widget configurations
 */
OAE.globalAdminRouter.on('get', '/api/ui/widgets', function(req, res) {
    var widgetConfigs = UIAPI.getWidgetManifests();
    res.send(200, widgetConfigs);
});

/**
 * @REST getUiStaticbatch
 *
 * Get the file content for a number of static files
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /ui/staticbatch
 * @QueryParam  {string[]}      files           Path of single file to retrieve
 * @Return      {StaticBatch}                   Returns an object of static file contents
*/
OAE.globalAdminRouter.on('get', '/api/ui/staticbatch', function(req, res) {
    var files = req.query.files;
    if (!Array.isArray(files)) {
        files = [files];
    }

    UIAPI.getStaticBatch(files, function(err, results) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, results);
    });
});

/**
 * @REST getUiSkin
 *
 * Returns the base skin for the global admin UI
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /ui/skin
 * @Return      {string}                        Returns a CSS file for the global administrator
*/
OAE.globalAdminRouter.on('get', '/api/ui/skin', function(req, res) {
    UIAPI.getSkin(req.ctx, function(err, css) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.set('Content-Type', 'text/css');
        res.send(200, css);
    });
});

/**
 * @REST getUiSkinVariables
 *
 * Returns all the variable names that are present in the skin file
 *
 * @Server      admin,tenant
 * @Method      GET
 * @Path        /ui/skin/variables
 * @QueryParam  {string}        tenant          Alias of tenant
 * @Return      {SkinVariables}                 Returns an object skinnable variables
*/
OAE.globalAdminRouter.on('get', '/api/ui/skin/variables', function(req, res) {
    UIAPI.getSkinVariables(req.ctx, req.query.tenant, function(err, variables) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, {'results': variables});
    });
});


/////////////
// Tenants //
/////////////

OAE.tenantRouter.on('get', '/api/ui/widgets', function(req, res) {
    var widgetConfigs = UIAPI.getWidgetManifests();
    res.send(200, widgetConfigs);
});

OAE.tenantRouter.on('get', '/api/ui/staticbatch', function(req, res) {
    var files = req.query.files;
    if (!Array.isArray(files)) {
        files = [files];
    }

    UIAPI.getStaticBatch(files, function(err, results) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, results);
    });
});

OAE.tenantRouter.on('get', '/api/ui/skin', function(req, res) {
    UIAPI.getSkin(req.ctx, function(err, css) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.set('Content-Type', 'text/css');
        res.send(200, css);
    });
});

OAE.tenantRouter.on('get', '/api/ui/skin/variables', function(req, res) {
    UIAPI.getSkinVariables(req.ctx, req.query.tenant, function(err, variables) {
        if (err) {
            return res.send(err.code, err.msg);
        }
        res.send(200, {'results': variables});
    });
});

// Add the REST models for Ui

/**
 * @RESTModel WidgetsConfig
 *
 * @Required  [{widgetName}]
 * @Property  {WidgetConfig}    {widgetName}    Configuration data for the named widget
 */

/**
 * @RESTModel WidgetConfig
 *
 * @Required  [src, id, path]
 * @Property  {WidgetI18n}      i18n            Internationalization data for the widget
 * @Property  {string}          id              Unique identifier for the widget
 * @Property  {string}          path            Path (relative to /node_modules on server) of widget source file
 * @Property  {string}          src             HTML file containing the widget source
 * @Property  {WidgetTriggers}  trigger         Triggers that will load the widget
 */

/**
 * @RESTModel WidgetI18n
 *
 * @Required  [{language}]
 * @Property  {string}          {language}      Path (relative to widget source file path) of translations for named language
 */

/**
 * @RESTModel WidgetTriggers
 *
 * @Required  []
 * @Property  {string[]}        events          Events that will trigger a widget
 * @Property  {string[]}        selectors       jQuery selectors whose presence on the page will trigger a widget
 */

/**
 * @RESTModel StaticBatch
 *
 * @Required  [{path}]
 * @Property  {string}          {path}          Contents of file available at named path
 */

/**
 * @RESTModel SkinVariables
 *
 * @Required  [results]
 * @Property  {SkinVariableSection[]} results   Grouping of related skin variables
 */

/**
 * @RESTModel SkinVariableSection
 *
 * @Required  [name, subsections]
 * @Property  {string}                      name            Name of skin variable section
 * @Property  {SkinVariableSubsection[]}    subsections     Grouping of related skin variables
 */

/**
 * @RESTModel SkinVariableSubsection
 *
 * @Required  [name, variables]
 * @Property  {string}              name        Name of skin variable subsection
 * @Property  {SkinVariable[]}      variables   Skin variable
 */

/**
 * @RESTModel SkinVariable
 *
 * @Required  [name, defaultValue, description, type]
 * @Property  {string}                  name            Name of skin variable
 * @Property  {string}                  defaultValue    Default value of variable
 * @Property  {string}                  description     Description of variable
 * @Property  {string}                  type            Type of variable                [color,url]
 * @Property  {SkinSectionReference}    section         Section containing variable
 * @Property  {SkinSubectionReference}  subsection      Subsection containing variable
 */

/**
 * @RESTModel SkinSectionReference
 *
 * @Required  [name, index]
 * @Property  {string}          name            Name of skin variable section
 * @Property  {number}          index           Index of section
 */

/**
 * @RESTModel SkinSubectionReference
 *
 * @Required  [name, index]
 * @Property  {string}          name            Name of skin variable subsection
 * @Property  {number}          index           Index of subsection within section
 */


