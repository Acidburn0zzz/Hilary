/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var strftimeTZ = require('strftime').strftimeTZ;

var log = require('oae-logger').logger('oae-uservoice-api');
var OaeUtil = require('oae-util/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

var UservoiceCipher = require('./internal/cipher');
var UservoiceConfig = require('oae-config').config('oae-uservoice');
var UservoiceProfile = require('./internal/profile');

var TIME_FIVE_MINUTES_IN_SECONDS = 15 * 60;
var TIME_ONE_MINUTE_IN_SECONDS = 60;
var TIME_THREE_HOURS_IN_SECONDS = 3 * 60 * 60;

/**
 * Get the information needed for a consumer to perform requests towards User Voice as the current user in context (if any)
 *
 * @param  {Context}    ctx                         The context of the request that is asking for the User Voice URL
 * @param  {Number}     [expiresIn]                 The duration of time (in seconds) for which the authentication token should be valid. Minimum: 1min; Maximum: 3hrs; Default: 5min
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Object}     callback.urlInfo            The url information the client can use to send the user to User Voice
 * @param  {String}     callback.urlInfo.baseUrl    The base url to the User Voice site
 * @param  {String}     callback.urlInfo.token      The authentication token to add as the `sso` parameter of the URL to gain a session as the current user in context
 */
var getUrlInfo = module.exports.getUrlInfo = function(ctx, expiresIn, callback) {
    // Constraint the `expiresIn` parameter and convert it to milliseconds
    expiresIn = OaeUtil.getNumberParam(expiresIn, TIME_FIVE_MINUTES_IN_SECONDS, TIME_ONE_MINUTE_IN_SECONDS, TIME_THREE_HOURS_IN_SECONDS);
    expiresIn *= 1000;

    // Extract configuration values
    var enabled = UservoiceConfig.getValue(ctx.tenant().alias, 'general', 'enabled');
    var https = UservoiceConfig.getValue(ctx.tenant().alias, 'general', 'https');
    var subdomain = UservoiceConfig.getValue(ctx.tenant().alias, 'general', 'subdomain');
    var ssoKey = UservoiceConfig.getValue(ctx.tenant().alias, 'general', 'ssoKey');

    var validator = new Validator();
    validator.check(null, {'code': 400, 'msg': 'The User Voice integration is not enabled for this tenant'}).isTrue(enabled);
    validator.check(subdomain, {'code': 400, 'msg': 'The User Voice subdomain is not configured for this tenant'}).notNull();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    var protocol = (https) ? 'https' : 'http';
    var result = {'baseUrl': util.format('%s://%s.uservoice.com', protocol, subdomain)};
    if (!ctx.user()) {
        // Anonymous users just get the url with no authentication token
        return callback(null, result);
    } else if (!ssoKey) {
        // If there is no SSO configured, the user is just sent to the
        // URL without an authentication token
        return callback(null, result);
    }

    // Authenticated users on SSO-enabled tenants are given a nifty authentication token
    _generateAuthenticationToken(ctx.user(), subdomain, ssoKey, expiresIn, function(err, token) {
        if (err) {
            return callback(err);
        }

        result.token = token;
        return callback(null, result);
    });
};

/**
 * Generate an authentication token that can be used for securely communicating with User Voice
 *
 * @param  {User}       user            The user for which to generate the authentication token
 * @param  {String}     ssoKey          The secret SSO key configured in User Voice for this tenant
 * @param  {Number}     [expiresIn]     The duration of time (in seconds) for which the token should be valid. Minimum: 1min; Maximum: 3hrs; Default: 5min
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error that occurred, if any
 * @param  {String}     callback.token  The encrypted token that the user can use for authenticating to User Voice
 * @api private
 */
var _generateAuthenticationToken = function(user, subdomain, ssoKey, expiresIn, callback) {
    var data = UservoiceProfile.createUservoiceProfile(user);

    // Determine when this encrypted authentication token will expire. This does
    // not determine when the user profile expires, that lasts indefinitely
    var expiresOn = new Date(Date.now() + expiresIn);
    data.expires = strftimeTZ('%F %T', expiresOn, 0);

    var token = UservoiceCipher.encrypt(subdomain, ssoKey, data);
    log().trace({'subdomain': subdomain, 'data': data, 'token': token}, 'Created encrypted token for User Voice authentication');
    return callback(null, token);
};
