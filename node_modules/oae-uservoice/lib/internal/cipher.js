/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var crypto = require('crypto');

/**
 * Encrypt the data stored in object `obj` into a string that can be decrypted by User Voice
 *
 * @param  {String}     uservoiceSubdomain  The subdomain for the User Voice account. If your User Voice domain is "oaeproject.uservoice.com", the subdomain is "oaeproject"
 * @param  {String}     uservoiceSsoKey     The secret key for encrypting User Voice token authentication requests
 * @param  {Object}     obj                 An arbitrary object containing data to encrypt
 * @return {String}                         The stringified and encrypted data
 */
var encrypt = module.exports.encrypt = function(uservoiceSubdomain, uservoiceSsoKey, obj) {
    var data = new Buffer(JSON.stringify(obj), 'utf-8');
    var saltedHash = _sha1(uservoiceSsoKey + uservoiceSubdomain);

    // Create and apply the initialization vector. The value "OpenSSL for Ruby" is
    // a mandatory constant for compatibility with User Voice
    var iv = new Buffer('OpenSSL for Ruby', 'utf8');
    _applyIv(data, iv);

    var cipher = crypto.createCipheriv('aes-128-cbc', saltedHash.toString('binary'), iv.toString('binary'));
    return cipher.update(data.toString('utf-8'), 'utf-8', 'base64') + cipher.final('base64');
};

/**
 * Create a sha1 hash of the given string
 *
 * @param  {String}     str     The string to hash
 * @return {String}             The hash
 * @api private
 */
var _sha1 = function(str) {
    var hash = crypto.createHash('sha1');
    hash.update(str, 'utf-8');
    return hash.digest().slice(0, 16);
};

/**
 * Apply an initialization vector (IV) to the given buffer of encryption data. This
 * will modify the provided `data` buffer in-place
 *
 * @param  {Buffer}     data    The data to which to apply the IV
 * @param  {Buffer}     iv      The IV data to apply to the data
 * @api private
 */
var _applyIv = function(data, iv) {
    for (i = 0; i < 16; i++) {
        data[i] ^= iv[i];
    }
};
