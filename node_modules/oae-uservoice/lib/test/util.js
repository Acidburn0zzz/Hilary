/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var assert = require('assert');
var querystring = require('querystring');
var url = require('url');

var ConfigTestUtil = require('oae-config/lib/test/util');
var RestAPI = require('oae-rest');

/**
 * Set the User Voice global configuration to the given values
 *
 * @param  {RestContext}    adminRestContext    the REST Context of the administrator performing the changes
 * @param  {Boolean}        https               Whether or not HTTPS should be used when directing users to User Voice
 * @param  {String}         subdomain           The subdomain of the User Voice URL
 * @param  {String}         ssoKey              The secret key configured in User Voice to use for secure encryption
 * @param  {Function}       callback            Standard callback function
 * @throws {AssertionError}                     An error that occurred, if any
 */
var setConfig = module.exports.setConfig = function(adminRestContext, https, subdomain, ssoKey, callback) {
    var configUpdates = {};

    if (_.isBoolean(https)) {
        configUpdates['oae-uservoice/general/https'] = https;
    }

    if (_.isString(subdomain)) {
        configUpdates['oae-uservoice/general/subdomain'] = subdomain;
    }

    if (_.isString(ssoKey)) {
        configUpdates['oae-uservoice/general/ssoKey'] = ssoKey;
    }

    ConfigTestUtil.updateConfigAndWait(adminRestContext, null, configUpdates, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Clear the User Voice configuration values to the system defaults
 *
 * @param  {RestContext}    adminRestContext    The REST Context of the admin user performing the change
 * @param  {Function}       callback            Standard callback function
 * @throws {AssertionError}                     An error that occurred, if any
 */
var clearConfig = module.exports.clearConfig = function(adminRestContext, callback) {
    return setConfig(adminRestContext, false, '', '', callback);
};

/**
 * Ensure that the URL Info requested by the user in context matches that of the provided `expectedUrlInfo` object
 *
 * @param  {RestContext}    restContext         The REST Context of the user for which to request the User Voice URL Info
 * @param  {Number}         expiresIn           The duration of time in seconds for which the authentication token (if any) should be valid
 * @param  {Object}         expectedUrlInfo     An object containing the URL Info data to expect as a reply from the server
 * @param  {Function}       callback            Standard callback function
 * @throws {AssertionError}                     An error that occurred, if any (e.g., the assertions failed)
 */
var assertUrlInfo = module.exports.assertUrlInfo = function(restContext, expiresIn, expectedUrlInfo, callback) {
    RestAPI.Uservoice.getUrlInfo(restContext, expiresIn, function(err, urlInfo) {
        assert.ok(!err);
        assert.equal(urlInfo.baseUrl, expectedUrlInfo.baseUrl);
        if (expectedUrlInfo.token === true) {
            // If we expected `true`, then we're actually saying it should just exist
            assert.ok(_.isString(urlInfo.token));
        } else {
            // Otherwise, it should be identical to what's expected
            assert.equal(urlInfo.token, expectedUrlInfo.token);
        }
        return callback();
    });
};

/**
 * Ensure that the URL Info requested by the user in context results in the specified error
 *
 * @param  {RestContext}    restContext         The REST Context of the user for which to request the User Voice URL Info
 * @param  {Number}         expiresIn           The duration of time in seconds for which the authentication token (if any) should be valid
 * @param  {Number}         expectedErrCode     The expected error code of the HTTP request
 * @param  {Function}       callback            Standard callback function
 * @throws {AssertionError}                     Thrown if the URL Info request did **not** result in the expected error
 */
var assertUrlInfoHasError = module.exports.assertUrlInfoHasError = function(restContext, expiresIn, expectedErrCode, callback) {
    RestAPI.Uservoice.getUrlInfo(restContext, expiresIn, function(err, urlInfo) {
        assert.ok(err);
        assert.strictEqual(err.code, expectedErrCode);
        assert.ok(!urlInfo);
        return callback();
    });
};

/**
 * Ensure that the User Voice redirect request results in a redirect to the expected target
 *
 * @param  {RestContext}    restContext             The REST Context of the user for which to request the redirect
 * @param  {String}         expectedRedirectUrl     The url (protocol, host and path) to which we expect the user to be redirected. This does not include the query string (e.g., http://oaeproject.uservoice.com)
 * @param  {Boolean}        expectedAuthToken       Whether or not to expect an authentication token in the redirect (i.e., an `sso` querystring parameter)
 * @param  {Function}       callback                Standard callback function
 * @throws {AssertionError}                         Thrown if the redirect does not meet the expected assertions or some other error occurs
 */
var assertRedirect = module.exports.assertRedirect = function(restContext, expectedRedirectUrl, expectAuthToken, callback) {
    RestAPI.Uservoice.redirect(restContext, function(err, body, response) {
        assert.ok(!err);

        var actualRedirectUrl = url.parse(response.headers.location);
        expectedRedirectUrl = url.parse(expectedRedirectUrl);

        assert.equal(actualRedirectUrl.protocol, expectedRedirectUrl.protocol);
        assert.equal(actualRedirectUrl.host, expectedRedirectUrl.host);
        assert.equal(actualRedirectUrl.pathname, expectedRedirectUrl.pathname);

        if (expectAuthToken) {
            assert.ok(querystring.parse(actualRedirectUrl.query).sso);
        } else {
            assert.ok(!actualRedirectUrl.query);
        }

        return callback();
    });
};

/**
 * Ensure that the User Voice redirect requested by the user in context results in the specified error
 *
 * @param  {RestContext}    restContext         The REST Context of the user for which to request the User Voice URL Info
 * @param  {Number}         expectedErrCode     The expected error code of the redirect request
 * @param  {Function}       callback            Standard callback function
 * @throws {AssertionError}                     Thrown if the redirect request did **not** result in the expected error
 */
var assertRedirectHasError = module.exports.assertRedirectHasError = function(restContext, expectedErrCode, callback) {
    RestAPI.Uservoice.redirect(restContext, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, expectedErrCode);
        return callback();
    });
};
