/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');

var log = require('oae-logger').logger('oae-cleaner');

var cleaners = {};

/**
 * Starts a cleaning job.
 *
 * @param  {String}     directory   The path to the directory that should be cleaned.
 * @param  {Number}     interval    The interval (in ms) at which the directory should be cleaned out.
 */
var start = module.exports.start = function(directory, interval) {
    log().info({ 'interval': interval, 'directory': directory }, 'Starting clean job.');

    // Start it once and than start the interval
    cleanDirectory(interval, directory);
    cleaners[directory] = setInterval(cleanDirectory, interval, interval, directory);
};

/**
 * Stops a cleaning job.
 *
 * @param  {String}     directory   The path to the directory for which the cleaning job should be stopped.
 */
var stop = module.exports.stop = function(directory) {
    if (cleaners[directory]) {
        log().info({ 'directory': directory }, 'Stopping clean job.');
        clearInterval(cleaners[directory]);
    } else {
        log().warn({ 'directory': directory }, 'A request to stop an unknown cleaning job was made.');
    }
};

/**
 * Cleans a directory.
 *
 * @param  {Number} interval    Files who haven't been accessed later then Date.now() - interval, will be removed.
 * @param  {String} directory   The path to the directory that should be cleaned.
 * @api private
 */
var cleanDirectory = function(interval, directory) {
    fs.readdir(directory, function(err, files) {
        if (err) {
            return log().error({'err': err, 'directory': directory}, 'Could not list the files.');
        }

        var paths = _.map(files, function(file) {
            return directory + '/' + file;
        });

        var time = Date.now() - interval;
        checkFiles(paths, time, function(err) {
            if (err) {
                return log().error({'err': err, 'directory': directory}, 'Could not clean the files.');
            }
        });
    });
};

/**
 * Checks if a file is older than a specified time and removes it if it is.
 *
 * @param  {String}     path            The path to the file to check
 * @param  {String}     time            The time (in ms since epoch) when a file is considered outdated.
 * @param  {Function}   callback        Standard callback method.
 * @param  {Function}   callback.err    Standard error object (if any.)
 * @api private
 */
var checkFile = function(path, time, callback) {
    fs.stat(path, function(err, stats) {
        if (err) {
            log().error({'err': err, 'path': path}, 'Could not get the metadata for a file.');
            return callback(err);
        }

        if (stats.isFile() && stats.atime.getTime() < time) {
            log().info('Unlinking %s', path);
            fs.unlink(path, function(err) {
                if (err) {
                    log().error({'err': err, 'path': path}, 'Could not unlink a file.');
                    return callback(err);
                }
                callback();
            });
        } else {
            callback();
        }
    });
};

/**
 * Checks a set of files if they are older than a specified time and removes them if they are.
 *
 * @param  {String[]}   paths           The set of paths to check.
 * @param  {String}     time            The time (in ms since epoch) when a file is considered outdated.
 * @param  {Function}   callback        Standard callback method.
 * @param  {Function}   callback.err    Standard error object (if any.)
 * @api private
 */

var checkFiles = function(paths, time, callback) {
    if (paths.length === 0) {
        return callback();
    }

    var path = paths.pop();
    checkFile(path, time, function(err) {
        if (err) {
            return callback(err);
        }

        checkFiles(paths, time, callback);
    });
};
