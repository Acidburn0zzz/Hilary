/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Cassandra = require('./cassandra');
var Pubsub = require('./pubsub');
var LocalStrategy = require('passport-local');
var Time = require('time');

var AuthAPI = require('oae-authentication');
var ConfigAPI = require('oae-config-aggregator');
var OAE = require('oae-util/lib/oae');
var PrincipalAPI = require('oae-principals');
var TenantAPI = require('oae-tenants');

module.exports = function(app, callback) {
    
    var LocalStrategy = new AuthAPI.LocalStrategyWrapper(OAE.serverTenant);
    app.server.passport.use(LocalStrategy);

    app.server.post('/api/auth/login', app.server.passport.authenticate(LocalStrategy.name), function(req, res) {
        // This callback only gets called when we log in succesfully.
        return res.send(200, req.user);
    });

    app.server.post('/api/auth/logout', function(req, res) {
        req.logOut();
        res.send(200, {'loggedout': 'true'});
    });

    app.server.get('/api/me', function(req, res) {
        if (!req.ctx.user()) {
            return res.send(200, {'anon': true});
        }

        PrincipalAPI.getBasicProfile(req.ctx, req.user.id, function(err, data) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            // calculate timezone offset in hours.
            var now = new Time.Date();
            now.setTimezone(req.user.timezone);
            var offset = -1 * now.getTimezoneOffset() / 60;

            data.locale = {
                'locale': req.user.locale,
                'timezone': {
                    'name': req.user.timezone,
                    'offset': offset
                }
            };

            res.send(200, data);
        });
    });

    app.server.post('/api/tenant/create', function(req, res, next) {
        TenantAPI.createTenant(req.body.id, req.body.name, req.body.description, req.body.port, req.body.baseurl, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, 'New tenant "' + req.body.name + '" has been fired up on port ' + req.body.port);
        });
    });

    app.server.post('/api/tenant/start', function(req, res, next) {
        TenantAPI.putTenantsInMaintenanceMode(req.body.tenants, false, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

    app.server.post('/api/tenant/stop', function(req, res, next) {
        TenantAPI.putTenantsInMaintenanceMode(req.body.tenants, true, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

    app.server.post('/api/tenant/delete', function(req, res, next) {
        TenantAPI.deleteTenants(req.body.tenants, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200);
        });
    });

    app.server.get('/api/tenants', function(req, res, next) {
        TenantAPI.getAllTenants(function(err, tenants) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, tenants);
        });
    });

    app.server.get('/api/modules', function(req, res, next) {
        ConfigAPI.getModules(function(modules) {
            res.send(200, modules)
        });
    });

    app.server.post('/admin/update', function(req, res, next) {
        ConfigAPI.writeConfig(req.body, function(err) {
            if (err) {
                return res.send(err.code, err.body);
            }
            res.send(200, 'Config successfully stored.');
        });
    });

    app.server.get('/api/configuration', function(req, res, next) {
        if (req.query.tenantid) {
            ConfigAPI.readConfig(req.query.tenantid, function(err, configuration) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(200, configuration);
            });
        } else {
            res.send(400, 'A tenant ID is required to get the configuration.');
        }
    });

    // Create Cassandra database.
    // TODO: Move Cassandra into its own oae-cassandra module with a high priority. All of the init(..) stuff then goes in its init.js
    Cassandra.init(app.config.cassandra, function(err) {
        if (err) {
            return callback(err);
        }

        // Setup the Pubsub communication
        // TODO: Move this into its own oae-pubsub module with a high priority. All of the init(..) stuff then goes in its init.js
        Pubsub.init(app.config.redis);

        callback();
    });
}
