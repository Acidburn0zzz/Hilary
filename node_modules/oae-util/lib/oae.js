/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var express = require('express');
var fs = require('fs');
var connect = require('connect');

var Cassandra = require('oae-util/lib/cassandra');
var IO = require('./io');

var Context = require('oae-context').Context;
var PrincipalAPI = require('oae-principals');
var TenantAPI = require('oae-tenants');
var Tenant = require('oae-tenants/lib/model').Tenant;
var ConfigAPI = require('oae-config-aggregator');
var AuthAPI = require('oae-authentication');
var User = require('oae-principals/lib/model').User;
var CassandraStore = require('oae-authentication/lib/connect-cassandra-store')(connect);
var Time = require('time');

var serverTenant = new Tenant('global', 'Global Administration', 'Global Administration Tenant', 2000, 'localhost:2000', true, false);

///////////////////////////
// Setting up the server //
///////////////////////////

/**
 * Start OAE and run the global administrative interface on port 2000 by default, as well as all tenants 
 * and REST end points
 * @param  {Object}     config      Configuration object contain Cassandra config information
 * @param  {Function}   callback    Standard callback function execute when Sakai OAE has finished starting up
 */
module.exports.init = function(config, callback) {
    callback = callback || function() {};
    var server = express();
    serverTenant.server = server;
    serverTenant.passport = require('passport');
    serverTenant.server.listen(2000);

    // Configure this tenant's express to use passport for the authentication stuff.
    serverTenant.server.configure(function() {
        // We'll be using cookies to hash the principal_id.
        // Signing of the cookie will be done by the session middleware.
        serverTenant.server.use(express.cookieParser());
        serverTenant.server.use(express.bodyParser());
        serverTenant.server.use(express.static(__dirname + "/../../oae-config-aggregator/public"));

        // This needs to come BEFORE passport and AFTER cookieParser.
        // The secret will be used to sign the cookie
        // We'll use Cassandra as a store for our sessions.
        serverTenant.server.use(express.session({ secret: 'this secret is so secret that its totally secret', store: new CassandraStore(), 'tenant': serverTenant.alias}));

        // Configure passport.
        serverTenant.server.use(serverTenant.passport.initialize());
        serverTenant.server.use(serverTenant.passport.session());

        // Bind the execution context after authentication
        serverTenant.server.use(function(req, res, next) {
            try {
                req.ctx = new Context(serverTenant, req.user);
                return next();
            } catch (err) {
                return next(err);
            }
        });
    });

    registerAPI(serverTenant.server, config, callback);
    console.log('Starting Sakai OAE');
};

/**
 * Register all necessary REST end points for the global admin interface
 * @param  {Server}     server      Express object representing the global admin interface
 * @param  {Object}     config      Configuration object contain Cassandra config information
 * @param  {Function}   callback    Standard callback function execute when Cassandra has been
 *                                  initialized and all column families have been created
 */
var registerAPI = function(server, config, callback) {

    var localStrategy = new AuthAPI.LocalStrategyWrapper(serverTenant);
    serverTenant.passport.use(localStrategy);

    server.post('/api/auth/login', serverTenant.passport.authenticate(localStrategy.name), function(req, res) {
        // This callback only gets called when we log in succesfully.
        return res.send(200, req.user);
    });

    server.post('/api/auth/logout', function(req, res) {
        req.logOut();
        res.send(200, {'loggedout': 'true'});
    });

    server.get('/whoami', function(req, res, next) {
        res.send('Sakai OAE Global Admin Interface');
    });

    server.get('/api/modules', function(req, res, next) {
        ConfigAPI.getModules(function(modules) {
            res.send(200, modules)
        });
    });

    server.get('/api/me', function(req, res) {
        if (!req.ctx.user()) {
            return res.send(200, {'anon': true});
        }

        PrincipalAPI.getBasicProfile(req.ctx, req.user.id, function(err, data) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            // calculate timezone offset in hours.
            var now = new Time.Date();
            now.setTimezone(req.user.timezone);
            var offset = -1 * now.getTimezoneOffset() / 60;

            data.locale = {
                'locale': req.user.locale,
                'timezone': {
                    'name': req.user.timezone,
                    'offset': offset
                }
            };

            res.send(200, data);
        });
    });

    server.post('/api/tenant/create', function(req, res, next) {
        if (req.body.port && req.body.id) {
            TenantAPI.createTenant(req.body.id, req.body.name, req.body.description, req.body.port, '', function(err) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(200, 'New tenant "' + req.body.name + '" has been fired up on port ' + req.body.port);
            });
        } else {
            res.send(400, 'The port and id for a tenant need to be specified');
        }
    });

    server.post('/api/tenant/start', function(req, res, next) {
        TenantAPI.putTenantsInMaintenanceMode(req.body, false, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send({'code': 200, 'msg': 'Tenant successfully taken out of maintenance mode.'});
        });
    });

    server.post('/api/tenant/stop', function(req, res, next) {
        TenantAPI.putTenantsInMaintenanceMode(req.body, true, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send({'code': 200, 'msg': 'Tenant successfully put in to maintenance mode.'});
        });
    });

    server.post('/api/tenant/delete', function(req, res, next) {
        TenantAPI.deleteTenants(req.body, function(err) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send({'code': 200, 'msg': 'Tenant successfully deleted.'});
        });
    });

    server.post('/admin/update', function(req, res, next) {
        ConfigAPI.writeConfig(req.body, function(err) {
            if (err) {
                return res.send(err.code, err.body);
            }
            res.send(200, 'Config successfully stored.');
        });
    });

    server.get('/api/tenants', function(req, res, next) {
        TenantAPI.getAllTenants(function(err, tenants) {
            if (err) {
                return res.send(err.code, err.msg);
            }
            res.send(200, tenants);
        });
    });

    server.get('/api/configuration', function(req, res, next) {
        if (req.query.tenantid) {
            ConfigAPI.readConfig(req.query.tenantid, function(err, configuration) {
                if (err) {
                    return res.send(err.code, err.msg);
                }
                res.send(200, configuration);
            });
        } else {
            res.send(400, 'A tenant ID is required to get the configuration.');
        }
    });

    // Create Cassandra database.
    Cassandra.init(config, function(err) {
        if (err) {
            return callback(err);
        }
        
        // We'll create/get 1 global admin account in the fake tenant system that can be used
        // to create tenants/other global accounts.
        var globalTenant = new Tenant('global', 'Global tenant', 'A fake tenant that can be used for global administration', 2000, 'localhost');
        var globalContext = new Context(globalTenant, null);
        // Create a global admin if it doesn't exist.
        PrincipalAPI.createUser(globalContext, 'administrator', 'administrator', 'private', 'en_GB', 'Europe/London', 'Admin', 'User', 'The global admin user', function(err, user_id) {
            // An error occurred.
            if (!err) {
                console.log("Admin account with user_id '%s' created.", user_id);
            } else if (err && err.msg && !err.msg.indexOf('already exists') > 0) {
                return callback(err);
            }
            // Fire up the tenants (if any)
            startTenants(callback);
        });
    });

};

/**
 * Start up all of the registered tenants
 * @param  {Function}   callback    Standard callback function executed when the tenant has fully
 *                                  started up, including registration of all REST endpoints
 */
var startTenants = function(callback) {
    TenantAPI.getAllTenants(function(err, tenants) {
        if (err) {
            throw err;
        }
        if (tenants.length) {
            var tenantsStarted = 0;
            for (var t = 0; t < tenants.length; t++) {
                TenantAPI.startTenant(tenants[t], function() {
                    tenantsStarted++;
                    if (tenantsStarted === tenants.length) {
                        callback();
                    }
                });
            }
        } else {
            callback();
        }
    });
};

/////////////
// Modules //
/////////////

/**
 * Gets the file list for a single module
 * @param {String} module Name of the module (without oae- prepended)
 * @param {Function} callback Function executed when the list is retrieved
 */
module.exports.getSingleModule = function(module, callback) {
    IO.getFileListForFolder("node_modules", function(modules) {
        var finalModule = {};
        for (var m = 0; m < modules.length; m++) {
            if (modules[m] === "oae-" + module) {
                finalModule = modules[m];
            }
        }
        callback([finalModule]);
    });
};

/**
 * Gets the file list for a single module
 * @param {Function} callback Function executed when the list is retrieved
 */
module.exports.getAvailableModules = function(callback) {
    IO.getFileListForFolder("node_modules", function(modules) {
        var finalModules = [];
        // Modules get loaded in order by priority
        // if no priority is specified they go in last
        modules.sort(function(a,b) {
            var getPriority = function(module){
                var filename = "./node_modules/" + module + "/package.json";
                var pkg = JSON.parse(fs.readFileSync(filename, 'utf-8'));
                if (pkg.oae && pkg.oae.priority) {
                    // found a priority in package.json at oae.priority
                    return pkg.oae.priority;
                } else {
                    // no priority found 
                    return Number.MAX_VALUE;
                }
            };
            return getPriority(a) - getPriority(b);
        });
        for (var m = 0; m < modules.length; m++) {
            if (modules[m].substring(0, 4) === "oae-") {
                finalModules.push(modules[m]);
            }
        }
        callback(finalModules);
    });
};
