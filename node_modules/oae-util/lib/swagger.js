/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var clone = require('clone');
var fs = require('fs');
var readdirp = require('readdirp');
var restjsdoc = require('restjsdoc');

var log = require('oae-logger').logger('oae-swagger');
var OAE = require('./oae');
var Server = require('./server');
var SwaggerParamTypes = require('./swaggerParamTypes');
var TenantsUtil = require('oae-tenants/lib/util');
var Validator = require('oae-util/lib/validator').Validator;

var Constants = module.exports.Constants = {
    'apiVersion': '0.1',
    'swaggerVersion': '1.2',
    'basePath': '/api/',
    'paramTypes': [
        'path',
        'query',
        'body',
        'form',
        'header'
    ],
    'primitives': [
        'integer',
        'long',
        'float',
        'double',
        'string',
        'byte',
        'boolean',
        'date',
        'dateTime',
        'int32',
        'int64',
        'number',
        'date-time'
   ]
};

var models = {};
var tenantResources = {};
var adminResources = {};

/**
 * Finds all the *.js files in a module's `lib` directory and runs them through the restjsdoc parser
 *
 * @param  {String}     moduleName  The oae module to be swagger documented
 * @param  {Function}   callback    Standard callback function called when all files in the module have been processed
 */
var documentModule = module.exports.documentModule = function(moduleName, callback) {
    var files = [];
    var dirsToProcess = ['lib'];
    if (process.env['NODE_ENV'] === 'unittest') {
        dirsToProcess.push('tests');
    }
    readdirp({'root': 'node_modules/' + moduleName, 'directoryFilter': dirsToProcess, 'fileFilter': '*.js'})
        .on('data', function(entry) {
            files.push(entry.fullPath);
        })
        .on('error', function(err) {
            log().warn({'err': err}, 'Problem recursing directories while documenting ' + moduleName);
        }).on('end', function() {
            var done = _.after(files.length, callback);
            _.each(files, function(file) {
                _register(file, function(err) {
                    if (err) {
                        log().warn({'err': err}, 'Problem opening a file while documenting ' + moduleName);
                    }
                    return done();
                });
            });
        });
};

/**
 * Read the restjsdoc from a file and register its contents with swagger
 *
 * @param  {String}     filePath        The full path to the file to be documented
 * @param  {Function}   callback        Standard callback function called after the file is processed
 * @param  {Object}     callback.err    An error that occurred, if any
 * @api private
 */
var _register = function(filePath, callback) {
    fs.readFile(filePath, function (err, data) {
        if (err) {
            return callback(err);
        }
        try {
            var doc = restjsdoc.parse(data);
            // Add all models to both servers
            _.each(doc.models, function(model, modelName) {
                model.id = modelName;
                _.each(model.properties, function(property) {
                    // RestJSDoc arrays look like `type[]` so unArray will just be the bare `type`
                    var unArray = property.type.replace(/\[\]$/, '');
                    /*!
                     * If the property.type doesn't match unArray then it was an array so we need to transform it to
                     * swagger model notation like:
                     *
                     *      property = {
                     *          'type': 'array',
                     *          'items': { 'type': 'string' }
                     *      }
                     *
                     * for primitive types and:
                     *
                     *      property = {
                     *          'type': 'array',
                     *          'items': { '$ref': 'Model' }
                     *      }
                     *
                     * for complex types
                     */
                    if (property.type !== unArray) {
                        property.type = 'array';
                        if (_.contains(Constants.primitives, unArray)) {
                            property.items = {'type': unArray};
                        } else {
                            property.items = {'$ref': unArray};
                        }
                    }
                });
                models[modelName] = model;
            });

            // Convert the restjsdoc objects to swagger objects
            _.each(doc.endpoints, function(endpoint, nickname) {
                endpoint.nickname = nickname;
                endpoint.summary = endpoint.description;
                endpoint.responseClass = _convertRJDArrayDefToSwagger(endpoint['return'].type);

                endpoint.parameters = [];
                _.each(endpoint.pathParams, function(pathParam) {
                    endpoint.parameters.push(SwaggerParamTypes.path(pathParam.name, pathParam.description, _convertRJDArrayDefToSwagger(pathParam.type), _constructSwaggerValue(pathParam.validValues), pathParam.defaultValue));
                });
                _.each(endpoint.queryParams, function(queryParam) {
                    var isMultiple = /\[\]$/.test(queryParam.type);
                    var type = isMultiple ? queryParam.type.slice(0, -2) : queryParam.type;
                    endpoint.parameters.push(SwaggerParamTypes.query(queryParam.name, queryParam.description, type, queryParam.required, isMultiple, _constructSwaggerValue(queryParam.validValues), queryParam.defaultValue));
                });
                _.each(endpoint.bodyParams, function(bodyParam) {
                    endpoint.parameters.push(SwaggerParamTypes.body(bodyParam.name, bodyParam.description, _convertRJDArrayDefToSwagger(bodyParam.type), bodyParam.defaultValue));
                });
                _.each(endpoint.headerParams, function(headerParam) {
                    endpoint.parameters.push(SwaggerParamTypes.header(headerParam.name, headerParam.description, _convertRJDArrayDefToSwagger(headerParam.type), headerParam.required));
                });
                _.each(endpoint.formParams, function(formParam) {
                    endpoint.parameters.push(SwaggerParamTypes.form(formParam.name, formParam.description, _convertRJDArrayDefToSwagger(formParam.type), formParam.defaultValue));
                });

                // Add the endpoint to the appropriate server
                if (endpoint.server === 'tenant') {
                    _addSwaggerEndpoint(endpoint, tenantResources);
                } else if (endpoint.server === 'admin') {
                    _addSwaggerEndpoint(endpoint, adminResources);
                } else {
                    log().warn('Tried to register swagger docs for unknown server "' + endpoint.server + '"');
                }
            });
        } catch(ex) {
            log().warn({'err': ex}, util.format('Could not parse restjsdoc in %s %s', filePath, ex.message));
        }
        return callback();
    });
};

/**
 * Use swagger to document a route on the associated server
 *
 * @param  {Object}     spec        The swagger spec for the route
 * @param  {Object}     resources   The swagger resources to append the spec to
 * @throws {Error}                  Error thrown when arguments aren't of the proper type
 */
_addSwaggerEndpoint = function(spec, resources) {
    var apiRootPath = spec.path.split('/')[1];
    // Get the /api root resource
    var root = resources[apiRootPath] = resources[apiRootPath] || {
        'apiVersion': Constants.apiVersion,
        'swaggerVersion': Constants.swaggerVersion,
        'basePath': Constants.basePath,
        'resourcePath': apiRootPath + '/',
        'apis': [],
        'models': {}
    };

    // If the api is already defined just append to it, otherwise create it
    var api = _.findWhere(root.apis, {'path': spec.path, 'method':  spec.method});

    if (api === undefined) {
        api = {'path': spec.path};
        root.apis.push(api);
    }

    _appendToApi(root, api, spec);
};

/**
 * Add a spec to an existing swagger api
 *
 * @param  {Object}       rootResource    The swagger resource this api belongs under
 * @param  {Object}       api             The api of the resource this spec belongs to
 * @param  {Object}       spec            The swagger spec to append
 */
var _appendToApi = function(rootResource, api, spec) {
    api.description = api.description || spec.description;
    var validator = new Validator();

    validator.check(spec.nickname, {'path': api.path, 'msg': 'Nickname must exist'}).notEmpty();
    validator.check(spec.nickname, {'path': api.path, 'msg': 'Nicknames cannot contain spaces: ' + spec.nickname}).notContains(' ');

    // Parse and validate params
    _.each(spec.params, function (param) {
        validator.check(param.paramType, {'path': api.path, 'name': param.name, 'msg': 'Invalid param type: ' + param.paramType}).isIn(Swagger.Constants.paramTypes);
        if (param.paramType === 'path') {
            validator.check(param.name, {'path': api.path, 'name': param.name, 'msg': 'Invalid path'}).isIn(api.path);
        }
    });

    if (validator.hasErrors()) {
        log().warn({'swaggerValidationErrors': validator.getErrors()}, 'Some swagger documentation could not be parsed, the server will start but those routes may be undocumented');
    }

    api.operations = api.operations || [];

    var op = {
        'parameters': spec.parameters,
        'httpMethod': spec.method,
        'notes': spec.notes,
        'errorResponses': spec.errorResponses,
        'nickname': spec.nickname,
        'summary': spec.summary,
        'consumes': spec.consumes,
        'produces': spec.produces
    };

    // The op object is everything required for swagger, but we can include the original spec object as well
    op = _.extend({}, spec, op);
    op.responseClass = spec.responseClass || 'void';
    api.operations.push(op);
};

/**
 * Convert RestJsDoc array syntax `type[]` to swagger syntax `List[type]` if given a bare `type` it is returned unmodified
 *
 * @param  {String}     def     The RestJsDoc array definition like type[] or bare type
 * @return {String}             The swagger array definition like List[type] or bare type
 * @api private
 */
var _convertRJDArrayDefToSwagger = function(def) {
    if (def.match(/\[\]$/)) {
        def = util.format('List[%s]', def.slice(0, -2));
    }
    return def;
};

/**
 * Convert a javascript array into a swagger value object. Swagger value objects can represent arrays or ranges,
 * but we only support arrays. Value objects are used to enumerate the allowable values for path and query parameters.
 *
 * @param  {String[]}   array   The array to be converted
 * @return {Object}             A swagger value object representing the array or undefined if the value passed in wasn't an array
 * @api private
 */
var _constructSwaggerValue = function(array) {
    return (_.isArray(array)) ? {'valueType': 'LIST', 'values': array} : null;
};

/**
 * Get the swagger resources list
 *
 * @param  {Context}        ctx     The context of the request
 * @return {ResourceList}           See https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#51-resource-listing
 */
var getResources = module.exports.getResources = function(ctx) {
    var resources = _getSwaggerResources(ctx);
    var swaggerResources = {
        'apiVersion': Constants.apiVersion,
        'swaggerVersion': Constants.swaggerVersion,
        'apis': []
    };
    _.each(resources, function(value, key) {
        swaggerResources.apis.push({
            'path': '/' + key,
            'description': 'none'
        });
    });
    return swaggerResources;
};

/**
 * Get the swagger api declaration for a resource
 *
 * @param  {Context}    ctx                     The context of the request
 * @param  {String}     swaggerResourcePath     The resource path
 * @return {ApiDeclaration}                     See https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md#52-api-declaration
 */
var getApi = module.exports.getApi = function(ctx, swaggerResourcePath) {
    var resources = _getSwaggerResources(ctx);
    var url = TenantsUtil.getBaseUrl(ctx.tenant()) + '/api';
    var api = clone(resources[swaggerResourcePath]);
    api.basePath = url;
    return api;
};

/**
 * Iterate over all resources and populate their models
 */
var addModelsToResources = module.exports.addModelsToResources = function() {
    _.each(adminResources, function(resource) {
        _addModelsToResource(resource, models);
    });
    _.each(tenantResources, function(resource) {
        _addModelsToResource(resource, models);
    });
};

/**
 * Find all the models that a resource needs and add them to its model list
 *
 * @param  {Resource}   resource        The resource to process
 * @param  {Object}     allModels       All the models registered for this server
 */
var _addModelsToResource = function(resource, allModels) {
    var requiredModelNames = [];
    // Collect the list of models that this resource references
    _.each(resource.apis, function(api) {
        _.each(api.operations, function(operation) {
            _addModelsFromBody(operation, requiredModelNames);
            _addModelsFromResponse(operation, requiredModelNames);
            requiredModelNames = _.uniq(requiredModelNames);
        });
    });

    // Add required models to resource
    _.each(requiredModelNames, function(modelName) {
        var model = allModels[modelName];
        if (model) {
            resource.models[modelName] = model;
        }
    });

    // Now that we have the models that are referenced directly we need to iterate over them and add
    // any new ones that they reference for instance if we have an object like Group that has an array of User that
    // references Tenant we'll need to return the models for Group, User and Tenant
    var uncheckedModels = true;
    while (uncheckedModels) {
        uncheckedModels = _checkModels(resource, requiredModelNames);
    }

    // Add the full model objects to resource.models
    _.each(requiredModelNames, function(modelName) {
        if (!resource.models[modelName]) {
            var model = allModels[modelName];
            if (model) {
                resource.models[modelName] = model;
            }
        }
    });
};

 /**
  * Get all the swagger resources for the appropriate tenant
  *
  * @param  {Context}    ctx     The request context
  * @return {Object}             An object containing all the swagger resource info associated to the tenant
  * @api private
  */
var _getSwaggerResources = function(ctx) {
    return (ctx.tenant().isGlobalAdminServer) ? adminResources : tenantResources;
};

/**
 *  Iterate the models on a resource checking for references to other models
 *
 *  @param  {Resource}  resource            The resource to check for model references
 *  @param  {String[]}  requiredModelNames  The list of models to append newly found models to
 *  @return {Boolean}                       Whether new model references were found
 */
var _checkModels = function(resource, requiredModelNames) {
    var addedModels = false;
    _.each(resource.models, function(model) {
        _.each(model.properties, function (property) {
            var type = property.type;

            if (type === 'array') {
                if (property.items && property.items.$ref) {
                    var ref = property.items.$ref;
                    if (! _.contains(requiredModelNames, ref)) {
                        requiredModelNames.push(ref);
                        addedModels = true;
                    }
                }
            } else if (! _.contains(Constants.primitives, type) && ! _.contains(requiredModelNames, type)) {
                requiredModelNames.push(type);
                addedModels = true;
            }
        });
    });
    return addedModels;
};

/**
 * Parse the body parameters and add all referenced models to the model list
 *
 * @param  {String}     operation   The operation object from the swagger api declaration to parse
 * @param  {String[]}   models      The list of referenced models, any newly referenced models will be appended
 * @api private
 */
var _addModelsFromBody = function(operation, models) {
    _.each(operation.parameters, function (param) {
        if (param.paramType === 'body' && param.dataType) {
            var model = _unwrapSwaggerType(param.dataType);
            models.push(model);
        }
    });
};

/**
 * Parse the response type and add all referenced models to the model list
 *
 * @param  {String}     operation   The operation object from the swagger api declaration to parse
 * @param  {String[]}   models      The list of referenced models, any newly referenced models will be appended
 * @api private
 */
var _addModelsFromResponse = function(operation, models) {
    var responseModel = operation.responseClass;
    if (responseModel) {
        responseModel = _unwrapSwaggerType(responseModel);
        models.push(responseModel);
    }
};

/**
 * Get the bare `type` of swagger style `List[type]` or `type`
 *
 * @param  {String}     type    The type declaration to be unwrapped
 * @return {String}             The unwrapped type declaration
 */
var _unwrapSwaggerType = function(type) {
    return type.replace(/^List\[/, '').replace(/\]/, '');
};
