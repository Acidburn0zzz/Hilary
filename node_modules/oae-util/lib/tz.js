/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var tz = require('timezone-js');
var fs = require('fs');
var railsTimezone = require('rails-timezone');

var RailsMappings = require('oae-util/timezones-rails');

tz.timezone.loadingScheme = tz.timezone.loadingSchemes.MANUAL_LOAD;
tz.timezone.transport = function(opts) {
    return fs.readFileSync(opts.url, 'utf8');
};
tz.timezone.loadZoneJSONData(__dirname + '/../timezones.json', true);

module.exports = tz;

/**
 * Given a ruby-on-rails supported timezone name, map it to a TZInfo identifier supported by OAE.
 *
 * @param   {String}    zone   The rails timezone to map
 * @return  {String}           The TZInfo identifier that represents the associated rails timezone
 */
var getTimezoneFromRails = module.exports.getTimezoneFromRails = function(zone) {
    return railsTimezone.from(zone);
};

/**
 * Given a olson timezone name, map it to a ruby-on-rails timezone.
 *
 * @param   {String}    zone   The olson timezone to map
 * @return  {String}           The associated rails timezone
 */
var getRailsTimezoneFromTZInfo = module.exports.getRailsTimezoneFromTZInfo = function(zone) {
    // If there's a direct mapping just return it
    if (railsTimezone.to(zone)) {
        return railsTimezone.to(zone);
    }
    // Otherwise we'll guess a zone based on the offset

    // Get the current offsets for all rails zones
    var railsOffsets = {};
    for (var zoneMapping in RailsMappings) {
        var mappingDate = new tz.Date('now', RailsMappings[zoneMapping]);
        railsOffsets[mappingDate.getTimezoneOffset()] = zoneMapping;
    }
    var userOffset = new tz.Date('now', zone).getTimezoneOffset();
    // if there's a zone with a matching offset return it
    if (railsOffsets[userOffset]) {
        return railsOffsets[userOffset];
    }
    // no matching offset, return the zone with the closest offset
    var availableOffsets = Object.keys(railsOffsets);
    var closest = availableOffsets[0];
    var deltaClosest = Math.abs(closest - userOffset);
    for (var i = 1; i < availableOffsets.length; i++) {
        var deltaChecking = Math.abs(availableOffsets[i] - userOffset);
        if (deltaChecking < deltaClosest) {
            closest = availableOffsets[i];
            deltaClosest = Math.abs(closest - userOffset);
        }
    }
    return railsOffsets[closest];
};

/**
 * Gets a list of available timezones with their current offset from UTC
 *
 * @return  {Object}        A map of all the available rails timezones and their offsets from UTC
 */
var getZones = module.exports.getZones = function() {
    var railsZones = {};
    for (var zoneMapping in RailsMappings) {
        var mappingDate = new tz.Date('now', RailsMappings[zoneMapping]);
        railsZones[RailsMappings[zoneMapping]] = {
            'displayName': zoneMapping,
            'offset': mappingDate.getTimezoneOffset()
        };
    }
    return railsZones;
};
