/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Cassandra = require('oae-util/lib/cassandra');


describe('Utilities', function() {
    
    describe('Cassandra', function() {

        /**
         * Test that will validate that keyspaces can be created, checked and dropped
         */
        it('Test keyspaces', function(callback) {
            var keyspace = "keyspacetest" + Math.floor(Math.random()*100000000);
            Cassandra.createKeyspace(keyspace, function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                Cassandra.keyspaceExists(keyspace, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);

                    Cassandra.dropKeyspace(keyspace, function(err, dropped) {
                        assert.ok(!err);
                        assert.ok(dropped);
                        callback();
                    });
                });
            });
        });

        /**
         * Test that it is possible to create, check and drop column families.
         */
        it('Test column family', function(callback) {
            var name = "cf" + Math.floor(Math.random()*10000000);
            Cassandra.createColumnFamily(name, "CREATE TABLE " + name + " (key_id text PRIMARY KEY)", function(err, created) {
                assert.ok(!err);
                assert.ok(created);

                 // Check if it exists.
                Cassandra.columnFamilyExists(name, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);

                    // Drop it.
                    Cassandra.dropColumnFamily(name, function(err, dropped) {
                        assert.ok(!err);
                        assert.ok(dropped);

                        // Make sure it's gone.
                        Cassandra.columnFamilyExists(name, function(err, exists) {
                            assert.ok(!err);
                            assert.ok(!exists);

                            callback();
                        });
                    });
                });
            })
        });

        /**
         * Test that it is possible to create, check and drop multiple columnfamilies at once.
         */
        it('Test multiple column families', function(callback) {
            var name1 = 'cf' + Math.floor(Math.random()*10000000);
            var name2 = 'cf' + Math.floor(Math.random()*10000000);

            Cassandra.createColumnFamilies({
                name1: 'create table ' + name1 + ' (key_id text primary key)',
                name2: 'create table ' + name2 + ' (key_id text primary key)'
            }, function(err) {
                assert.ok(!err);
                // Check if it exists.
                Cassandra.columnFamilyExists(name1, function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);
                    Cassandra.columnFamilyExists(name2, function(err, exists) {
                        assert.ok(!err);
                        assert.ok(exists);
                        // Remove them
                        Cassandra.dropColumnFamilies([name1, name2], function(err){
                            assert.ok(!err);
                            // Check if they still exist
                            Cassandra.columnFamilyExists(name1, function(err, exists) {
                                assert.ok(!err);
                                assert.ok(!exists);
                                Cassandra.columnFamilyExists(name2, function(err, exists) {
                                    assert.ok(!err);
                                    assert.ok(!exists);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });
        
        /**
         * Test the runQuery function, making sure that null and undefined values are handled appropriately
         */
        it('Test run query', function(callback) {
            // Create a CF first
            Cassandra.createColumnFamily('testQuery', "CREATE TABLE testQuery (key_id text PRIMARY KEY)", function(err, created) {
                assert.ok(!err);
                assert.ok(created);
                // Check if the CF exists
                Cassandra.columnFamilyExists('testQuery', function(err, exists) {
                    assert.ok(!err);
                    assert.ok(exists);
                    // Try to run a simple insert
                    Cassandra.runQuery('INSERT INTO testQuery (key_id, c1, c2) VALUES (?, ?, ?)', ['key1', 'value1', 'value2'], function (err) {
                        assert.ok(!err);
                        // Try to run an invalid insert
                        Cassandra.runQuery('INSERT INTO testQuery (key_id, c1, c2) VALUES (?, ?, ?)', ['key2', 'value', null], function (err) {
                            assert.ok(err);
                            // Try to run a simple select
                            Cassandra.runQuery('SELECT * FROM testQuery WHERE key_id = ?', ['key1'], function (err, rows) {
                                assert.ok(!err);
                                assert.equal(rows.length, 1);
                                assert.equal(rows[0].key, 'key1');
                                // Try to run an invalid select
                                Cassandra.runQuery('SELECT * FROM testQuery WHERE key_id = ?', [null], function (err, rows) {
                                    assert.ok(err);
                                    callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test whether the constructUpdateCQL works as expected, making sure that invalid parameters
         * are handled appropriately
         */
        it('Test construct update', function(callback) {
            // Test an invalid call with no provided cf
            var query1 = Cassandra.constructUpdateCQL(null, {'key1': 'value1'}, 'testId', 'testValue');
            assert.ok(!query1); 
            // Test an invalid call with no provided values
            var query2 = Cassandra.constructUpdateCQL('testCF', {}, 'testId', 'testValue');
            assert.ok(!query2);
            // Test a valid update with one key-value pair
            var query3 = Cassandra.constructUpdateCQL('testCF', {'key1': 'value1'}, 'testId', 'testValue');
            assert.ok(query3);
            assert.equal(query3.query, 'UPDATE testCF SET ? = ? WHERE testId = ?');
            assert.equal(query3.parameters[0], 'key1');
            assert.equal(query3.parameters[1], 'value1');
            assert.equal(query3.parameters[2], 'testValue');
            // Test a valid update with multiple key-value pairs
            var query4 = Cassandra.constructUpdateCQL('testCF', {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}, 'testId', 'testValue');
            assert.ok(query4);
            assert.equal(query4.query, 'UPDATE testCF SET ? = ?, ? = ?, ? = ? WHERE testId = ?');
            assert.equal(query4.parameters[0], 'key1');
            assert.equal(query4.parameters[1], 'value1');
            assert.equal(query4.parameters[2], 'key2');
            assert.equal(query4.parameters[3], 'value2');
            assert.equal(query4.parameters[4], 'key3');
            assert.equal(query4.parameters[5], 'value3');
            assert.equal(query4.parameters[6], 'testValue');
            callback();
        });

    });
});
