/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 * 
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var assert = require('assert');

var MQ = require('oae-util/lib/mq');

describe('MQ', function() {
    describe('#bind()', function() {

        it('verify re-initialization is safe', function(callback) {
            // ensure processing continues, and that MQ is still stable with the tests that follow.
            MQ.init({}, callback);
        });

        it('verify binding can receive a task', function(callback) {
            var testQueue = 'testQueue-' + new Date().getTime();
            MQ.bind(testQueue, function(data) {
                assert.ok(data);
                assert.equal(data.activity, 'you stink!');
                callback();
            },
            function() {
                MQ.submit(testQueue, {'activity': 'you stink!'});
            });
        });

        it('verify unbinding and then rebinding', function(callback) {
            var testQueue = 'testQueue-' + new Date().getTime();
            MQ.bind(testQueue, function() {
                // dead end. if this is the effective method the test will hang and time out
            },
            function() {
                // now unbind it so we can re-bind with a valid handler
                MQ.unbind(testQueue, function() {
                    MQ.bind(testQueue, function(data) {
                        assert.ok(data);
                        assert.equal(data.activity, 'you stink!');
                        callback();
                    },
                    function() {
                        MQ.submit(testQueue, {'activity': 'you stink!'});
                    });
                });
            });
        })

        it('verify binding an existing queue is safe', function(callback) {
            var testQueue = 'testQueue-' + new Date().getTime();
            MQ.bind(testQueue, function(){}, function() {
                // simply make sure the callback gets executed and we can carry on
                MQ.bind(testQueue, function(){}, callback);
            });
        });

        it('verify unbind non-existing queue is safe', function(callback) {
            var testQueue = 'testQueue-' + new Date().getTime();
            // simply make sure there is no exception
            MQ.unbind(testQueue, callback);
        });

        it('verify exception in listener is safe', function(callback) {
            var testQueue = 'testQueue-' + new Date().getTime();
            MQ.bind(testQueue, function(data) {
                throw new Error('Hard-coded exception to verify application remains stable.');
            },
            function() {
                MQ.submit(testQueue, { 'activity': 'blah' });
                // simply make sure tests continue normally when the exception is thrown
                callback();
            });
        });
    });
});
