/*
 * Copyright 2013 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
var assert = require('assert');

var MQ = require('oae-util/lib/mq');
var TaskQueue = require('oae-util/lib/taskqueue');

describe('MQ', function() {

    /**
     * Some options that can be used to bind to a message queue.
     */
    var purgeQueueOptions = {
        'subscribe': {
            'prefetchCount': 1
        },
        'queue': {
            'durable': false
        }
    };

    /**
     * Verify that re-initializing the MQ doesn't invoke an error
     */
    it('verify re-initialization is safe', function(callback) {
        // Ensure processing continues, and that MQ is still stable with the tests that follow.
        MQ.init({}, callback);
    });

    describe('#purge()', function() {

        /**
         * Test that verifies the parameters
         */
        it('verify parameter validation', function(callback) {
            var name = 'testQueue-' + Math.floor(Math.random()*1000000);
            MQ.purge(name, function(err) {
                assert.equal(err.code, 400);
                return callback();
            });
        });

        /**
         * Verify that a queue can be purged of its tasks.
         */
        it ('verify a queue can be purged', function(callback) {
            var called = 0;
            var taskHandler = function(data, taskCallback) {
                called++;
                setTimeout(taskCallback, 2000);
            };

            var testQueue = 'testQueue-' + new Date().getTime();
            TaskQueue.bind(testQueue, taskHandler, purgeQueueOptions, function() {
                // Submit a couple of tasks.
                for (var i = 0; i < 10; i++) {
                    TaskQueue.submit(testQueue, { 'foo': 'bar' });
                }

                // Purge the queue.
                MQ.purge(testQueue, function() {
                    // Because of the asynchronous nature of node/rabbitmq it's possible that a task gets delivered
                    // before the purge command is processed.
                    // That means we should have only handled at most 1 task.
                    assert.ok(called <= 1);
                    callback();
                });
            });
        });
    });

    describe('#purgeAll()', function() {

        /**
         * Verify that all known queues can be purged of its tasks.
         */
        it ('verify all queues can be purged', function(callback) {
            var called = {'a': 0, 'b': 0};
            var taskHandler = function(data, taskCallback) {
                called[data.queue]++;
                setTimeout(taskCallback, 2000);
            };

            var testQueueA = 'testQueueA-' + new Date().getTime();
            var testQueueB = 'testQueueB-' + new Date().getTime();
            TaskQueue.bind(testQueueA, taskHandler, purgeQueueOptions, function() {
                TaskQueue.bind(testQueueB, taskHandler, purgeQueueOptions, function() {
                    // Submit a couple of tasks.
                    for (var i = 0; i < 10; i++) {
                        TaskQueue.submit(testQueueA, { 'queue': 'a' });
                        TaskQueue.submit(testQueueB, { 'queue': 'b' });
                    }

                    // Purge all the queues.
                    MQ.purgeAll(function() {
                        // Because of the asynchronous nature of node/rabbitmq it's possible that a task gets delivered
                        // before the purge command is processed.
                        // That means we should have only handled at most 1 task.
                        assert.ok(called['a'] <= 1);
                        assert.ok(called['b'] <= 1);
                        callback();
                    });
                });
            });
        });
    });

    describe('#declareExchange()', function() {

        /**
         * Test that verifies that exchanges cannot be declared twice
         */
        it('verify exchanges cannot be declared twice', function(callback) {
            var exchangeName = 'testExchange-' + Math.floor(Math.random()*10000);
            MQ.declareExchange(exchangeName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);
                MQ.declareExchange(exchangeName, {'durable': false, 'autoDelete': true}, function(err) {
                    assert.equal(err.code, 400);
                    return callback();
                });
            });
        });
    });

    describe('#declareQueue()', function() {

        /**
         * Test that verifies that queues cannot be declared twice
         */
        it('verify queues cannot be declared twice', function(callback) {
            var queueName = 'testQueue-' + Math.floor(Math.random()*10000);
            MQ.declareQueue(queueName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);
                MQ.declareQueue(queueName, {'durable': false, 'autoDelete': true}, function(err) {
                    assert.equal(err.code, 400);
                    return callback();
                });
            });
        });
    });

    describe('#isQueueDeclared()', function() {

        /**
         * Test that verifies that it can be retrieved whether or not queues are declared
         */
        it('verify isQueueDeclared works', function(callback) {
            var queueName = 'testQueue-' + Math.floor(Math.random()*10000);
            var exchangeName = 'testExchange-' + Math.floor(Math.random()*10000);

            var isDeclared = MQ.isQueueDeclared(queueName);
            assert.strictEqual(isDeclared, false);

            MQ.declareQueue(queueName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);

                isDeclared = MQ.isQueueDeclared(queueName);
                assert.strictEqual(isDeclared, true);
                return callback();
            });
        });
    });

    describe('#bindQueueToExchange()', function() {

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify parameter validation', function(callback) {
            var exchangeName = 'testExchange-' + Math.floor(Math.random()*10000);
            var queueName = 'testQueue-' + Math.floor(Math.random()*10000);
            var routingKey = 'testRoutingKey-' + Math.floor(Math.random()*10000);

            MQ.declareExchange(exchangeName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);
                MQ.declareQueue(queueName, {'durable': false, 'autoDelete': true}, function(err) {
                    assert.ok(!err);
                    MQ.bindQueueToExchange(null, exchangeName, routingKey, function(err) {
                        assert.equal(err.code, 400);
                        MQ.bindQueueToExchange(queueName, null, routingKey, function(err) {
                            assert.equal(err.code, 400);
                            MQ.bindQueueToExchange(queueName, exchangeName, null, function(err) {
                                assert.equal(err.code, 400);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a queue can be bound to an exchange
         */
        it('verify functionality', function() {
            var exchangeName = 'testExchange-' + Math.floor(Math.random()*10000);
            var queueName = 'testQueue-' + Math.floor(Math.random()*10000);
            var routingKey = 'testRoutingKey-' + Math.floor(Math.random()*10000);
            var data = {'text': 'The truth is out there'};

            MQ.declareExchange(exchangeName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);
                MQ.declareQueue(queueName, {'durable': false, 'autoDelete': true}, function(err) {
                    assert.ok(!err);
                    var listener = function(msg) {
                        // Verify the message we receive is correct
                        assert.strictEqual(msg.text, data.text);

                        // Unbind the queue so both the queue and exchange will go away when we restart rabbitmq-server
                        MQ.unbindQueueFromExchange(queueName, exchangeName, routingKey, function(err) {
                            assert.ok(!err);
                            return callback();
                        });
                    };
                    MQ.subscribeQueue(queueName, {}, listener, function(err) {
                        assert.ok(!err);

                        MQ.bindQueueToExchange(queueName, exchangeName, routingKey, function(err) {
                            assert.ok(!err);

                            MQ.submit(exchangeName, routingKey, data);
                        });
                    });
                });
            });
        });
    });

    describe('#unbindQueueFromExchange()', function() {

        /**
         * Test that verifies that the parameters are validated
         */
        it('verify parameter validation', function(callback) {
            var exchangeName = 'testExchange-' + Math.floor(Math.random()*10000);
            var queueName = 'testQueue-' + Math.floor(Math.random()*10000);
            var routingKey = 'testRoutingKey-' + Math.floor(Math.random()*10000);

            MQ.declareExchange(exchangeName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);
                MQ.declareQueue(queueName, {'durable': false, 'autoDelete': true}, function(err) {
                    assert.ok(!err);
                    MQ.unbindQueueFromExchange(null, exchangeName, routingKey, function(err) {
                        assert.equal(err.code, 400);
                        MQ.unbindQueueFromExchange(queueName, null, routingKey, function(err) {
                            assert.equal(err.code, 400);
                            MQ.unbindQueueFromExchange(queueName, exchangeName, null, function(err) {
                                assert.equal(err.code, 400);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies a queue can be unbound from an exchange
         */
        it('verify functionality', function() {
            var exchangeName = 'testExchange-' + Math.floor(Math.random()*10000);
            var queueName = 'testQueue-' + Math.floor(Math.random()*10000);
            var routingKey = 'testRoutingKey-' + Math.floor(Math.random()*10000);
            var data = {'text': 'The truth is out there'};

            MQ.declareExchange(exchangeName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);
                MQ.declareQueue(queueName, {'durable': false, 'autoDelete': true}, function(err) {
                    assert.ok(!err);
                    var handledMessages = 0;
                    var listener = function(msg) {
                        handledMessages++;

                        // We should only receive one message
                        assert.strictEqual(handledMessages, 1);

                        // Verify the message we receive is correct
                        assert.strictEqual(msg.text, data.text);
                    };
                    MQ.subscribeQueue(queueName, {}, listener, function(err) {
                        assert.ok(!err);

                        MQ.bindQueueToExchange(queueName, exchangeName, routingKey, function(err) {
                            assert.ok(!err);

                            MQ.submit(exchangeName, routingKey, data, function() {

                                // Unbind the queue from the exchange, we should no longer receive any messages
                                MQ.unbindQueueFromExchange(queueName, exchangeName, routingKey, function(err) {
                                    assert.ok(!err);

                                    MQ.submit(exchangeName, routingKey, data, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('#submit()', function() {

        /**
         * Test that verifies the passed in parameters
         */
        it('verify parameter validation', function(callback) {
            var exchangeName = 'testExchange-' + Math.floor(Math.random()*10000);
            var routingKey = 'testRoutingKey-' + Math.floor(Math.random()*10000);
            var data = {'text': 'The truth is out there'};

            MQ.declareExchange(exchangeName, {'durable': false, 'autoDelete': true}, function(err) {
                assert.ok(!err);
                // An exchange must be provided
                MQ.submit(null, routingKey, data, null, function(err) {
                    assert.equal(err.code, 400);

                    // A routing-key must be provided
                    MQ.submit(exchangeName, null, data, null, function(err) {
                        assert.equal(err.code, 400);

                        return callback();
                    });
                });
            });
        });
    });
});
