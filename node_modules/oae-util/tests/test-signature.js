/*
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var assert = require('assert');

var Signature = require('oae-util/lib/signature');
var Validator = require('oae-util/lib/validator').Validator;

describe('Signature', function() {
    describe('Validator', function() {

        /*!
         * Validate a simple signature.
         */
        var validate = function(body, signature, isValid) {
            var validator = new Validator();
            validator.check(signature, "Invalid signature").verifySignature('camtest', body);
            assert.equal(validator.hasErrors(), !isValid);
        };

        /*!
         * Validate an expiring signature.
         */
        var validateExpiring = function(body, signature, expires, isValid) {
            var validator = new Validator();
            validator.check(signature, "Invalid signature").verifyExpiringSignature('camtest', expires, body);
            assert.equal(validator.hasErrors(), !isValid);
        };

        /*!
         * Verify that the simple signature utility works.
         */
        it('#verifySignature()', function() {
            var body = "The quick brown fox jumped over the lazy dog.";
            var signature = Signature.sign('camtest', body);

            validate(body, signature, true);
            validate('totally different', signature, false);
            validate(body + 'a', signature, false);
        });

        /*!
         * Verify that the expring signature utility works.
         */
        it('#verifyExpiringSignature()', function(callback) {
            var body = "The quick brown fox jumped over the lazy dog.";
            // expire after 2 ms
            var expires = 2;
            var signature = Signature.createExpiringSignature('camtest', expires, body);

            validateExpiring(body, signature.signature, signature.expires, true);
            validateExpiring('totally different', signature.signature, signature.expires, false);
            validateExpiring(body + 'a', signature.signature, signature.expires, false);

            // Test expiration.
            setTimeout(function() {
                // The signature is now invalid as 20 ms have past.
                validateExpiring(body, signature.signature, signature.expires, false);
                callback();
            }, 20);
        });

        /*!
         * Verify that the expires-at-a-date signature utility works.
         */
        it('#verifyExpiresAtSignature()', function() {
            var body = "The quick brown fox jumped over the lazy dog.";
            // Expires at 2 minutes.
            var expiresAt = new Date(Date.now() + 120000);

            // Ensure they are the same
            var signature = Signature.createExpiresAtSignature('camtest', expiresAt, body);

            validateExpiring(body, signature.signature, signature.expires, true);
            validateExpiring('totally different', signature.signature, signature.expires, false);
            validateExpiring(body + 'a', signature.signature, signature.expires, false);

            // Test it generates the same for the same input fields.
            var signatureB = Signature.createExpiresAtSignature('camtest', expiresAt, body);
            assert.deepEqual(signature, signatureB);
        });


        var verifyRollingSignature = function(unit, value, offsetUnit, offsetValue, shouldExpireAt) {
            var body = "The quick brown fox jumped over the lazy dog.";
            var signature = Signature.createRollingSignature('camtest', unit, value, offsetUnit, offsetValue, body);
            assert.equal(signature.expires, shouldExpireAt.getTime());
        };

        it('#createRollingSignature()', function() {
            var now = new Date(Date.now());

            verifyRollingSignature('year', 1, 'day', 1, new Date(now.getFullYear() + 1, 0, 2, 0, 0, 1));
            verifyRollingSignature('month', 1, 'day', 1, new Date(now.getFullYear(), now.getMonth() + 1, 2, 0, 0, 1));
            verifyRollingSignature('day', 1, 'minute', 15, new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 15, 1));
            verifyRollingSignature('hour', 1, 'minute', 5, new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours() + 1, 5, 1));

            // Minutes are a bit of a special case.
            // The signature should expire after the next block of <value> minutes has passed.
            var minutes = Math.floor(now.getMinutes() / 15) * 15 + 15;
            verifyRollingSignature('minute', 15, 'minute', 1, new Date(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), minutes + 1, 1));

            // Offsets are optional
            verifyRollingSignature('year', 1, null, null, new Date(now.getFullYear() + 1, 0, 1, 0, 0, 1));
        });
    });
});
