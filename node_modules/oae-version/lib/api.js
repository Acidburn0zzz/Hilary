/*!
 * Copyright 2015 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fs = require('fs');
var gift = require('gift');
var path = require('path');
var util = require('util');

var log = require('oae-logger').logger('oae-version');

// A variable that will hold the path to the UI directory
var _uiPath = null;

// A variable that will hold a copy of the version information
var _version = null;

/**
 * Initialize the version module
 *
 * @param  {String}     uiPath  The path to the UI directory
 */
var init = module.exports.init = function(uiPath) {
    _uiPath = uiPath;
};

/**
 * Get the version information for OAE
 *
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.version            The version information
 * @param  {String}     callback.version.hilary     The version information for Hilary
 * @param  {String}     callback.version.3akai-ux   The version information for the UI
 */
var getVersion = module.exports.getVersion = function(callback) {
    if (_version) {
        return callback(_version);
    }

    getHilaryVersion(function(hilaryVersion) {
        getUIVersion(function(uiVersion) {
            _version = {
                'hilary': hilaryVersion,
                '3akai-ux': uiVersion
            };
            return callback(_version);
        });
    });
};

/**
 * Get the version information for the backend
 *
 * @param  {Function}   callback            Standard callback function
 * @param  {String}     callback.version    The version information for the backend
 * @api private
 */
function getHilaryVersion(callback) {
    var hilaryDirectory = path.resolve(__dirname, '..', '..', '..');
    getVersionInfo(hilaryDirectory, callback);
}

/**
 * Get the version information for the UI
 *
 * @param  {Function}   callback            Standard callback function
 * @param  {String}     callback.version    The version information for the UI
 * @api private
 */
function getUIVersion(callback) {
    getVersionInfo(_uiPath, callback);
}

/**
 * Get the version information for a directory. The version will be retrieved from
 * the build info file in the root of the directory. If there's no such file present
 * or it can't be parsed, the information will be retrieved from git. If that fails
 * as well `Unknown` will be returned
 *
 * @param  {String}     directory           The directory to get the version information for
 * @param  {Function}   callback            Standard callback function
 * @param  {String}     callback.version    The version information for the directory
 * @api private
 */
function getVersionInfo(directory, callback) {
    getBuildVersion(directory, function(err, buildVersion) {
        if (err) {
            return getGitVersion(directory, function(err, gitVersion) {
                if (err) {
                    return callback('Unknown');
                }

                return callback(gitVersion);
            });
        }

        return callback(buildVersion);
    });
}

/**
 * Each generated build has a `build-info.json` file that contains information about the build.
 * Parse it and return the relevant version information
 *
 * @param  {String}     directory           The directory where the build info can be found
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {String}     callback.version    The version information for the directory
 * @api private
 */
function getBuildVersion(directory, callback) {
    var buildInfoPath = path.join(directory, 'build-info.json');
    fs.readFile(buildInfoPath, function(err, buildInfo) {
        if (err) {
            return callback({'code': 500, 'msg': 'Unable to read the build info file'});
        }

        try {
            buildInfo = JSON.parse(buildInfo);
        } catch (ex) {
            log().error({
                'err': ex,
                'path': buildInfoPath
            }, 'Unable to parse the build info file');
            return callback({'code': 500, 'msg': 'Unable to parse the build info file'});
        }

        return callback(null, buildInfo.version);
    });
}

/**
 * Get the version from git
 *
 * @param  {String}     directory           The directory to the git repository
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error that occurred, if any
 * @param  {String}     callback.version    The version information for the directory
 * @api private
 */
function getGitVersion(directory, callback) {
    gift.init(directory, function(err, repo) {
        if (err) {
            log().error({
                'err': err,
                'path': directory
            }, 'Could not open the git repo to get the version information');
            return callback({'code': 500, 'msg': 'Could not open the git repo'});
        }

        // Get the last tag info
         repo.tags(function(err, tags) {
            // Sort them descending (last tag first)
            tags = tags.sort(function(a, b) {
                return b.commit.committed_date.getTime() - a.commit.committed_date.getTime();
            });

            // Get the most recent tag
            var lastTag = tags[0];

            // Get the current branch info
            repo.branch(function(err, branch) {
                if (err) {
                    log().error({
                        'err': err,
                        'path': directory
                    }, 'Could not get the current git branch for the version information');
                    return callback({'code': 500, 'msg': 'Could not get the branch information'});
                }

                var msg = 'Last tag: %s, Current branch: %s, Commit SHA1: %s, Date: %s';
                var version = util.format(msg, lastTag.name, branch.name, branch.commit.id, branch.commit.committed_date);
                return callback(null, version);
            });
        });
    });
}
